/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../request.js";import{property as r}from"../core/accessorSupport/decorators/property.js";import"../core/arrayUtils.js";import"../core/has.js";import"../core/accessorSupport/ensureType.js";import{subclass as s}from"../core/accessorSupport/decorators/subclass.js";import a from"../layers/FeatureLayer.js";import{queryAllJSON as n}from"../layers/support/featureQueryAll.js";import o from"./Network.js";import i from"./RulesTable.js";import l from"./support/NamedTraceConfiguration.js";import u from"./support/TerminalConfiguration.js";import{RuleType as d}from"./support/typeUtils.js";import m from"../rest/support/Query.js";let c=class extends o{constructor(e){super(e),this.sharedNamedTraceConfigurations=[],this.type="utility"}get serviceTerritoryFeatureLayerId(){return this.dataElement?.serviceTerritoryFeatureLayerId}get systemLayers(){return{rulesTableId:this.sourceJSON?.systemLayers.rulesTableId,rulesTableUrl:this.sourceJSON?`${this.featureServiceUrl}/${this.rulesTableId}`:null,subnetworksTableId:this.sourceJSON?.systemLayers.subnetworksTableId,subnetworksTableUrl:this.sourceJSON?`${this.featureServiceUrl}/${this.subnetworksTableId}`:null}}get rulesTableId(){return this.sourceJSON?.systemLayers.rulesTableId}get rulesTableUrl(){return this.sourceJSON?`${this.featureServiceUrl}/${this.rulesTableId}`:null}get subnetworksTableId(){return this.sourceJSON?.systemLayers.subnetworksTableId}get subnetworksTableUrl(){return this.sourceJSON?`${this.featureServiceUrl}/${this.subnetworksTableId}`:null}get terminalConfigurations(){return this.dataElement?.terminalConfigurations.map((e=>u.fromJSON(e)))||[]}get domainNetworkNames(){return this.dataElement?.domainNetworks.map((e=>e.domainNetworkName))||[]}get _utilityLayerList(){const e=new Set;return this.dataElement.domainNetworks.map((t=>{t.edgeSources.map((t=>{e.add(t.layerId)})),t.junctionSources.map((t=>{e.add(t.layerId)}))})),e}async load(e){return this.addResolvingPromise(super.load(e)),this.addResolvingPromise(this._loadNamedTraceConfigurationsFromNetwork(e)),this}getTerminalConfiguration(e){let t=null,r=null;const s=e.layer;let a=null;if("feature"!==s?.type)return null;if(a=s.layerId,null===a)return null;const n=e.attributes;if(null==n)return null;for(const l of Object.keys(n))"ASSETGROUP"===l.toUpperCase()&&(t=e.getAttribute(l)),"ASSETTYPE"===l.toUpperCase()&&(r=e.getAttribute(l));if(!this.dataElement)return null;let o=null;const i=this.dataElement.domainNetworks;for(const l of i){const e=l.junctionSources?.find((e=>e.layerId===a));if(e){const s=e.assetGroups?.find((e=>e.assetGroupCode===t));if(s){const e=s.assetTypes?.find((e=>e.assetTypeCode===r));if(e){o=e.terminalConfigurationId;break}}}}if(null!=o){const e=this.dataElement.terminalConfigurations?.find((e=>e.terminalConfigurationId===o));return e?u.fromJSON(e):null}return null}getTierNames(e){const t=this.dataElement?.domainNetworks.find((t=>t.domainNetworkName===e));return t?.tiers.map((e=>e.name))||[]}async getRulesTable(){return this._createRulesTable()}isUtilityLayer(e){return this._utilityLayerList.has(e.layerId)}async _loadNamedTraceConfigurationsFromNetwork(e){if(0===this.sharedNamedTraceConfigurations?.length)return;const t=this.sharedNamedTraceConfigurations.map((e=>e.globalId)),r=await this._fetchTraceConfigData(this.networkServiceUrl,t,e);for(const s of this.sharedNamedTraceConfigurations){const e=r?.find((e=>e.globalId===s.globalId));e&&s.read(e,{origin:"service"})}}async _createRulesTable(){const e=new a({url:this.rulesTableUrl});await e.load();const t=this.dataElement?.domainNetworks;if(!t)return null;const r=t.flatMap((e=>[...e.edgeSources,...e.junctionSources])),s=(await this._queryRulesTable(e)).map((t=>this._hydrateRuleInfo(e,r,t)));return new i({layer:e,rules:s})}async _queryRulesTable(e){const t=new m({where:"1=1",outFields:["*"]});return(await n(e,t)).features}_hydrateRuleInfo(e,t,r){const s=e.fieldsIndex.get("RULETYPE"),a=e.fieldsIndex.get("CREATIONDATE"),n=e.fieldsIndex.get("FROMNETWORKSOURCEID"),o=e.fieldsIndex.get("FROMASSETGROUP"),i=e.fieldsIndex.get("FROMASSETTYPE"),l=e.fieldsIndex.get("FROMTERMINALID"),u=e.fieldsIndex.get("TONETWORKSOURCEID"),m=e.fieldsIndex.get("TOASSETGROUP"),c=e.fieldsIndex.get("TOASSETTYPE"),f=e.fieldsIndex.get("TOTERMINALID"),p=e.fieldsIndex.get("VIANETWORKSOURCEID"),y=e.fieldsIndex.get("VIAASSETGROUP"),T=e.fieldsIndex.get("VIAASSETTYPE"),I=e.fieldsIndex.get("VIATERMINALID"),g=r.attributes[s.name],b=new Date(r.attributes[a.name]),h=[{networkSourceId:r.attributes[n.name],assetGroupId:r.attributes[o.name],assetTypeId:r.attributes[i.name],terminalId:r.attributes[l.name]},{networkSourceId:r.attributes[u.name],assetGroupId:r.attributes[m.name],assetTypeId:r.attributes[c.name],terminalId:r.attributes[f.name]},{networkSourceId:r.attributes[p.name],assetGroupId:r.attributes[y.name],assetTypeId:r.attributes[T.name],terminalId:r.attributes[I.name]}];let S;!function(e){e[e.from=0]="from",e[e.to=1]="to",e[e.via=2]="via"}(S||(S={}));const N={ruleType:g,creationDate:b};for(const w of[S.from,S.to,S.via]){if(g!==d.RTEdgeJunctionEdgeConnectivity&&w===S.via)continue;const e=h[w],r=t.find((t=>t.sourceId===e.networkSourceId)),s=r?.assetGroups.find((t=>t.assetGroupCode===e.assetGroupId)),a=s?.assetTypes.find((t=>t.assetTypeCode===e.assetTypeId));let n=this._getTerminal(g,a,e);g!==d.RTContainment&&g!==d.RTAttachment||(n=null);let o="";switch(w){case S.from:o="from";break;case S.to:o="to";break;case S.via:o="via"}N[`${o}NetworkSource`]=r,N[`${o}AssetGroup`]=s,N[`${o}AssetType`]=a,N[`${o}Terminal`]=n}return N}_getTerminal(e,t,r){if(e===d.RTAttachment||e===d.RTContainment)return null;const s=t?.terminalConfigurationId,a=this.terminalConfigurations?.find((e=>e.id===s));return a?.terminals?.find((e=>e.id===r.terminalId))}_fetchTraceConfigData(e,r,s){return t(`${e}/traceConfigurations/query`,{responseType:"json",query:{globalIds:JSON.stringify(r),f:"json"},...s}).then((e=>e.data.traceConfigurations))}};e([r({type:[l],json:{origins:{"web-map":{read:{source:"traceConfigurations"},write:{target:"traceConfigurations"}},service:{read:{source:"traceConfigurations"}}},read:!1}})],c.prototype,"sharedNamedTraceConfigurations",void 0),e([r({type:["utility"],readOnly:!0,json:{read:!1,write:!1}})],c.prototype,"type",void 0),e([r({readOnly:!0})],c.prototype,"serviceTerritoryFeatureLayerId",null),e([r({readOnly:!0})],c.prototype,"systemLayers",null),e([r({readOnly:!0})],c.prototype,"rulesTableId",null),e([r({readOnly:!0})],c.prototype,"rulesTableUrl",null),e([r({readOnly:!0})],c.prototype,"subnetworksTableId",null),e([r({readOnly:!0})],c.prototype,"subnetworksTableUrl",null),e([r({readOnly:!0})],c.prototype,"terminalConfigurations",null),e([r({readOnly:!0})],c.prototype,"domainNetworkNames",null),c=e([s("esri.networks.UtilityNetwork")],c);const f=c;export{f as default};
