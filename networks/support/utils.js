/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["require","exports","../../chunks/_rollupPluginBabelHelpers","../../request","../../core/Error","../../layers/support/featureQueryAll","../../portal/PortalItem","../../rest/support/FeatureSet"],(function(e,t,r,n,o,l,a,u){"use strict";const i=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"}));function s(e,t){const r=[],n=new Map;for(const l of t){const t=e.getLayerIdBySourceId(l.networkSourceId);if(null==t)continue;let r=n.get(t);void 0===r&&(r=[]),r.push(l.objectId),n.set(t,r)}const o=e.featureServiceUrl;return n.forEach(((e,t)=>r.push({layerUrl:`${o}/${t}`,objectIds:e}))),r}function c(e){return y.apply(this,arguments)}function y(){return y=r._asyncToGenerator((function*(e){const t=e.layers,n=e.layerInfos,o=e.returnGeometry||!1,a=e.outSpatialReference;yield Promise.all(t.map((e=>e.load())));const i=yield Promise.all(t.map(function(){var e=r._asyncToGenerator((function*(e){const t=n.find((t=>t.layerUrl===e.parsedUrl?.path));if(!t||!t.objectIds?.length)return{layer:e,featureSet:void 0};const r=e.createQuery();r.returnGeometry=o,r.outFields=t.outFields||["*"],r.outSpatialReference=a,r.gdbVersion=e.gdbVersion,r.objectIds=t.objectIds;const i=u.fromJSON(yield l.queryAllJSON(e,r));return{layer:e,featureSet:i}}));return function(t){return e.apply(this,arguments)}}()));return i.filter((e=>void 0!==e.featureSet))})),y.apply(this,arguments)}function p(e,t){return f.apply(this,arguments)}function f(){return(f=r._asyncToGenerator((function*(t,r){if("Utility Network Layer"===t){const{default:t}=yield new Promise(((t,r)=>e(["../UtilityNetwork"],(e=>t(i(e))),r)));return new t({layerUrl:r})}return null}))).apply(this,arguments)}function d(e){return m.apply(this,arguments)}function m(){return(m=r._asyncToGenerator((function*(e){let t="portalItem"in e?e:{portalItem:e};!t.portalItem||t.portalItem instanceof a||(t={...t,portalItem:new a(t.portalItem)});const r=t.portalItem;if(yield r.load(),"Feature Service"!==r.type)throw new o("portal:unknown-item-type","Unknown item type '${type}'",{type:r.type});const l=r.url,u=yield n(l,{responseType:"json",query:{f:"json"}}),i="Network Layer";if(u.data.type&&u.data.type.includes(i))return p(u.data.type,l);if(u.data.layers){const e=u.data.layers.find((e=>e.type.includes(i)));if(e){const t=`${l}/${e.id}`;return p(e.type,t)}}return null}))).apply(this,arguments)}t.getFeaturesFromLayers=c,t.getObjectIdsFromElements=s,t.networkFromPortalItem=d,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
