self.webpackChunkRemoteClient([150],{470:function(e,t,r){"use strict";var a=r(18),o=(r(7),r(3)),n=(r(4),r(20)),i=r(19),s=(r(24),r(34),r(35),r(50)),c=r(61);const l=o.a.getLogger("esri.tasks.support.ProjectParameters");let u=class extends s.a{constructor(e){super(e),this.geometries=null,this.outSpatialReference=null,this.transformation=null,this.transformForward=null}get outSR(){return l.warn("ProjectParameters.outSR is deprecated. Use outSpatialReference instead."),this.outSpatialReference}set outSR(e){l.warn("ProjectParameters.outSR is deprecated. Use outSpatialReference instead."),this.outSpatialReference=e}toJSON(){const e=this.geometries.map((function(e){return e.toJSON()})),t=this.geometries[0],r={};return r.outSR=this.outSpatialReference.wkid||JSON.stringify(this.outSpatialReference.toJSON()),r.inSR=t.spatialReference.wkid||JSON.stringify(t.spatialReference.toJSON()),r.geometries=JSON.stringify({geometryType:Object(c.c)(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),null!=this.transformForward&&(r.transformForward=this.transformForward),r}};Object(a.a)([Object(n.b)()],u.prototype,"geometries",void 0),Object(a.a)([Object(n.b)({json:{read:{source:"outSR"}}})],u.prototype,"outSpatialReference",void 0),Object(a.a)([Object(n.b)({json:{read:!1}})],u.prototype,"outSR",null),Object(a.a)([Object(n.b)()],u.prototype,"transformation",void 0),Object(a.a)([Object(n.b)()],u.prototype,"transformForward",void 0),u=Object(a.a)([Object(i.a)("esri.tasks.support.ProjectParameters")],u);var f=u;t.a=f},661:function(e,t,r){"use strict";r.r(t),r.d(t,"create",(function(){return s})),r.d(t,"projectGeometry",(function(){return c}));var a=r(16),o=r(14),n=r(75),i=r(470);async function s(e=null,t){if(a.a.geometryServiceUrl)return new(0,(await r.e(12).then(r.bind(null,527))).default)({url:a.a.geometryServiceUrl});if(!e)throw new o.a("internal:geometry-service-url-not-configured");let i;if(i="portal"in e?e.portal||n.a.getDefault():e,await i.load({signal:t}),i.helperServices&&i.helperServices.geometry&&i.helperServices.geometry.url)return new(0,(await r.e(12).then(r.bind(null,527))).default)({url:i.helperServices.geometry.url});throw new o.a("internal:geometry-service-url-not-configured")}async function c(e,t,r=null,a){const n=await s(r,a),c=new i.a;c.geometries=[e],c.outSpatialReference=t;const l=await n.project(c,{signal:a});if(l&&Array.isArray(l)&&1===l.length)return l[0];throw new o.a("internal:geometry-service-projection-failed")}}});