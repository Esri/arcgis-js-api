/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{getOrCreateMapValue as e}from"../../../../../core/MapUtils.js";import{isSome as t,isNone as s}from"../../../../../core/maybe.js";import{j as i}from"../../../../../chunks/quat.js";import{I as r,b as a}from"../../../../../chunks/quatf64.js";import{k as o}from"../../../../../chunks/vec3.js";import{Z as n,a as l,O as h}from"../../../../../chunks/vec3f64.js";import c from"../../../MeshMaterialMetallicRoughness.js";import{ungeoreferenceByTransform as u}from"../../georeference.js";import{Buffer as f}from"./buffer.js";import{computeOrigin as d,smoothNormals as p}from"./geometry.js";import{BufferOutputType as m,ImageOutputType as g,AttributeType as x,TargetBuffer as _,AlphaMode as A}from"./types.js";import{imageToArrayBuffer as R,imageToDataURI as T}from"./imageutils.js";import{DataType as E,TextureWrapMode as b}from"../../../../../views/webgl/enums.js";class M{constructor(e,t,s){this.params={},this.materialMap=new Array,this.imageMap=new Map,this.textureMap=new Map,this.gltf={asset:{version:"2.0",copyright:e.copyright,generator:e.generator},extras:{options:t,binChunkBuffer:null,promises:[]}},s&&(this.params=s),this._addScenes(e)}_addScenes(e){this.gltf.scene=e.defaultScene;const t=this.gltf.extras.options.bufferOutputType===m.GLB||this.gltf.extras.options.imageOutputType===g.GLB;t&&(this.gltf.extras.binChunkBuffer=new f(this.gltf)),e.forEachScene((e=>{this._addScene(e)})),t&&this.gltf.extras.binChunkBuffer.finalize()}_addScene(e){this.gltf.scenes||(this.gltf.scenes=[]);const t={};e.name&&(t.name=e.name),e.forEachNode((e=>{t.nodes||(t.nodes=[]);const s=this._addNode(e);t.nodes.push(s)})),this.gltf.scenes.push(t)}_addNode(e){this.gltf.nodes||(this.gltf.nodes=[]);const t={};e.name&&(t.name=e.name);const s=e.translation;o(s,n)||(t.translation=l(s));const c=e.rotation;i(c,r)||(t.rotation=a(c));const u=e.scale;o(u,h)||(t.scale=l(u)),e.mesh&&e.mesh.vertexAttributes.position?t.mesh=this._addMesh(e.mesh):e.forEachNode((e=>{t.children||(t.children=[]);const s=this._addNode(e);t.children.push(s)}));const f=this.gltf.nodes.length;return this.gltf.nodes.push(t),f}_addMesh(e){this.gltf.meshes||(this.gltf.meshes=[]);const s={primitives:[]},i=this.gltf.extras.options.bufferOutputType===m.GLB;let r;r=i?this.gltf.extras.binChunkBuffer:new f(this.gltf),this.params.origin||(this.params.origin=d(e));const a=u(e.vertexAttributes,e.transform,this.params.origin,{geographic:this.params.geographic,unit:"meters"});p(e,a),this._flipYZAxis(a);const o=r.addBufferView(E.FLOAT,x.VEC3,_.ARRAY_BUFFER);let n,l,h,c;a.normal&&(n=r.addBufferView(E.FLOAT,x.VEC3,_.ARRAY_BUFFER)),e.vertexAttributes.uv&&(l=r.addBufferView(E.FLOAT,x.VEC2,_.ARRAY_BUFFER)),a.tangent&&(h=r.addBufferView(E.FLOAT,x.VEC4,_.ARRAY_BUFFER)),e.vertexAttributes.color&&(c=r.addBufferView(E.UNSIGNED_BYTE,x.VEC4,_.ARRAY_BUFFER)),o.startAccessor("POSITION"),n&&n.startAccessor("NORMAL"),l&&l.startAccessor("TEXCOORD_0"),h&&h.startAccessor("TANGENT"),c&&c.startAccessor("COLOR_0");const g=a.position.length/3,{position:A,normal:R,tangent:T}=a,{color:b,uv:M}=e.vertexAttributes;for(let u=0;u<g;++u)o.push(A[3*u+0]),o.push(A[3*u+1]),o.push(A[3*u+2]),n&&t(R)&&(n.push(R[3*u+0]),n.push(R[3*u+1]),n.push(R[3*u+2])),l&&t(M)&&(l.push(M[2*u+0]),l.push(M[2*u+1])),h&&t(T)&&(h.push(T[4*u+0]),h.push(T[4*u+1]),h.push(T[4*u+2]),h.push(T[4*u+3])),c&&t(b)&&(c.push(b[4*u+0]),c.push(b[4*u+1]),c.push(b[4*u+2]),c.push(b[4*u+3]));const O=o.endAccessor(),N=this._addAccessor(o.index,O);let C,B,w,y,I;if(n){const e=n.endAccessor();C=this._addAccessor(n.index,e)}if(l){const e=l.endAccessor();B=this._addAccessor(l.index,e)}if(h){const e=h.endAccessor();w=this._addAccessor(h.index,e)}if(c){const e=c.endAccessor();y=this._addAccessor(c.index,e)}e.components&&e.components.length>0&&e.components[0].faces?(I=r.addBufferView(E.UNSIGNED_INT,x.SCALAR,_.ELEMENT_ARRAY_BUFFER),this._addMeshVertexIndexed(I,e.components,s,N,C,B,w,y)):this._addMeshVertexNonIndexed(e.components,s,N,C,B,w,y),o.finalize(),n&&n.finalize(),l&&l.finalize(),h&&h.finalize(),I&&I.finalize(),c&&c.finalize(),i||r.finalize();const S=this.gltf.meshes.length;return this.gltf.meshes.push(s),S}_flipYZAxis({position:e,normal:t,tangent:s}){this._flipYZBuffer(e,3),this._flipYZBuffer(t,3),this._flipYZBuffer(s,4)}_flipYZBuffer(e,t){if(!s(e))for(let s=1,i=2;s<e.length;s+=t,i+=t){const t=e[s],r=e[i];e[s]=r,e[i]=-t}}_addMaterial(e){if(null===e)return;const s=this.materialMap.indexOf(e);if(-1!==s)return s;this.gltf.materials||(this.gltf.materials=[]);const i={};switch(e.alphaMode){case"mask":i.alphaMode=A.MASK;break;case"auto":case"blend":i.alphaMode=A.BLEND}.5!==e.alphaCutoff&&(i.alphaCutoff=e.alphaCutoff),e.doubleSided&&(i.doubleSided=e.doubleSided),i.pbrMetallicRoughness={};const r=e=>e**2.1,a=e=>{const t=e.toRgba();return t[0]=r(t[0]/255),t[1]=r(t[1]/255),t[2]=r(t[2]/255),t};if(t(e.color)&&(i.pbrMetallicRoughness.baseColorFactor=a(e.color)),t(e.colorTexture)&&(i.pbrMetallicRoughness.baseColorTexture={index:this._addTexture(e.colorTexture)}),t(e.normalTexture)&&(i.normalTexture={index:this._addTexture(e.normalTexture)}),e instanceof c){if(t(e.emissiveTexture)&&(i.emissiveTexture={index:this._addTexture(e.emissiveTexture)}),t(e.emissiveColor)){const t=a(e.emissiveColor);i.emissiveFactor=[t[0],t[1],t[2]]}t(e.occlusionTexture)&&(i.occlusionTexture={index:this._addTexture(e.occlusionTexture)}),t(e.metallicRoughnessTexture)&&(i.pbrMetallicRoughness.metallicRoughnessTexture={index:this._addTexture(e.metallicRoughnessTexture)}),i.pbrMetallicRoughness.metallicFactor=e.metallic,i.pbrMetallicRoughness.roughnessFactor=e.roughness}else i.pbrMetallicRoughness.metallicFactor=1,i.pbrMetallicRoughness.roughnessFactor=1;const o=this.gltf.materials.length;return this.gltf.materials.push(i),this.materialMap.push(e),o}_addTexture(t){return this.gltf.textures||(this.gltf.textures=[]),e(this.textureMap,t,(()=>{const e={sampler:this._addSampler(t),source:this._addImage(t)},s=this.gltf.textures.length;return this.gltf.textures.push(e),s}))}_addImage(e){const t=this.imageMap.get(e);if(null!=t)return t;this.gltf.images||(this.gltf.images=[]);const s={};if(e.url)s.uri=e.url;else{s.extras=e.data;for(let t=0;t<this.gltf.images.length;++t)if(e.data===this.gltf.images[t].extras)return t;switch(this.gltf.extras.options.imageOutputType){case g.GLB:{const t=this.gltf.extras.binChunkBuffer.addBufferView(E.UNSIGNED_BYTE,x.SCALAR),i=R(e.data).then((({data:e,type:t})=>(s.mimeType=t,e)));t.writeAsync(i).then((()=>{t.finalize()})),s.bufferView=t.index;break}case g.DataURI:s.uri=T(e.data);break;default:this.gltf.extras.promises.push(R(e.data).then((({data:e,type:t})=>{s.uri=e,s.mimeType=t})))}}const i=this.gltf.images.length;return this.gltf.images.push(s),this.imageMap.set(e,i),i}_addSampler(e){this.gltf.samplers||(this.gltf.samplers=[]);let t=b.REPEAT,s=b.REPEAT;if("string"==typeof e.wrap)switch(e.wrap){case"clamp":t=b.CLAMP_TO_EDGE,s=b.CLAMP_TO_EDGE;break;case"mirror":t=b.MIRRORED_REPEAT,s=b.MIRRORED_REPEAT}else{switch(e.wrap.vertical){case"clamp":s=b.CLAMP_TO_EDGE;break;case"mirror":s=b.MIRRORED_REPEAT}switch(e.wrap.horizontal){case"clamp":t=b.CLAMP_TO_EDGE;break;case"mirror":t=b.MIRRORED_REPEAT}}const i={wrapS:t,wrapT:s};for(let a=0;a<this.gltf.samplers.length;++a)if(JSON.stringify(i)===JSON.stringify(this.gltf.samplers[a]))return a;const r=this.gltf.samplers.length;return this.gltf.samplers.push(i),r}_addAccessor(e,t){this.gltf.accessors||(this.gltf.accessors=[]);const s={bufferView:e,byteOffset:t.byteOffset,componentType:t.componentType,count:t.count,type:t.type,min:t.min,max:t.max,name:t.name};t.normalized&&(s.normalized=!0);const i=this.gltf.accessors.length;return this.gltf.accessors.push(s),i}_addMeshVertexIndexed(e,t,s,i,r,a,o,n){for(const l of t){e.startAccessor("INDICES");for(let s=0;s<l.faces.length;++s)e.push(l.faces[s]);const t=e.endAccessor(),h={attributes:{POSITION:i},indices:this._addAccessor(e.index,t),material:this._addMaterial(l.material)};r&&"flat"!==l.shading&&(h.attributes.NORMAL=r),a&&(h.attributes.TEXCOORD_0=a),o&&"flat"!==l.shading&&(h.attributes.TANGENT=o),n&&(h.attributes.COLOR_0=n),s.primitives.push(h)}}_addMeshVertexNonIndexed(e,t,s,i,r,a,o){const n={attributes:{POSITION:s}};i&&(n.attributes.NORMAL=i),r&&(n.attributes.TEXCOORD_0=r),a&&(n.attributes.TANGENT=a),o&&(n.attributes.COLOR_0=o),e&&(n.material=this._addMaterial(e[0].material)),t.primitives.push(n)}}export{M as GLTF};
