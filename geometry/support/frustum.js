/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../core/ObjectStack","../../chunks/mat4","../../chunks/vec3","../../chunks/vec3f64","../../chunks/vec4","../../chunks/vec4f64","./clipRay","./plane","./vectorStacks"],(function(n,e,T,t,o,_,P,i,O,R){"use strict";function r(n){return n?[O.create(n[0]),O.create(n[1]),O.create(n[2]),O.create(n[3]),O.create(n[4]),O.create(n[5])]:[O.create(),O.create(),O.create(),O.create(),O.create(),O.create()]}function I(){return[o.create(),o.create(),o.create(),o.create(),o.create(),o.create(),o.create(),o.create()]}function c(e,T){for(let t=0;t<n.NumPlanes.NUM;t++)O.copy(e[t],T[t])}function a(e,o,P,i=H){const O=T.multiply(R.sm4d.get(),o,e);T.invert(O,O);for(let T=0;T<n.NumPoints.NUM;++T){const n=_.transformMat4(R.sv4d.get(),B[T],O);t.set(i[T],n[0]/n[3],n[1]/n[3],n[2]/n[3])}d(P,i)}function d(e,T){O.fromPoints(T[n.PointIndex.FAR_BOTTOM_LEFT],T[n.PointIndex.NEAR_BOTTOM_LEFT],T[n.PointIndex.NEAR_TOP_LEFT],e[n.PlaneIndex.LEFT]),O.fromPoints(T[n.PointIndex.NEAR_BOTTOM_RIGHT],T[n.PointIndex.FAR_BOTTOM_RIGHT],T[n.PointIndex.FAR_TOP_RIGHT],e[n.PlaneIndex.RIGHT]),O.fromPoints(T[n.PointIndex.FAR_BOTTOM_LEFT],T[n.PointIndex.FAR_BOTTOM_RIGHT],T[n.PointIndex.NEAR_BOTTOM_RIGHT],e[n.PlaneIndex.BOTTOM]),O.fromPoints(T[n.PointIndex.NEAR_TOP_LEFT],T[n.PointIndex.NEAR_TOP_RIGHT],T[n.PointIndex.FAR_TOP_RIGHT],e[n.PlaneIndex.TOP]),O.fromPoints(T[n.PointIndex.NEAR_BOTTOM_LEFT],T[n.PointIndex.NEAR_BOTTOM_RIGHT],T[n.PointIndex.NEAR_TOP_RIGHT],e[n.PlaneIndex.NEAR]),O.fromPoints(T[n.PointIndex.FAR_BOTTOM_RIGHT],T[n.PointIndex.FAR_BOTTOM_LEFT],T[n.PointIndex.FAR_TOP_LEFT],e[n.PlaneIndex.FAR])}function A(e,T){for(let t=0;t<n.NumPlanes.NUM;t++){const n=e[t];if(n[0]*T[0]+n[1]*T[1]+n[2]*T[2]+n[3]>=T[3])return!1}return!0}function E(n,e){return u(n,i.fromRay(e,G.get()))}function F(e,T){for(let t=0;t<n.NumPlanes.NUM;t++){const n=e[t];if(!O.clipInfinite(n,T))return!1}return!0}function s(n,e,T){return u(n,i.fromLineSegmentAndDirection(e,T,G.get()))}function x(e,T){for(let t=0;t<n.NumPlanes.NUM;t++){if(O.signedDistance(e[t],T)>0)return!1}return!0}function u(e,T){for(let t=0;t<n.NumPlanes.NUM;t++)if(!O.clip(e[t],T))return!1;return!0}var N,f;n.PlaneIndex=void 0,(N=n.PlaneIndex||(n.PlaneIndex={}))[N.LEFT=0]="LEFT",N[N.RIGHT=1]="RIGHT",N[N.BOTTOM=2]="BOTTOM",N[N.TOP=3]="TOP",N[N.NEAR=4]="NEAR",N[N.FAR=5]="FAR",n.PointIndex=void 0,(f=n.PointIndex||(n.PointIndex={}))[f.NEAR_BOTTOM_LEFT=0]="NEAR_BOTTOM_LEFT",f[f.NEAR_BOTTOM_RIGHT=1]="NEAR_BOTTOM_RIGHT",f[f.NEAR_TOP_RIGHT=2]="NEAR_TOP_RIGHT",f[f.NEAR_TOP_LEFT=3]="NEAR_TOP_LEFT",f[f.FAR_BOTTOM_LEFT=4]="FAR_BOTTOM_LEFT",f[f.FAR_BOTTOM_RIGHT=5]="FAR_BOTTOM_RIGHT",f[f.FAR_TOP_RIGHT=6]="FAR_TOP_RIGHT",f[f.FAR_TOP_LEFT=7]="FAR_TOP_LEFT";const M={bottom:[n.PointIndex.FAR_BOTTOM_RIGHT,n.PointIndex.NEAR_BOTTOM_RIGHT,n.PointIndex.NEAR_BOTTOM_LEFT,n.PointIndex.FAR_BOTTOM_LEFT],near:[n.PointIndex.NEAR_BOTTOM_LEFT,n.PointIndex.NEAR_BOTTOM_RIGHT,n.PointIndex.NEAR_TOP_RIGHT,n.PointIndex.NEAR_TOP_LEFT],far:[n.PointIndex.FAR_BOTTOM_RIGHT,n.PointIndex.FAR_BOTTOM_LEFT,n.PointIndex.FAR_TOP_LEFT,n.PointIndex.FAR_TOP_RIGHT],right:[n.PointIndex.NEAR_BOTTOM_RIGHT,n.PointIndex.FAR_BOTTOM_RIGHT,n.PointIndex.FAR_TOP_RIGHT,n.PointIndex.NEAR_TOP_RIGHT],left:[n.PointIndex.FAR_BOTTOM_LEFT,n.PointIndex.NEAR_BOTTOM_LEFT,n.PointIndex.NEAR_TOP_LEFT,n.PointIndex.FAR_TOP_LEFT],top:[n.PointIndex.FAR_TOP_LEFT,n.PointIndex.NEAR_TOP_LEFT,n.PointIndex.NEAR_TOP_RIGHT,n.PointIndex.FAR_TOP_RIGHT]};var l,m;n.NumPlanes=void 0,(l=n.NumPlanes||(n.NumPlanes={}))[l.NUM=6]="NUM",n.NumPoints=void 0,(m=n.NumPoints||(n.NumPoints={}))[m.NUM=8]="NUM";const B=[P.fromValues(-1,-1,-1,1),P.fromValues(1,-1,-1,1),P.fromValues(1,1,-1,1),P.fromValues(-1,1,-1,1),P.fromValues(-1,-1,1,1),P.fromValues(1,-1,1,1),P.fromValues(1,1,1,1),P.fromValues(-1,1,1,1)],G=new e.ObjectStack(i.create),H=I();n.computePlanes=d,n.copy=c,n.create=r,n.createPoints=I,n.fromMatrix=a,n.intersectClipRay=F,n.intersectsLineSegment=s,n.intersectsPoint=x,n.intersectsRay=E,n.intersectsSphere=A,n.planePointIndices=M,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})}));
