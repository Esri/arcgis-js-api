/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{getInfo as n}from"./spatialReferenceUtils.js";function t(n){if(!n)return null;if(Array.isArray(n))return n;const t=n.hasZ,e=n.hasM;if("point"===n.type)return e&&t?[n.x,n.y,n.z,n.m]:t?[n.x,n.y,n.z]:e?[n.x,n.y,n.m]:[n.x,n.y];if("polygon"===n.type)return n.rings.slice(0);if("polyline"===n.type)return n.paths.slice(0);if("multipoint"===n.type)return n.points.slice(0);if("extent"===n.type){const t=n.clone().normalize();if(!t)return null;let e=!1,r=!1;return t.forEach((n=>{n.hasZ&&(e=!0),n.hasM&&(r=!0)})),t.map((n=>{const t=[[n.xmin,n.ymin],[n.xmin,n.ymax],[n.xmax,n.ymax],[n.xmax,n.ymin],[n.xmin,n.ymin]];if(e&&n.hasZ){const e=.5*(n.zmax-n.zmin);for(let n=0;n<t.length;n++)t[n].push(e)}if(r&&n.hasM){const e=.5*(n.mmax-n.mmin);for(let n=0;n<t.length;n++)t[n].push(e)}return t}))}return null}function e(n,t){const e=t[0]-n[0],r=t[1]-n[1];if(n.length>2&&t.length>2){const o=n[2]-t[2];return Math.sqrt(e*e+r*r+o*o)}return Math.sqrt(e*e+r*r)}function r(n,t,e){const r=n[0]+e*(t[0]-n[0]),o=n[1]+e*(t[1]-n[1]);return n.length>2&&t.length>2?[r,o,n[2]+e*(t[2]-n[2])]:[r,o]}function o(n,t,e,r){const[o,i]=t,[s,l]=e[r],[f,u]=e[r+1],h=f-s,c=u-l,a=h*h+c*c,g=(o-s)*h+(i-l)*c,m=Math.min(1,Math.max(0,g/a));return n[0]=s+h*m,n[1]=l+c*m,n}function i(n,t){return r(n,t,.5)}function s(n){const t=n.length;let r=0;for(let o=0;o<t-1;++o)r+=e(n[o],n[o+1]);return r}function l(n,t){if(t<=0)return n[0];const o=n.length;let i=0;for(let s=0;s<o-1;++s){const o=e(n[s],n[s+1]);if(t-i<o){const e=(t-i)/o;return r(n[s],n[s+1],e)}i+=o}return n[o-1]}function f(n,t,e){const r=n.length;let o=0,i=0,s=0;for(let l=0;l<r;l++){const f=n[l],u=n[(l+1)%r];let h=2;o+=f[0]*u[1]-u[0]*f[1],f.length>2&&u.length>2&&e&&(i+=f[0]*u[2]-u[0]*f[2],h=3),f.length>h&&u.length>h&&t&&(s+=f[0]*u[h]-u[0]*f[h])}return o<=0&&i<=0&&s<=0}function u(n){if("rings"in n){for(const t of n.rings)t.length<3||t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]||t.push([t[0][0],t[0][1]]);if(n.rings.length>0){if(!f(n.rings[0],n.hasM,n.hasZ))for(let t=0;t<n.rings.length;++t)n.rings[t]=n.rings[t].reverse()}}}function h(n){if("rings"in n)for(const t of n.rings)t.length<3||t[0][0]===t[t.length-1][0]&&t[0][1]===t[t.length-1][1]||t.push([t[0][0],t[0][1]])}function c(n){const t=n.length;let e=0;for(let r=0;r<t;r++){const o=n[r],i=n[(r+1)%t];e+=o[0]*i[1]-i[0]*o[1]}return e}function a(n){if("polygon"!==n.type&&"polyline"!==n.type)return n;return g("polygon"===n.type?n.rings:n.paths,n.spatialReference),n}function g(t,e){const r=n(e);if(!r)return;const o=r.valid[0],i=r.valid[1],s=i-o;for(const n of t){let t=1/0,e=-1/0;n.forEach((n=>{let r=n[0];for(;r<o;)r+=s;for(;r>i;)r-=s;t=Math.min(t,r),e=Math.max(e,r),n[0]=r}));const r=e-t;s-r<r&&n.forEach((n=>{n[0]<0&&(n[0]+=s)}))}}function m(n,t,e,r){let o=1/0,i=-1/0;n.forEach((n=>{let s=n.pos[0];for(;s<t;)s+=r;for(;s>e;)s-=r;o=Math.min(o,s),i=Math.max(i,s),n.unnormalizedPos[0]=s,n.unnormalizedPos[1]=n.pos[1],n.pos.length>2&&(n.unnormalizedPos[2]=n.pos[2]),n.pos.length>3&&(n.unnormalizedPos[3]=n.pos[3])}));const s=i-o;r-s<s&&n.forEach((n=>{n.unnormalizedPos[0]<0&&(n.unnormalizedPos[0]+=r)}))}export{h as closeRings,u as closeRingsAndFixWinding,m as computeUnnormalizedVertexPositionsOnDateLineCrossing,t as geometryToCoordinates,e as getLength,i as getMidpoint,s as getPathLength,l as getPointOnPath,c as getRingArea,f as isClockwise,o as projectPointOnLine,a as unnormalizeGeometryOnDatelineCrossing,g as unnormalizeVerticesOnDatelineCrossing};
