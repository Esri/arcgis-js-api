/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../core/arrayUtils","./spatialReferenceUtils"],(function(n,t,e){"use strict";function r(n){if(!n)return null;if(Array.isArray(n))return n;const t=n.hasZ,e=n.hasM;if("point"===n.type)return e&&t?[n.x,n.y,n.z,n.m]:t?[n.x,n.y,n.z]:e?[n.x,n.y,n.m]:[n.x,n.y];if("polygon"===n.type)return n.rings.slice(0);if("polyline"===n.type)return n.paths.slice(0);if("multipoint"===n.type)return n.points.slice(0);if("extent"===n.type){const t=n.clone().normalize();if(!t)return null;let e=!1,r=!1;return t.forEach((n=>{n.hasZ&&(e=!0),n.hasM&&(r=!0)})),t.map((n=>{const t=[[n.xmin,n.ymin],[n.xmin,n.ymax],[n.xmax,n.ymax],[n.xmax,n.ymin],[n.xmin,n.ymin]];if(e&&n.hasZ){const e=.5*(n.zmax-n.zmin);for(let n=0;n<t.length;n++)t[n].push(e)}if(r&&n.hasM){const e=.5*(n.mmax-n.mmin);for(let n=0;n<t.length;n++)t[n].push(e)}return t}))}return null}function i(n,t){const e=t[0]-n[0],r=t[1]-n[1];if(n.length>2&&t.length>2){const i=n[2]-t[2];return Math.sqrt(e*e+r*r+i*i)}return Math.sqrt(e*e+r*r)}function o(n,t,e){const r=n[0]+e*(t[0]-n[0]),i=n[1]+e*(t[1]-n[1]);return n.length>2&&t.length>2?[r,i,n[2]+e*(t[2]-n[2])]:[r,i]}function s(n,t,e,r){const[i,o]=t,[s,l]=e[r],[u,c]=e[r+1],f=u-s,a=c-l,g=f*f+a*a,h=(i-s)*f+(o-l)*a,p=Math.min(1,Math.max(0,h/g));return n[0]=s+f*p,n[1]=l+a*p,n}function l(n,t,e){const r=e.rings;let i,o,s=!1,l=1/0;for(let c=0;c<r.length;c++){const e=r[c];for(let r=0,c=e.length-1;r<e.length;c=r++)i=e[r],o=e[c],i[1]>t!=o[1]>t&&n<(o[0]-i[0])*(t-i[1])/(o[1]-i[1])+i[0]&&(s=!s),l=Math.min(l,u(n,t,i,o))}return 0===l?0:(s?1:-1)*Math.sqrt(l)}function u(n,t,e,r){let i=e[0],o=e[1],s=r[0]-i,l=r[1]-o;if(0!==s||0!==l){const e=((n-i)*s+(t-o)*l)/(s*s+l*l);e>1?(i=r[0],o=r[1]):e>0&&(i+=s*e,o+=l*e)}return s=n-i,l=t-o,s*s+l*l}function c(n,t){return o(n,t,.5)}function f(n){const t=n.length;let e=0;for(let r=0;r<t-1;++r)e+=i(n[r],n[r+1]);return e}function a(n,t){if(t<=0)return n[0];const e=n.length;let r=0;for(let s=0;s<e-1;++s){const e=i(n[s],n[s+1]);if(t-r<e){const i=(t-r)/e;return o(n[s],n[s+1],i)}r+=e}return n[e-1]}function g(n,t,e){const r=n.length;let i=0,o=0,s=0;for(let l=0;l<r;l++){const u=n[l],c=n[(l+1)%r];let f=2;i+=u[0]*c[1]-c[0]*u[1],u.length>2&&c.length>2&&e&&(o+=u[0]*c[2]-c[0]*u[2],f=3),u.length>f&&c.length>f&&t&&(s+=u[0]*c[f]-c[0]*u[f])}return i<=0&&o<=0&&s<=0}function h(n){const e=n.length;return e>2&&t.equals(n[0],n[e-1])}function p(n){if("rings"in n&&(y(n),n.rings.length>0&&!g(n.rings[0],n.hasM??!1,n.hasZ??!1)))for(const t of n.rings)t.reverse()}function y(n){if("rings"in n)for(const t of n.rings)h(t)||t.push(t[0].slice())}function m(n){if("polygon"!==n.type&&"polyline"!==n.type)return n;return x("polygon"===n.type?n.rings:n.paths,n.spatialReference),n}function x(n,t){const r=e.getInfo(t);if(!r)return;const i=r.valid[0],o=r.valid[1],s=o-i;for(const e of n){let n=1/0,t=-1/0;for(const s of e){const e=d(s[0],i,o);n=Math.min(n,e),t=Math.max(t,e),s[0]=e}const r=t-n;s-r<r&&e.forEach((n=>{n[0]<0&&(n[0]+=s)}))}}function d(n,t,e){const r=e-t;return n<t?e-(t-n)%r:n>e?t+(n-t)%r:n}function M(n){if(!n||n.length<3)return 0;let t=0;const e=n.length-1;for(let r=0;r<e;r++)t+=(n[r][0]-n[r+1][0])*(n[r][1]+n[r+1][1]);return t+=(n[e][0]-n[0][0])*(n[e][1]+n[0][1]),-.5*t}function z(n,t){if(n===t)return!0;if(n.type!==t.type)return!1;if("point"===n.type||"extent"===n.type)return!0;if("multipoint"===n.type)return n.points.length===t.points.length;const[e,r]="polyline"===n.type?[n.paths,t.paths]:[n.rings,t.rings];return e.length===r.length&&e.every(((n,t)=>n.length===r[t].length))}n.closeRings=y,n.closeRingsAndFixWinding=p,n.distanceFromPointToPolygon=l,n.distanceToSegmentSquared=u,n.geometryToCoordinates=r,n.getLength=i,n.getMidpoint=c,n.getPathLength=f,n.getPointOnPath=a,n.getRingArea=M,n.hasCompatibleTopology=z,n.isClockwise=g,n.isClosed=h,n.projectPointOnLine=s,n.unnormalizeGeometryOnDatelineCrossing=m,n.unnormalizeVerticesOnDatelineCrossing=x,n.unnormalizedCoordinate=d,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})}));
