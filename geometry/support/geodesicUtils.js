/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
define(["exports","../../geometry","../../core/Error","../../core/unitUtils","./geodesicConstants","../Polyline","../Polygon","../Point","../SpatialReference"],(function(e,t,n,i,s,a,o,r,c){"use strict";function l(e){if(!e)return null;if(e.isGeographic&&e.wkid){const t=s.spheroids[e.wkid];if(t)return t}if(e.wkt){const t=h(e.wkt);if(t)return t}return null}function h(e){const t=s.WKT_SPHEROID_REGEX.exec(e);if(!t||2!==t.length)return null;const n=t[1].split(",");if(!n||n.length<3)return null;const i=parseFloat(n[1]),a=parseFloat(n[2]);if(isNaN(i)||isNaN(a))return null;return{a:i,f:0===a?0:1/a}}function u(e){return"b"in e&&"eSq"in e&&"radius"in e}function p(e){const t=l(e||c.WGS84);if(u(t))return t;const n=t.a*(1-t.f);return Object.assign(t,{b:n,eSq:1-(n/t.a)**2,radius:(2*t.a+n)/3,densificationRatio:1e4/((2*t.a+n)/3)})}function f(e,t,n){const{a:i,eSq:a}=p(n),o=Math.sqrt(a),r=Math.sin(t[1]*s.toRadians),c=i*t[0]*s.toRadians;let l;if(a>0){l=i*((1-a)*(r/(1-a*(r*r))-1/(2*o)*Math.log((1-o*r)/(1+o*r))))*.5}else l=i*r;return e[0]=c,e[1]=l,e}function d(e){return null!==l(e)}function g(e,t="square-meters"){if(e.some((e=>!d(e.spatialReference))))throw new n("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const s=[];for(let n=0;n<e.length;n++){const t=e[n],i=t.spatialReference,{radius:a,densificationRatio:o}=p(i),r=a*o;s.push(m(t,r))}const a=[],o=[0,0],r=[0,0];for(let n=0;n<s.length;n++){const{rings:e,spatialReference:c}=s[n];let l=0;for(let t=0;t<e.length;t++){const n=e[t];f(o,n[0],c),f(r,n[n.length-1],c);let i=r[0]*o[1]-o[0]*r[1];for(let e=0;e<n.length-1;e++)f(o,n[e+1],c),f(r,n[e],c),i+=r[0]*o[1]-o[0]*r[1];l+=i}l=i.convertUnit(l,"square-meters",t),a.push(l/-2)}return a}function M(e,t="meters"){if(!e)throw new n("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(e.some((e=>!d(e.spatialReference))))throw new n("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const s=[];for(let n=0;n<e.length;n++){const a=e[n],{spatialReference:o}=a,r="polyline"===a.type?a.paths:a.rings;let c=0;for(let e=0;e<r.length;e++){const t=r[e];let n=0;for(let e=1;e<t.length;e++){const i=t[e-1][0],s=t[e][0],a=t[e-1][1],r=t[e][1];if(a!==r||i!==s){const e={distance:null};R(e,[i,a],[s,r],o),n+=e.distance}}c+=n}c=i.convertUnit(c,"meters",t),s.push(c)}return s}function m(e,t){if("polyline"!==e.type&&"polygon"!==e.type)throw new n("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:i}=e;if(!d(i))throw new n("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const s="polyline"===e.type?e.paths:e.rings,r=[],c=[0,0],l={distance:null};for(const n of s){const e=[];r.push(e),e.push([n[0][0],n[0][1]]);let s,a,o=n[0][0],h=n[0][1];for(let r=0;r<n.length-1;r++){if(s=n[r+1][0],a=n[r+1][1],o===s&&h===a)continue;const u=[o,h];R(l,[o,h],[s,a],i);const{azimuth:p,distance:f}=l,d=f/t;if(d>1){for(let n=1;n<=d-1;n++){w(c,u,p,n*t,i),e.push(c.slice(0))}w(c,u,p,(f+Math.floor(d-1)*t)/2,i),e.push(c.slice(0))}w(c,u,p,f,i),e.push(c.slice(0)),o=c[0],h=c[1]}}return"polyline"===e.type?new a({paths:r,spatialReference:i}):new o({rings:r,spatialReference:i})}function w(e,t,n,i,a){const o=t[0],r=t[1],c=o*s.toRadians,l=r*s.toRadians,h=n*s.toRadians,{a:u,b:f,f:d}=p(a),g=Math.sin(h),M=Math.cos(h),m=(1-d)*Math.tan(l),w=1/Math.sqrt(1+m*m),R=m*w,y=Math.atan2(m,M),v=w*g,b=v*v,q=1-b,z=q*(u*u-f*f)/(f*f),S=1+z/16384*(4096+z*(z*(320-175*z)-768)),x=z/1024*(256+z*(z*(74-47*z)-128));let N,P,A,G,k=i/(f*S),D=2*Math.PI;for(;Math.abs(k-D)>1e-12;)A=Math.cos(2*y+k),N=Math.sin(k),P=Math.cos(k),G=x*N*(A+x/4*(P*(2*A*A-1)-x/6*A*(4*N*N-3)*(4*A*A-3))),D=k,k=i/(f*S)+G;const E=R*N-w*P*M,U=Math.atan2(R*P+w*N*M,(1-d)*Math.sqrt(b+E*E)),_=d/16*q*(4+d*(4-3*q)),F=Math.atan2(N*g,w*P-R*N*M)-(1-_)*d*v*(k+_*N*(A+_*P*(2*A*A-1))),O=U/s.toRadians,j=(c+F)/s.toRadians;return e[0]=j,e[1]=O,e}function R(e,t,n,i){const a=t[0]*s.toRadians,o=t[1]*s.toRadians,r=n[0]*s.toRadians,c=n[1]*s.toRadians,{a:l,b:h,f:u,radius:f}=p(i),d=r-a,g=Math.atan((1-u)*Math.tan(o)),M=Math.atan((1-u)*Math.tan(c)),m=Math.sin(g),w=Math.cos(g),R=Math.sin(M),y=Math.cos(M);let v,b,q,z,S,x,N,P,A,G,k=1e3,D=d;do{if(N=Math.sin(D),P=Math.cos(D),q=Math.sqrt(y*N*(y*N)+(w*R-m*y*P)*(w*R-m*y*P)),0===q)return e.distance=0,e.azimuth=void 0,e.reverseAzimuth=void 0,e;S=m*R+w*y*P,x=Math.atan2(q,S),A=w*y*N/q,b=1-A*A,z=S-2*m*R/b,isNaN(z)&&(z=0),G=u/16*b*(4+u*(4-3*b)),v=D,D=d+(1-G)*u*A*(x+G*q*(z+G*S*(2*z*z-1)))}while(Math.abs(D-v)>1e-12&&--k>0);if(0===k){const t=f,n=Math.acos(Math.sin(o)*Math.sin(c)+Math.cos(o)*Math.cos(c)*Math.cos(r-a))*t,i=r-a,l=Math.sin(i)*Math.cos(c),h=Math.cos(o)*Math.sin(c)-Math.sin(o)*Math.cos(c)*Math.cos(i),u=Math.atan2(l,h);return e.azimuth=u/s.toRadians,e.distance=n,e.reverseAzimuth=void 0,e}const E=b*(l*l-h*h)/(h*h),U=E/1024*(256+E*(E*(74-47*E)-128)),_=h*(1+E/16384*(4096+E*(E*(320-175*E)-768)))*(x-U*q*(z+U/4*(S*(2*z*z-1)-U/6*z*(4*q*q-3)*(4*z*z-3)))),F=Math.atan2(y*Math.sin(D),w*R-m*y*Math.cos(D)),O=Math.atan2(w*Math.sin(D),w*R*Math.cos(D)-m*y);return e.azimuth=F/s.toRadians,e.distance=_,e.reverseAzimuth=O/s.toRadians,e}function y(e,t,s="meters"){if(!e||!t)throw new n("geodesic-distance:missing-parameters","one or both input parameters are missing");if(!e.spatialReference||!t.spatialReference)throw new n("geodesic-distance:invalid-parameters","one or both input points do not have a spatial reference");if(!e.spatialReference.equals(t.spatialReference))throw new n("geodesic-distance:invalid-parameters","spatial references of input parameters do not match");const{spatialReference:a}=e;if(!d(a))throw new n("geodesic-distance:not-supported","input geometry spatial reference is not supported");if(e.equals(t))return{distance:0,azimuth:0,reverseAzimuth:0};const o={distance:null};return R(o,[e.x,e.y],[t.x,t.y],a),o.distance=i.convertUnit(o.distance,"meters",s),o}function v(e,t,i){if(!e||null==t||null==i)throw new n("point-from-distance:missing-parameters","one or more input parameters are missing or undefined");if(i<0||i>360)throw new n("point-from-distance:-of-bounds","azimuth is restricted to angles between, and including, 0° to 360° degrees");if(!e.spatialReference)throw new n("point-from-distance:missing-spatial-reference","the input point must have a spatial reference");const{spatialReference:s}=e;if(!d(s))throw new n("geodesic-distance:not-supported","input geometry spatial reference is not supported");const a=[0,0];return w(a,[e.x,e.y],i,t,s),new r({x:a[0],y:a[1],spatialReference:s})}e.directGeodeticSolver=w,e.geodesicAreas=g,e.geodesicDensify=m,e.geodesicDistance=y,e.geodesicLengths=M,e.inverseGeodeticSolver=R,e.isSupported=d,e.pointFromDistance=v,Object.defineProperty(e,"__esModule",{value:!0})}));
