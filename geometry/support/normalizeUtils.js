/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../config.js";import e from"../../core/Error.js";import n from"../../core/Logger.js";import{isNone as o,isSome as s}from"../../core/maybe.js";import r from"../Polygon.js";import i from"../Polyline.js";import{getGeometryParts as l,cutParams as f,offsetMagnitude as c,updatePolyGeometry as p}from"./normalizeUtilsCommon.js";import{getInfo as u}from"./spatialReferenceUtils.js";import{geographicToWebMercator as a,webMercatorToGeographic as h}from"./webMercatorUtils.js";import{cut as m}from"../../rest/geometry/cut.js";import{simplify as g}from"../../rest/geometry/simplify.js";const y=n.getLogger("esri.geometry.support.normalizeUtils");function x(t){return"polygon"===t.type}function d(t){return"polygon"===t[0].type}function w(t){return"polyline"===t[0].type}function j(t){const e=[];let n=0,o=0;for(let s=0;s<t.length;s++){const r=t[s];let i=null;for(let t=0;t<r.length;t++)i=r[t],e.push(i),0===t?(n=i[0],o=n):(n=Math.min(n,i[0]),o=Math.max(o,i[0]));i&&e.push([(n+o)/2,0])}return e}function M(t,n){if(!(t instanceof i||t instanceof r)){const t="straightLineDensify: the input geometry is neither polyline nor polygon";throw y.error(t),new e(t)}const o=l(t),s=[];for(const e of o){const t=[];s.push(t),t.push([e[0][0],e[0][1]]);for(let o=0;o<e.length-1;o++){const s=e[o][0],r=e[o][1],i=e[o+1][0],l=e[o+1][1],f=Math.sqrt((i-s)*(i-s)+(l-r)*(l-r)),c=(l-r)/f,p=(i-s)/f,u=f/n;if(u>1){for(let l=1;l<=u-1;l++){const e=l*n,o=p*e+s,i=c*e+r;t.push([o,i])}const e=(f+Math.floor(u-1)*n)/2,o=p*e+s,i=c*e+r;t.push([o,i])}t.push([i,l])}}return x(t)?new r({rings:s,spatialReference:t.spatialReference}):new i({paths:s,spatialReference:t.spatialReference})}function R(t,e,n){if(e){const e=M(t,1e6);t=h(e,!0)}return n&&(t=p(t,n)),t}function b(t,e,n){if(Array.isArray(t)){const o=t[0];if(o>e){const n=c(o,e);t[0]=o+n*(-2*e)}else if(o<n){const e=c(o,n);t[0]=o+e*(-2*n)}}else{const o=t.x;if(o>e){const n=c(o,e);t=t.clone().offset(n*(-2*e),0)}else if(o<n){const e=c(o,n);t=t.clone().offset(e*(-2*n),0)}}return t}function P(t,e){let n=-1;for(let o=0;o<e.cutIndexes.length;o++){const s=e.cutIndexes[o],r=e.geometries[o],i=l(r);for(let t=0;t<i.length;t++){const e=i[t];e.some((n=>{if(n[0]<180)return!0;{let n=0;for(let t=0;t<e.length;t++){const o=e[t][0];n=o>n?o:n}n=Number(n.toFixed(9));const o=-360*c(n,180);for(let s=0;s<e.length;s++){const e=r.getPoint(t,s);r.setPoint(t,s,e.clone().offset(o,0))}return!0}}))}if(s===n){if(d(t))for(const e of l(r))t[s]=t[s].addRing(e);else if(w(t))for(const e of l(r))t[s]=t[s].addPath(e)}else n=s,t[s]=r}return t}async function L(e,n,l){if(!Array.isArray(e))return L([e],n);n&&"string"!=typeof n&&y.warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const h="string"==typeof n?n:n?.url??t.geometryServiceUrl;let x,d,w,j,M,U,z,A,v=0;const k=[],C=[];for(const t of e)if(o(t))C.push(t);else if(x||(x=t.spatialReference,d=u(x),w=x.isWebMercator,U=w?102100:4326,j=f[U].maxX,M=f[U].minX,z=f[U].plus180Line,A=f[U].minus180Line),d)if("mesh"===t.type)C.push(t);else if("point"===t.type)C.push(b(t.clone(),j,M));else if("multipoint"===t.type){const e=t.clone();e.points=e.points.map((t=>b(t,j,M))),C.push(e)}else if("extent"===t.type){const e=t.clone()._normalize(!1,!1,d);C.push(e.rings?new r(e):e)}else if(t.extent){const e=t.extent,n=c(e.xmin,M)*(2*j);let o=0===n?t.clone():p(t.clone(),n);e.offset(n,0),e.intersects(z)&&e.xmax!==j?(v=e.xmax>v?e.xmax:v,o=R(o,w),k.push(o),C.push("cut")):e.intersects(A)&&e.xmin!==M?(v=e.xmax*(2*j)>v?e.xmax*(2*j):v,o=R(o,w,360),k.push(o),C.push("cut")):C.push(o)}else C.push(t.clone());else C.push(t);let I=c(v,j),X=-90;const q=I,D=new i;for(;I>0;){const t=360*I-180;D.addPath([[t,X],[t,-1*X]]),X*=-1,I--}if(k.length>0&&q>0){const t=P(k,await m(h,k,D,l)),n=[],o=[];for(let l=0;l<C.length;l++){const r=C[l];if("cut"!==r)o.push(r);else{const r=t.shift(),i=e[l];s(i)&&"polygon"===i.type&&i.rings&&i.rings.length>1&&r.rings.length>=i.rings.length?(n.push(r),o.push("simplify")):o.push(w?a(r):r)}}if(!n.length)return o;const r=await g(h,n,l),i=[];for(let e=0;e<o.length;e++){const t=o[e];"simplify"!==t?i.push(t):i.push(w?a(r.shift()):r.shift())}return i}const E=[];for(let t=0;t<C.length;t++){const e=C[t];if("cut"!==e)E.push(e);else{const t=k.shift();E.push(!0===w?a(t):t)}}return E}function U(t){if(!t)return null;const e=t.extent;if(!e)return null;const n=t.spatialReference&&u(t.spatialReference);if(!n)return e;const[o,s]=n.valid,r=2*s,{width:i}=e;let l,{xmin:f,xmax:c}=e;if([f,c]=[c,f],"extent"===t.type||0===i||i<=s||i>r||f<o||c>s)return e;switch(t.type){case"polygon":if(!(t.rings.length>1))return e;l=j(t.rings);break;case"polyline":if(!(t.paths.length>1))return e;l=j(t.paths);break;case"multipoint":l=t.points}const p=e.clone();for(let u=0;u<l.length;u++){let t=l[u][0];t<0?(t+=s,c=Math.max(t,c)):(t-=s,f=Math.min(t,f))}return p.xmin=f,p.xmax=c,p.width<i?(p.xmin-=s,p.xmax-=s,p):e}function z(t,e){const n=u(e);if(n){const[e,o]=n.valid,s=o-e;if(t<e)for(;t<e;)t+=s;if(t>o)for(;t>o;)t-=s}return t}export{U as getDenormalizedExtent,L as normalizeCentralMeridian,z as normalizeMapX,M as straightLineDensify};
