/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/has","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass","../../../core/Error","../../../core/urlUtils","../../../core/uuid","../../../portal/support/resourceExtension","../../../core/Accessor","../../../geometry/support/spatialReferenceUtils","../../../geometry/SpatialReference","../../../geometry/support/webMercatorUtils","../../../geometry","../../../geometry/projection","../../../geometry/coordinateFormatter","./coordinateConversionUtils"],(function(e,t,r,o,i,n,s,a,c,l,p,u,d,m,h,f,g,v,y){"use strict";let _=function(t){function r(e){var r;return(r=t.call(this,e)||this).conversionInfo=null,r.coordinateSegments=null,r.defaultPattern=null,r.name=null,r.viewModel=null,r}e._inheritsLoose(r,t);var o=r.prototype;return o.convert=function(e,t){if(!y.isValidPoint(e))return Promise.reject(new a("format:invalid-point","Could not convert invalid point.",{point:e}));const r=this.get("conversionInfo.convert");return r?Promise.resolve().then((()=>r(e))):this._project(e,this.spatialReference,t).then((e=>this._getCoordinate(e).then((t=>({location:e,coordinate:t})))))},o.getConversionStrategy=function(){const e=this._viewSpatialReference;return this.get("conversionInfo.convert")||this.get("viewModel.formatterAvailable")||"xy"===this.name&&(e.isWebMercator||e.isWGS84)||"basemap"===this.name?"client":"server"},o.getDisplayCoordinate=function(e){if(!e)return null;if(!this.coordinateSegments||!this.currentPattern)return e;let t=this.currentPattern;const r=this._getSegmentMatches(e,!1);for(let o=this.coordinateSegments.length-1;o>=0;o--){const e=this.coordinateSegments[o];t=t.replace(e.alias,r[o])}return t},o.parseUserInput=function(e){let t=this.defaultPattern.replace(this._additionalCharactersPattern,"");e=e.replace(this._additionalCharactersPattern,"");const r=this._getSegmentMatches(e,!0);for(let o=this.coordinateSegments.length-1;o>=0;o--){const e=this.coordinateSegments[o];t=t.replace(e.alias,r[o])}return t},o._getSegmentMatches=function(e,t){const r=[];for(let o=0;o<this.coordinateSegments.length;o++){const i=this.coordinateSegments[o],n=e.match(i.searchPattern);if(!n){r.push("");continue}let s=n[0];if(e=e.replace(s,"").trim(),i.substitution){const e=t?i.substitution.input(s):i.substitution.output(s);e&&(s=e)}r.push(s)}return r},o.reverseConvert=function(e){const t=this.parseUserInput(e),r=this.get("conversionInfo.reverseConvert"),o=y.isSupportedNotation(this.name);let i;if(r)i=r(t);else if("xy"===this.name||"basemap"===this.name)i=y.fromXY(t,this.spatialReference);else if(this.viewModel.formatterAvailable)switch(this.name){case"dd":case"ddm":case"dms":i=v.fromLatitudeLongitude(t,this.spatialReference);break;case"mgrs":{const e="automatic";i=v.fromMgrs(t,this.spatialReference,e);break}case"utm":{const e="latitude-band-indicators";i=v.fromUtm(t,this.spatialReference,e);break}case"usng":i=v.fromUsng(t,this.spatialReference);break;default:i=null}else if(o)return y.fromGeoCoordinateString({coordinate:t,spatialReference:this.spatialReference,formatName:this.name,geometryServicePromise:this.get("viewModel.geometryServicePromise")});return i?this._project(i,this._viewSpatialReference):Promise.reject(new a("format:invalid-input","Could not parse input into point.",{userInput:e}))},o._getCoordinate=function(e){const t=this.get("viewModel.view.scale");if(!y.isValidPoint(e))return Promise.reject(new a("format:invalid-point","Could not transform invalid point into coordinate.",{point:e}));if(this.get("viewModel.formatterAvailable")||"basemap"===this.name||"xy"===this.name)switch(this.name){case"dd":case"ddm":case"dms":{const r=y.getDegreePrecision(t);return Promise.resolve(v.toLatitudeLongitude(e,this.name,r))}case"mgrs":{const t=!1,r=5,o="automatic";return Promise.resolve(v.toMgrs(e,o,r,t))}case"usng":{const t=!1,r=5;return Promise.resolve(v.toUsng(e,r,t))}case"utm":{const t=!0,r="latitude-band-indicators";return Promise.resolve(v.toUtm(e,r,t))}default:return Promise.resolve(y.pointToCoordinate(e,t))}return y.isSupportedNotation(this.name)?y.toGeoCoordinateString({formatName:this.name,location:e,geometryServicePromise:this.get("viewModel.geometryServicePromise")}):Promise.resolve(y.pointToCoordinate(e,t))},o._project=function(e,t,r){return d.equals(e.spatialReference,t)||!t?Promise.resolve(e):this.get("viewModel.formatterAvailable")&&g.isLoaded()?Promise.resolve(g.project(e,t)):this.get("viewModel.formatterAvailable")?null:h.canProject(e,t)?Promise.resolve(h.project(e,t)):y.project({location:e,spatialReference:t,geometryServicePromise:this.get("viewModel.geometryServicePromise"),scale:this.get("viewModel.view.scale")},r).then((e=>e.location))},e._createClass(r,[{key:"currentPattern",get:function(){return this._get("currentPattern")||this._get("defaultPattern")},set:function(e){this._set("currentPattern",e)}},{key:"hasDisplayProperties",get:function(){return!(!this.defaultPattern||!this.coordinateSegments)}},{key:"spatialReference",get:function(){const e=this.get("conversionInfo.spatialReference")||m.WGS84;return"basemap"===this.name?this._viewSpatialReference:e},set:function(e){void 0===e&&this._clearOverride("spatialReference"),this._override("spatialReference",e)}},{key:"_viewSpatialReference",get:function(){return this.get("viewModel.view.spatialReference")||m.WGS84}},{key:"_additionalCharactersPattern",get:function(){const e=this.get("coordinateSegments");if(!e)return null;const t=e.map((e=>e.alias)),r=this.currentPattern.replace(new RegExp(`["nsew${t.join()}]`,"gi"),"").replace(/\ /g,"");return new RegExp(`[${r}]`,"g")}}]),r}(u);return t.__decorate([n.property()],_.prototype,"conversionInfo",void 0),t.__decorate([n.property()],_.prototype,"coordinateSegments",void 0),t.__decorate([n.property()],_.prototype,"currentPattern",null),t.__decorate([n.property()],_.prototype,"defaultPattern",void 0),t.__decorate([n.property({readOnly:!0})],_.prototype,"hasDisplayProperties",null),t.__decorate([n.property()],_.prototype,"name",void 0),t.__decorate([n.property({type:m})],_.prototype,"spatialReference",null),t.__decorate([n.property()],_.prototype,"viewModel",void 0),t.__decorate([n.property({readOnly:!0})],_.prototype,"_viewSpatialReference",null),t.__decorate([n.property({readOnly:!0})],_.prototype,"_additionalCharactersPattern",null),_=t.__decorate([s.subclass("esri.widgets.CoordinateConversion.support.Format")],_),_}));
