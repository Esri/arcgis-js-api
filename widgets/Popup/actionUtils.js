/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/Logger","../../core/promiseUtils","./actions"],(function(e,t,r,o,i,n){"use strict";const s="esri.widgets.Popup.PopupViewModel",a=o.getLogger(s),u=function(e){const{event:t,view:o}=e,{action:s}=t,a=o&&o.popup;if(!s)return Promise.reject(new r("trigger-action:missing-arguments","Event has no action"));if(!a)return Promise.reject(new r("trigger-action:missing-arguments","view.popup is missing"));const{disabled:u,id:c}=s;if(!c)return Promise.reject(new r("trigger-action:invalid-action","action.id is missing"));if(u)return Promise.reject(new r("trigger-action:invalid-action","Action is disabled"));if(c===n.zoomToFeature.id)return d(a.viewModel).catch(i.throwIfNotAbortError);if(c===n.zoomToClusteredFeatures.id)return w(a.viewModel);if(c===n.browseClusteredFeatures.id)return a.featureMenuOpen=!a.featureMenuOpen,a.viewModel.browseClusterEnabled=!a.viewModel.browseClusterEnabled,Promise.resolve();if(a.viewModel.browseClusterEnabled=!1,c===n.removeSelectedFeature.id){a.close();const{selectedFeature:e}=a;if(!e)return Promise.reject(new r(`trigger-action:${n.removeSelectedFeature.id}`,"selectedFeature is required",{selectedFeature:e}));const{sourceLayer:t}=e;return t?t.remove(e):o.graphics.remove(e),Promise.resolve()}return Promise.resolve()};function c(e){const{selectedFeature:t,location:r,view:o}=e;if(!o)return null;if("3d"===o.type)return t||r;return e.get("selectedFeature.geometry")||r}function l(e,t){if("3d"!==(null==t?void 0:t.type)||!e||"esri.Graphic"!==e.declaredClass)return!0;const o=t.getViewForGraphic(e);if(o&&"whenGraphicBounds"in o){let t=!1;return o.whenGraphicBounds(e,{useViewElevation:!0}).then((e=>{t=!e||!e.boundingBox||e.boundingBox[0]===e.boundingBox[3]&&e.boundingBox[1]===e.boundingBox[4]&&e.boundingBox[2]===e.boundingBox[5]})).catch((()=>{const t=new r("zoom-to:invalid-graphic","Could not zoom to the location of the graphic.",{graphic:e});a.error(t)})),t}return!0}function d(e){return g.apply(this,arguments)}function g(){return(g=t._asyncToGenerator((function*(e){const{location:t,selectedFeature:o,view:i,zoomFactor:s}=e,u=c(e);if(!u){const e=new r("zoom-to:invalid-target-or-view","Cannot zoom to location without a target and view.",{target:u,view:i});return a.error(e),Promise.reject(e)}const d=i.scale/s,g=e.get("selectedFeature.geometry")||t,w=g&&"point"===g.type&&l(o,i);n.zoomToFeature.active=!0,n.zoomToFeature.disabled=!0;try{yield e.view.goTo({target:u,scale:w?d:void 0})}finally{n.zoomToFeature.active=!1,n.zoomToFeature.disabled=!1,e.zoomToLocation=null,w&&(e.location=g)}}))).apply(this,arguments)}function w(e){return p.apply(this,arguments)}function p(){return(p=t._asyncToGenerator((function*(e){const{selectedFeature:t,view:o}=e;if("2d"!==(null==o?void 0:o.type)){const e=new r("zoomToCluster:invalid-view","View must be 2d MapView.",{view:o});throw a.error(e),e}if(!t.isAggregate){const e=new r("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:t});throw a.error(e),e}const i=t.sourceLayer,s=yield o.whenLayerView(i),u=s.createQuery();u.aggregateIds=[t.getObjectId()],n.zoomToClusteredFeatures.active=!0,n.zoomToClusteredFeatures.disabled=!0;const{extent:c}=yield s.queryExtent(u);yield o.goTo({target:c}),n.zoomToClusteredFeatures.active=!1,n.zoomToClusteredFeatures.disabled=!1}))).apply(this,arguments)}function v(e){return f.apply(this,arguments)}function f(){return(f=t._asyncToGenerator((function*(e){const{selectedFeature:t,view:o}=e;if("2d"!==(null==o?void 0:o.type)){const e=new r("displayClusterExtent:invalid-view","View must be 2d MapView.",{view:o});throw a.error(e),e}if(!t.isAggregate){const e=new r("zoomToCluster:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:t});throw a.error(e),e}const i=t.sourceLayer,n=yield o.whenLayerView(i),s=n.createQuery();s.aggregateIds=[t.getObjectId()];const{extent:u}=yield n.queryExtent(s);e.selectedClusterBoundaryFeature.geometry=u,o.graphics.add(e.selectedClusterBoundaryFeature)}))).apply(this,arguments)}function m(e){return y.apply(this,arguments)}function y(){return(y=t._asyncToGenerator((function*(e){const{selectedFeature:t,view:o}=e;if("2d"!==(null==o?void 0:o.type)){const e=new r("browseAggregateFeatures:invalid-view","View must be 2d MapView.",{view:o});throw a.error(e),e}if(!t.isAggregate){const e=new r("browseAggregateFeatures:invalid-selectedFeature","Selected feature must represent an aggregate/cluster graphic.",{selectedFeature:t});throw a.error(e),e}const i=t.sourceLayer,s=yield o.whenLayerView(i),u=s.createQuery();u.aggregateIds=[t.getObjectId()],n.browseClusteredFeatures.active=!0,n.browseClusteredFeatures.disabled=!0;const{features:c}=yield s.queryFeatures(u);n.browseClusteredFeatures.active=!1,n.browseClusteredFeatures.disabled=!1,o.popup.open({features:[t].concat(c),featureMenuOpen:!0})}))).apply(this,arguments)}function F(e){var t;null!=(t=e.selectedFeature)&&t.isAggregate&&(e.features=e.features.filter((e=>e.isAggregate)))}e.browseAggregateFeatures=m,e.displayClusterExtent=v,e.getSelectedTarget=c,e.isZoomScreenSize=l,e.removeClusteredFeaturesForBrowsing=F,e.triggerAction=u,e.zoomToClusterExtent=w,e.zoomToLocation=d,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
