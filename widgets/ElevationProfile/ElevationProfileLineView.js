/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../../chunks/tslib.es6","../../core/has","../../core/maybe","../../core/Logger","../../core/accessorSupport/ensureType","../../core/handleUtils","../../core/accessorSupport/decorators/property","../../core/accessorSupport/decorators/subclass","../../core/urlUtils","../../core/uuid","../../portal/support/resourceExtension","../../Color","../../chunks/vec3","../../core/watchUtils","../../geometry/projectionEllipsoid","../../core/unitUtils","../../core/SetUtils","../../chunks/vec4f64","../../core/memoize","../../views/3d/support/geometryUtils","../../views/3d/webgl-engine/lib/Intersector","./ElevationProfileLine","../../layers/support/ElevationQuery"],(function(e,t,r,n,o,i,s,c,l,a,u,p,d,y,_,v,h,f,m,w,g,I,x,b){"use strict";const E=2e5;let D=function(t){function r(e){var r;return(r=t.call(this,e)||this).type="view",r.color=new d("#cf4ccf"),r.include=null,r.exclude=null,r.numSamplesForPreview=50,r.numSamplesPerChunk=25,r._getQueryElevationDependencies=w.memoize(((e,t,r,o,i,s,c)=>({inputGraphicUid:n.isSome(e)?k(e):null,visibleLayers:t,maxIntersectionDistance:r,intersectOptions:o,view:i,stationary:s,spatialReference:c}))),r._vecA=m.create(),r._vecB=m.create(),r._ray=g.ray.create(),r}e._inheritsLoose(r,t);var o=r.prototype;return o.queryElevation=async function(e,{noDataValue:t,signal:r}){const o=this.queryElevationDependencies;if(n.isNone(o))throw new Error("ElevationProfileLineInput: no dependencies");const{intersectOptions:i,view:s,spatialReference:c}=o,l=s.renderCoordsHelper,a=s.sceneIntersectionHelper,u=this._intersector,p=this._vecA,d=this._vecA,_=this._vecB,v=this._ray,h=await b.GeometryDescriptor.fromGeometry(e).project(c,r),f=h.coordinates,m=f.length;for(let n=0;n<m;++n){var w;const e=f[n];y.set(_,e.x,e.y,null!=(w=e.z)?w:0),l.toRenderCoords(_,c,_),y.copy(p,_),l.setAltitude(E,p);const r=g.ray.fromPoints(p,_,v);a.computeIntersection(r,u,i);const s=L(o,u.results.all);s?(s.getIntersectionPoint(d),l.fromRenderCoords(d,d,c),e.z=d[2]):e.z=t}return{geometry:h.export(),noDataValue:t}},o.attach=function(e){const r=()=>this._onChange();return s.handlesGroup([t.prototype.attach.call(this,e),this.watch("queryElevationDependencies",r),_.on(this,"include","change",r,r,r),_.on(this,"exclude","change",r,r,r),_.on(e,"view.elevationProvider","elevation-change",r)])},e._createClass(r,[{key:"minDemResolution",get:function(){var e,t,r;const o=null==(e=this._viewModel)?void 0:e.view;if(n.isNone(o)||"3d"!==o.type)return null;const i=null==(t=o.pointsOfInterest)||null==(r=t.focus)?void 0:r.renderLocation;if(!i)return null;return o.state.camera.computeRenderPixelSizeAt(i)*h.getMetersPerVerticalUnitForSR(o.spatialReference)}},{key:"queryElevationDependencies",get:function(){return n.applySome(this._view,(e=>this._getQueryElevationDependencies(this._viewModel.input,this._visibleLayers,this._maxIntersectionDistance,this._intersectOptions,e,e.stationary,e.spatialReference)))}},{key:"_visibleLayers",get:function(){const e=this._view,t=n.applySome(e,(e=>{var t,r;return null==(t=e.map)||null==(r=t.allLayers)?void 0:r.filter((e=>e.visible)).toArray()}));return n.unwrapOr(t,[])}},{key:"_intersectOptions",get:function(){const e=this._view;if(n.isNone(e))return{};const t=e.externalToInternalIntersectOptions({include:this.include,exclude:this.exclude}),r=e.externalToInternalIntersectOptions({exclude:this._pointCloudLayers});return t.exclude=f.union(t.exclude,r.exclude),t}},{key:"_pointCloudLayers",get:function(){const e=this._view;return n.isNone(e)?[]:e.allLayerViews.toArray().filter((e=>"point-cloud"===e.layer.type)).map((e=>e.layer))}},{key:"_view",get:function(){const e=this._viewModel.view;return n.isSome(e)&&"3d"===e.type?e:null}},{key:"_maxIntersectionDistance",get:function(){const e=this._view;return n.isNone(e)||!e.renderCoordsHelper?Number.POSITIVE_INFINITY:v.getReferenceEllipsoid(e.spatialReference).radius/e.renderCoordsHelper.unitInMeters}},{key:"_intersector",get:function(){const e=this._view;if(n.isNone(e))return null;const t=new I.Intersector(e.state.mode),r=t.options;return r.hud=!1,r.invisibleTerrain=!1,r.backfacesTerrain=!1,r.selectionMode=!1,r.store=2,t}}]),r}(x.ElevationProfileLine);function L({view:e,inputGraphicUid:t,maxIntersectionDistance:r},o){for(let i=0;i<o.length;i++){const s=o[i];if(s.distanceInRenderSpace>r)continue;const c=s.toGraphic(e);if(n.isNone(c)||k(c)!==t)return s}return null}function k(e){if(e.layer&&"objectIdField"in e.layer){const t=e.attributes[e.layer.objectIdField];if(t)return`o-${e.layer.id}-${t}`}return`u-${e.uid}`}return t.__decorate([c.property({type:d,nonNullable:!0})],D.prototype,"color",void 0),t.__decorate([c.property()],D.prototype,"include",void 0),t.__decorate([c.property()],D.prototype,"exclude",void 0),t.__decorate([c.property({readOnly:!0})],D.prototype,"minDemResolution",null),t.__decorate([c.property()],D.prototype,"queryElevationDependencies",null),t.__decorate([c.property()],D.prototype,"_visibleLayers",null),t.__decorate([c.property()],D.prototype,"_intersectOptions",null),t.__decorate([c.property()],D.prototype,"_pointCloudLayers",null),t.__decorate([c.property()],D.prototype,"_view",null),t.__decorate([c.property()],D.prototype,"_maxIntersectionDistance",null),t.__decorate([c.property()],D.prototype,"_intersector",null),D=t.__decorate([l.subclass("esri.widgets.ElevationProfile.ElevationProfileLineView")],D),D}));
