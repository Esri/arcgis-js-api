/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{addFrameTask as e}from"../../../core/scheduling.js";import t from"./GamepadInputDevice.js";import{extractState as s,stateIdle as i,stateEqual as n}from"./GamepadState.js";class a{constructor(e,t){this.element=e,this.input=t,this._hasEventListeners=!1,this._onConnectGamepad=e=>{this._connectGamepad(e.gamepad)},this._onDisconnectGamepad=e=>{const t=e.gamepad,i=t.index,n=this.inputDevices[i];n&&(this._emitGamepadEvent(t,s(n),!1),this.inputDevices.splice(i,1),this.latestUpdate.splice(i,1),this.input.gamepad.devices.remove(n),this.ensurePollingState())},this.frameTask=null,this.latestUpdate=new Array,this.inputDevices=new Array,this.callback=null;const i="getGamepads"in window.navigator,n=window.isSecureContext;this.supported=i&&n,this.supported&&(this._forEachGamepad((e=>this._connectGamepad(e))),window.addEventListener("gamepadconnected",this._onConnectGamepad),window.addEventListener("gamepaddisconnected",this._onDisconnectGamepad),this.ensurePollingState())}destroy(){this.hasEventListeners=!1,this.supported&&(window.removeEventListener("gamepadconnected",this._onConnectGamepad),window.removeEventListener("gamepaddisconnected",this._onDisconnectGamepad))}set hasEventListeners(e){this._hasEventListeners!==e&&(this._hasEventListeners=e,this.ensurePollingState())}get eventsEnabled(){return this.supported&&this.inputDevices.length>0&&this._hasEventListeners}set onEvent(e){this.callback=e}_connectGamepad(e){const s=new t(e);"unknown"!==s.deviceType&&(this.inputDevices[e.index]=s,this.input.gamepad.devices.add(s)),this.ensurePollingState()}ensurePollingState(){this.eventsEnabled?this._startPolling():this._stopPolling()}_startPolling(){null==this.frameTask&&(this.frameTask=e({update:()=>this._readGamepadState()}))}_stopPolling(){null!=this.frameTask&&(this.frameTask.remove(),this.frameTask=null,this.latestUpdate=new Array)}_readGamepadState(){const e=document.hasFocus(),t=this.element.contains(document.activeElement),a="document"===this.input.gamepad.enabledFocusMode&&!e||"view"===this.input.gamepad.enabledFocusMode&&!t;this._forEachGamepad((e=>{const t=this.inputDevices[e.index];if(!t)return;const d=this.latestUpdate[e.index],o=s(t),r=a||i(o);if(d){if(d.timestamp===e.timestamp)return;if(!d.active&&r)return;if(n(d.state,o))return}this._emitGamepadEvent(e,o,!r)}))}_forEachGamepad(e){const t=window.navigator.getGamepads();for(let s=0;s<t.length;s++){const i=t[s];this._validate(i)&&e(i)}}_emitGamepadEvent(e,t,s){const i=this.latestUpdate[e.index],n=i&&i.active;if(!n&&!s)return;const a=!n&&s?"start":n&&s?"update":"end";this.latestUpdate[e.index]={timestamp:e.timestamp,state:t,active:s},this.callback&&this.callback({device:this.inputDevices[e.index],state:t,action:a})}_validate(e){if(!e)return!1;if(!e.connected)return!1;for(let t=0;t<e.axes.length;t++)if(isNaN(e.axes[t]))return!1;return!0}}export{a as GamepadSource};
