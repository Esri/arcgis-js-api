/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Accessor.js";import i from"../../core/Evented.js";import{isNone as o,isSome as s}from"../../core/maybe.js";import{watch as r,sync as l}from"../../core/reactiveUtils.js";import{pt2px as a,screenPointObjectToArray as n,createScreenPointArray as c}from"../../core/screenUtils.js";import{property as h}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import{s as m}from"../../chunks/vec2.js";import{i as u}from"../../chunks/vec3.js";import{c as y}from"../../chunks/vec3f64.js";import{canProjectWithoutEngine as g,project as b,projectPointToVector as d}from"../../geometry/projection.js";import{getGraphicEffectiveElevationMode as f}from"../../support/elevationInfoUtils.js";import{getDefaultSymbol2D as _}from"../../symbols/support/defaults.js";import v from"../../symbols/support/ElevationInfo.js";import{intersectsDrapedGeometry as S}from"../support/drapedUtils.js";let C=class extends t{constructor(e){super(e),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.events=new i.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}set graphic(e){this._circleCollisionCache=null,this._originalSymbol=e.symbol,this._set("graphic",e),this.attachSymbolChanged()}get elevationInfo(){const e="elevationInfo"in this.graphic.layer&&this.graphic.layer.elevationInfo,t=f(this.graphic),i=e?e.offset:0;return new v({mode:t,offset:i})}set focusedSymbol(e){e!==this._get("focusedSymbol")&&(this._set("focusedSymbol",e),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(e){e!==this._get("grabbing")&&(this._set("grabbing",e),this._updateGraphicSymbol())}set hovering(e){e!==this._get("hovering")&&(this._set("hovering",e),this._updateGraphicSymbol())}set selected(e){e!==this._get("selected")&&(this._set("selected",e),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:e?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(e){const t=this.graphic;if(!1===t.visible)return null;const i=t.geometry;if(o(i))return null;const r=this._get("focusedSymbol"),l=s(r)?r:t.symbol;return"2d"===this.view.type?this._intersectDistance2D(this.view,e,i,l):this._intersectDistance3D(this.view,e,t)}attach(){this.attachSymbolChanged(),s(this.layer)&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),s(this.layer)&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=r((()=>this.graphic?.symbol),(e=>{s(e)&&e!==this.focusedSymbol&&e!==this._originalSymbol&&(this._originalSymbol=e,this._focused&&s(this.focusedSymbol)&&(this.graphic.symbol=this.focusedSymbol))}),l)}detachSymbolChanged(){s(this._graphicSymbolChangedHandle)&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&s(this.focusedSymbol)?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(e,t,i,r){if(r=r||_(i),o(r))return null;const l=1;let c=this._circleCollisionCache;if("point"!==i.type||"simple-marker"!==r.type)return S(t,i,e)?l:null;if(o(c)||!c.originalPoint.equals(i)){const t=i,o=e.spatialReference;if(g(t.spatialReference,o)){const e=b(t,o);c={originalPoint:t.clone(),mapPoint:e,radiusPx:a(r.size)},this._circleCollisionCache=c}}if(s(c)){const i=n(t,D),o=e.toScreen(c.mapPoint),s=c.radiusPx,h=o.x+a(r.xoffset),p=o.y-a(r.yoffset);return m(i,[h,p])<s*s?l:null}return null}_intersectDistance3D(e,t,i){const o=e.toMap(t,{include:[i]});return o&&d(o,j,e.renderSpatialReference)?u(j,e.state.camera.eye):null}};e([h({constructOnly:!0,nonNullable:!0})],C.prototype,"graphic",null),e([h()],C.prototype,"elevationInfo",null),e([h({constructOnly:!0,nonNullable:!0})],C.prototype,"view",void 0),e([h({value:null})],C.prototype,"focusedSymbol",null),e([h({constructOnly:!0})],C.prototype,"layer",void 0),e([h()],C.prototype,"interactive",void 0),e([h()],C.prototype,"selectable",void 0),e([h()],C.prototype,"grabbable",void 0),e([h({value:!1})],C.prototype,"grabbing",null),e([h()],C.prototype,"dragging",void 0),e([h()],C.prototype,"hovering",null),e([h({value:!1})],C.prototype,"selected",null),e([h()],C.prototype,"cursor",void 0),C=e([p("esri.views.interactive.GraphicManipulator")],C);const j=y(),D=c();export{C as GraphicManipulator};
