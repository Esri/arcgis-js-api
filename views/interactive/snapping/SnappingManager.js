/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import e from"../../../core/Evented.js";import{HandleOwner as i}from"../../../core/HandleOwner.js";import{isSome as n}from"../../../core/maybe.js";import{isAborted as s}from"../../../core/promiseUtils.js";import{watch as r,sync as o,syncAndInitial as a}from"../../../core/reactiveUtils.js";import{property as d}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as c}from"../../../core/accessorSupport/decorators/subclass.js";import{s as h}from"../../../chunks/vec2.js";import{defaultSnappingEnginesFactory as p}from"./snappingFactory.js";import l from"./SnappingOptions.js";import{squareDistance as u,sortCandidatesInPlace as f}from"./snappingUtils.js";import{IntersectionSnappingCandidate as v}from"./candidates/IntersectionSnappingCandidate.js";import{anyMapPointToScreenPoint as g}from"../support/viewUtils.js";let _=class extends(e.EventedMixin(i)){constructor(t){super(t),this.options=new l,this.snappingEnginesFactory=p,this._engines=[],this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}initialize(){this.handles.add([r((()=>{const{effectiveFeatureEnabled:t,effectiveSelfEnabled:e,touchSensitivityMultiplier:i,distance:n}=this.options;return{effectiveFeatureEnabled:t,effectiveSelfEnabled:e,touchSensitivityMultiplier:i,distance:n}}),(()=>{this.doneSnapping(),this.emit("changed")}),o),r((()=>this.options),(t=>{for(const e of this._engines)e.options=t}),o),r((()=>({viewReady:this.view.ready,viewSpatialReference:this.view.spatialReference,snappingEnginesFactory:this.snappingEnginesFactory})),(({viewReady:t,snappingEnginesFactory:e})=>this._recreateEngines(t,e)),a)])}destroy(){this._destroyEngines()}get updating(){return this._engines.some((t=>t.updating))}_recreateEngines(t,e){if(this._destroyEngines(),!t)return;const{view:i,options:n}=this;this._engines=e(i,n)}_destroyEngines(){for(const t of this._engines)t.destroy();this._engines=[]}get squaredMouseProximityTreshold(){return this.options.distance*this.options.distance}get squaredTouchProximityThreshold(){const{distance:t,touchSensitivityMultiplier:e}=this.options,i=t*e;return i*i}async snap(t,e,i){const r=e.coordinateHelper.pointToVector(t),o=await this._fetchCandidates(r,e,i);return{get valid(){return!s(i)},apply:()=>{const{snappedPoint:t,hints:i}=this._processCandidates(r,o,e);return this._removeVisualization(),n(e.visualizer)&&this.handles.add(e.visualizer.draw(i,{coordinateHelper:e.coordinateHelper,elevationInfo:e.elevationInfo,view:this.view}),m),t}}}update(t,e){this._removeVisualization();let i=t;const s=[];if(n(this._currentMainCandidate)){const n=e.coordinateHelper,r=n.pointToVector(t),o=this._currentMainCandidate.constraint.closestTo(r);if(u(g(r,n,e.elevationInfo,this.view),g(o,n,e.elevationInfo,this.view))<this._squaredPointProximityThreshold(e.pointer)){i=n.vectorToDehydratedPoint(o),this._currentMainCandidate.targetPoint=o,s.push(...this._currentMainCandidate.hints);for(const t of this._currentOtherActiveCandidates)t.targetPoint=o,s.push(...t.hints)}else this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}return n(e.visualizer)&&this.handles.add(e.visualizer.draw(s,{coordinateHelper:e.coordinateHelper,elevationInfo:e.elevationInfo,view:this.view}),m),i}doneSnapping(){this._removeVisualization(),this._currentMainCandidate=null,this._currentOtherActiveCandidates=[]}_removeVisualization(){this.handles.remove(m)}async _fetchCandidates(t,e,i){return(await Promise.all(this._engines.map((n=>n.fetchCandidates(t,e,i))))).flat()}_processCandidates(t,e,i){if(e.length<1)return this.doneSnapping(),{snappedPoint:i.coordinateHelper.vectorToDehydratedPoint(t),hints:[]};f(t,e);const s=this._currentMainCandidate;if(n(s)){const n=this._findOldConstraintInNewCandidates(s,e);if(n>=0){if(!(e[n]instanceof v))return this._intersectWithOtherCandidates(n,e,t,i);if(h(t,s.targetPoint)<this._squaredPointProximityThreshold(i.pointer))return this._updateSnappingCandidate(s,e,i)}}return this._intersectWithOtherCandidates(0,e,t,i)}_findOldConstraintInNewCandidates(t,e){return t instanceof v?this._findOldCandidateIndex(e,t.first)>=0&&this._findOldCandidateIndex(e,t.second)>=0?0:-1:this._findOldCandidateIndex(e,t)}_intersectWithOtherCandidates(t,e,i,n){const s=e[t],r=[],o=n.coordinateHelper;for(let a=0;a<e.length;++a){if(a===t)continue;const d=e[a];for(const t of s.constraint.intersect(d.constraint)){const e=o.fromXYZ(t.intersection,s.targetPoint[2]);r.push([new v(o,e,s,d,d.elevationInfo),u(g(i,n.coordinateHelper,n.elevationInfo,this.view),g(e,n.coordinateHelper,n.elevationInfo,this.view))])}}return r.length>0&&(r.sort(((t,e)=>t[1]-e[1])),r[0][1]<this._squaredPointProximityThreshold(n.pointer))?this._updateSnappingCandidate(r[0][0],e,n):this._updateSnappingCandidate(s,e,n)}_updateSnappingCandidate(t,e,i){this.doneSnapping(),this._currentMainCandidate=t;const n=this._currentMainCandidate.targetPoint,s=[];s.push(...t.hints);for(const r of e){if(t instanceof v){if(r.constraint.objectEqual(t.first.constraint)||r.constraint.objectEqual(t.second.constraint))continue}else if(r.constraint.objectEqual(t.constraint))continue;r.constraint.check(n)&&(r.targetPoint=n,this._currentOtherActiveCandidates.push(r),s.push(...r.hints))}return{snappedPoint:i.coordinateHelper.vectorToDehydratedPoint(n),hints:s}}_squaredPointProximityThreshold(t){return"touch"===t?this.squaredTouchProximityThreshold:this.squaredMouseProximityTreshold}_findOldCandidateIndex(t,e){let i=-1;for(let n=0;n<t.length;++n)if(e.constraint.objectEqual(t[n].constraint)){i=n;break}return i}get test(){return{visualizationsActive:this.handles.has(m),engines:this._engines}}};t([d({constructOnly:!0})],_.prototype,"view",void 0),t([d()],_.prototype,"options",void 0),t([d({readOnly:!0})],_.prototype,"updating",null),t([d()],_.prototype,"snappingEnginesFactory",void 0),t([d()],_.prototype,"_engines",void 0),t([d()],_.prototype,"squaredMouseProximityTreshold",null),t([d()],_.prototype,"squaredTouchProximityThreshold",null),_=t([c("esri.views.interactive.snapping.SnappingManager")],_);const m="visualization-handle";export{_ as SnappingManager};
