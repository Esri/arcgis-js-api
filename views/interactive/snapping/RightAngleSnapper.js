/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/maybe","../../../core/mathUtils","../../../chunks/vec2f64","../../../chunks/vec2","./snappingUtils","./SnappingAlgorithm","./SnappingConstraint","./candidates/RightAngleSnappingCandidate"],(function(t,e,n,i,r,o,s,p,a,h){"use strict";let c=function(t){function p(){var e;return(e=t.apply(this,arguments)||this)._tmp=r.create(),e}e._inheritsLoose(p,t);var c=p.prototype;return c.snapNewVertex=function(t,e){const n=e.geometry.editGeometry.components[0],i=n.vertices.length,r=[];if(i<2)return r;const o=s.anyMapPointToScreenPoint(t,e.coordinateHelper,e.elevationInfo,this.view),p=n.vertices[i-1];this._checkForSnappingCandidate(r,p.left,p.pos,t,p.left.left.pos,p.pos,e,t,o);const a=n.vertices[0];return this._checkForSnappingCandidate(r,a.right,a.pos,t,a.right.right.pos,a.pos,e,t,o),r},c.snapExistingVertex=function(t,e){const i=[],r=n.unwrap(e.vertexHandle),o=r.component,p=o.vertices.length;if(p<3)return i;const a=s.anyMapPointToScreenPoint(t,e.coordinateHelper,e.elevationInfo,this.view),h=r.left,c=r.right,g=o.vertices[0],l=o.vertices[p-1];if(!h)return this._checkForSnappingCandidate(i,g.right.right.right,g.right.right.pos,t,g.right.right.right.right.pos,g.right.right.pos,e,t,a),i;if(!c)return this._checkForSnappingCandidate(i,l.left.left.left,l.left.left.pos,t,l.left.left.left.left.pos,l.left.left.pos,e,t,a),i;if(h&&h.left.left){const n=h.left.left;this._checkForSnappingCandidate(i,n,h.left.pos,t,n.left.pos,h.left.pos,e,t,a)}if(c&&c.right.right){const n=c.right.right;this._checkForSnappingCandidate(i,n,c.right.pos,t,n.right.pos,c.right.pos,e,t,a)}return i},c._checkForSnappingCandidate=function(t,e,n,p,c,g,l,f,d){if(!this.edgeExceedsShortLineThreshold(e,l))return;o.subtract(this._tmp,e.right.pos,e.left.pos);const u=r.fromValues(this._tmp[1],-this._tmp[0]),v=o.dot(u,o.subtract(this._tmp,p,n))/o.squaredLength(u),S=l.coordinateHelper,m=S.fromXYZ(o.scaleAndAdd(r.create(),g,u,v),S.getZ(f,0));s.squareDistance(d,s.anyMapPointToScreenPoint(m,S,l.elevationInfo,this.view))<this.squaredProximityTreshold(l.pointer)&&t.push(new h.RightAngleSnappingCandidate({coordinateHelper:S,targetPoint:m,constraint:new a.RayConstraint(S,g,o.scaleAndAdd(S.createNew(),g,u,i.sign(v))),previousVertex:c,centerVertex:g}))},p}(p.SnappingAlgorithm);t.RightAngleSnapper=c,Object.defineProperty(t,"__esModule",{value:!0})}));
