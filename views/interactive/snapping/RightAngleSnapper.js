/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/maybe","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3","../../../chunks/vec3f64","../../../support/elevationInfoUtils","./SnappingAlgorithm","./SnappingConstraint","./snappingUtils","./candidates/RightAngleSnappingCandidate","../support/viewUtils"],(function(e,t,n,i,o,r,s,a,d,g,c,h,p){"use strict";let l=function(e){function o(){return e.apply(this,arguments)||this}t._inheritsLoose(o,e);var s=o.prototype;return s.snapNewVertex=function(e,t){const n=t.editGeometryOperations.data.components[0],i=n.vertices.length,o=[];if(i<2)return o;const{view:r}=this,s=p.anyMapPointToScreenPoint(e,t.coordinateHelper,a.absoluteHeightElevationInfo,r),d=n.vertices[i-1];if(this.edgeExceedsShortLineThreshold(d.leftEdge,t)){const n=c.convertPointElevation(d.pos,r,t),i=c.editEdgeToSnappingEdge(d.leftEdge,r,t);this._checkForSnappingCandidate(o,i,n,e,i.left,n,t,e,s)}const g=n.vertices[0];if(this.edgeExceedsShortLineThreshold(g.rightEdge,t)){const n=c.convertPointElevation(g.pos,r,t),i=c.editEdgeToSnappingEdge(g.rightEdge,r,t);this._checkForSnappingCandidate(o,i,n,e,i.right,n,t,e,s)}return o},s.snapExistingVertex=function(e,t){const i=[],o=n.unwrap(t.vertexHandle),r=o.component,s=r.vertices.length;if(s<3)return i;const{view:d}=this,g=p.anyMapPointToScreenPoint(e,t.coordinateHelper,a.absoluteHeightElevationInfo,d),h=o.leftEdge,l=o.rightEdge,f=r.vertices[0],E=r.vertices[s-1];if(!h){const n=f.rightEdge.rightVertex.rightEdge;if(this.edgeExceedsShortLineThreshold(n,t)){const o=c.editEdgeToSnappingEdge(n,d,t),r=c.convertPointElevation(f.rightEdge.rightVertex.pos,d,t);this._checkForSnappingCandidate(i,o,r,e,o.right,r,t,e,g)}return i}if(!l){const n=E.leftEdge.leftVertex.leftEdge;if(this.edgeExceedsShortLineThreshold(n,t)){const o=c.editEdgeToSnappingEdge(n,d,t),r=c.convertPointElevation(E.leftEdge.leftVertex.pos,d,t);this._checkForSnappingCandidate(i,o,r,e,o.left,r,t,e,g)}return i}if(h&&h.leftVertex.leftEdge){const n=h.leftVertex.leftEdge;if(this.edgeExceedsShortLineThreshold(n,t)){const o=c.editEdgeToSnappingEdge(n,d,t),r=c.convertPointElevation(h.leftVertex.pos,d,t);this._checkForSnappingCandidate(i,o,r,e,o.left,r,t,e,g)}}if(l&&l.rightVertex.rightEdge){const n=l.rightVertex.rightEdge;if(this.edgeExceedsShortLineThreshold(n,t)){const o=c.editEdgeToSnappingEdge(n,d,t),r=c.convertPointElevation(l.rightVertex.pos,d,t);this._checkForSnappingCandidate(i,o,r,e,o.right,r,t,e,g)}}return i},s._checkForSnappingCandidate=function(e,t,n,o,s,d,l,S,x){const{coordinateHelper:T,pointer:P}=l;i.subtract(f,t.right,t.left);const V=r.set(v,f[1],-f[0],0),k=i.dot(V,i.subtract(f,o,n))/i.squaredLength(V),C=T.fromXYZ(i.scaleAndAdd(f,d,V,k),T.getZ(S,0));if(c.squaredScreenDistance(x,p.anyMapPointToScreenPoint(C,T,a.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(P)){const t=T.toXYZ(d,E),n=r.scaleAndAdd(u,t,V,Math.sign(k)),i=T.fromXYZ(n);e.push(new h.RightAngleSnappingCandidate({coordinateHelper:T,targetPoint:C,constraint:new g.VerticalHalfPlaneConstraint(T,d,i),previousVertex:s,otherVertex:d,otherVertexType:h.OtherVertexType.CENTER,elevationInfo:T.hasZ()?a.absoluteHeightElevationInfo:null}))}},o}(d.SnappingAlgorithm);const f=o.create(),E=s.create(),u=s.create(),v=s.create();e.RightAngleSnapper=l,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
