/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/maybe","../../../chunks/vec2f64","../../../chunks/vec2","./Settings","./snappingUtils","./SnappingAlgorithm","../../3d/support/geometryUtils/vector2d","./ParallelLineSnappingCandidate"],(function(e,t,r,n,o,i,s,a,l,c){"use strict";let h=function(e){function a({enabled:t=i.defaults.lineSnapper.enabled,proximityThreshold:r=i.defaults.lineProximityThreshold,shortLineThreshold:o=i.defaults.shortLineThreshold}={}){var s;return(s=e.call(this,{enabled:t,proximityThreshold:r,shortLineThreshold:o})||this)._tmpProjection=n.create(),s}t._inheritsLoose(a,e);var h=a.prototype;return h.snapNewVertex=function(e,t){const r=t.geometry.data.components[0],n=r.edges.length,o=r.vertices.length,i=[];if(n<2)return i;const a=t.geometry.data.coordinateHelper.fromPoint(e),l=s.anyMapPointToScreenPoint(a,t.geometry.data.coordinateHelper,t.elevationInfo,t.view),c=r.vertices[o-1],h=r.vertices[0],d=r.edges[n-1];let p=d;do{this.edgeExceedsShortLineThreshold(p,t)&&(this._checkEdgeForParalleLines(p,c.pos,e,l,t,i),this._checkEdgeForParalleLines(p,h.pos,e,l,t,i)),p=p.left.left}while(p&&p!==d);return i},h.snapExistingVertex=function(e,t){const n=[],o=r.unwrap(t.vertexHandle),i=o.component;if(i.edges.length<3)return n;const a=t.geometry.data.coordinateHelper.fromPoint(e),l=s.anyMapPointToScreenPoint(a,t.geometry.data.coordinateHelper,t.elevationInfo,t.view),c=o.left,h=o.right,d=i.vertices[0],p=i.vertices.length,g=i.vertices[p-1],u=i.edges[0];let f=u;do{f!==c&&f!==h&&this.edgeExceedsShortLineThreshold(f,t)&&(c&&this._checkEdgeForParalleLines(f,c.left.pos,e,l,t,n),h&&this._checkEdgeForParalleLines(f,h.right.pos,e,l,t,n),o===d?this._checkEdgeForParalleLines(f,g.pos,e,l,t,n):o===g&&this._checkEdgeForParalleLines(f,d.pos,e,l,t,n)),f=f.right.right}while(f&&f!==u);return n},h._checkEdgeForParalleLines=function(e,t,r,a,h,d){const p=e.left.pos,g=e.right.pos;if(l.projectPointToLine(this._tmpProjection,t,p,g),o.squaredDistance(this._tmpProjection,t)<i.defaults.parallelLineThreshold)return;l.projectPointToLine(this._tmpProjection,n.fromValues(r.x,r.y),p,g,t);const u=h.geometry.data.coordinateHelper,f=u.fromXYZ(this._tmpProjection,r.hasZ?r.z:0);if(s.squareDistance(a,s.anyMapPointToScreenPoint(f,u,h.elevationInfo,h.view))<this.squaredProximityTreshold(h.pointer)){if(this.parallelToPreviousCandidate(e,d))return;d.push(new c.ParallelLineSnappingCandidate({coordinateHelper:u,referenceLine:e,lineStart:t,targetPoint:f}))}},h.parallelToPreviousCandidate=function(e,t){const r=e.left.pos,n=e.right.pos;for(const s of t)if(l.projectPointToLine(this._tmpProjection,n,s.constraint.start,s.constraint.end,r),o.squaredDistance(this._tmpProjection,n)<i.defaults.parallelLineThreshold)return s.addReferenceLine(e),!0;return!1},a}(a.SnappingAlgorithm);e.ParallelLineSnapper=h,Object.defineProperty(e,"__esModule",{value:!0})}));
