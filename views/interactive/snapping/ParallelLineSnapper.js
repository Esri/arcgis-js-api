/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/maybe","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3f64","../../../support/elevationInfoUtils","./Settings","./SnappingAlgorithm","./SnappingPoint","./snappingUtils","./candidates/ParallelLineSnappingCandidate","../support/viewUtils","../../support/geometry2dUtils"],(function(e,t,n,i,o,r,a,s,l,p,c,d,h,g){"use strict";let u=function(e){function o(){return e.apply(this,arguments)||this}t._inheritsLoose(o,e);var l=o.prototype;return l.snapNewVertex=function(e,t){const n=t.editGeometryOperations.data.components[0],i=n.edges.length,o=n.vertices.length,r=[];if(i<2)return r;const{view:s}=this,l=h.vectorToScreenPoint(e,t.spatialReference,a.absoluteHeightElevationInfo,s),d=p.anyMapPointToSnappingPoint(n.vertices[o-1].pos,s,t),g=p.anyMapPointToSnappingPoint(n.vertices[0].pos,s,t),u=n.edges[i-1];let f=u;do{if(this.edgeExceedsShortLineThreshold(f,t)){const n=c.editEdgeToSnappingEdge(f,s,t);this._checkEdgeForParallelLines(n,d,e,l,t,r),this._checkEdgeForParallelLines(n,g,e,l,t,r)}f=f.leftVertex.leftEdge}while(f&&f!==u);return r},l.snapExistingVertex=function(e,t){const i=[],o=n.unwrap(t.vertexHandle),r=o.component;if(r.edges.length<3)return i;const{view:s}=this,l=h.vectorToScreenPoint(e,t.spatialReference,a.absoluteHeightElevationInfo,s),d=o.leftEdge,g=o.rightEdge,u=r.vertices[0],f=p.anyMapPointToSnappingPoint(u.pos,s,t),P=r.vertices.length,v=r.vertices[P-1],S=p.anyMapPointToSnappingPoint(v.pos,s,t),T=r.edges[0];let E=T;do{if(E!==d&&E!==g&&this.edgeExceedsShortLineThreshold(E,t)){const n=c.editEdgeToSnappingEdge(E,s,t);d&&this._checkEdgeForParallelLines(n,p.anyMapPointToSnappingPoint(d.leftVertex.pos,s,t),e,l,t,i),g&&this._checkEdgeForParallelLines(n,p.anyMapPointToSnappingPoint(g.rightVertex.pos,s,t),e,l,t,i),o===u?this._checkEdgeForParallelLines(n,S,e,l,t,i):o===v&&this._checkEdgeForParallelLines(n,f,e,l,t,i)}E=E.rightVertex.rightEdge}while(E&&E!==T);return i},l._checkEdgeForParallelLines=function(e,t,n,o,l,u){const P=e.left,v=e.right;if(g.projectPointToLine(f,t,P,v),i.squaredDistance(f,t)<s.defaults.parallelLineThreshold)return;g.projectPointToLine(f,n,P,v,t);const{spatialReference:S,pointer:T}=l,E=p.asSnappingPoint(r.fromValues(f[0],f[1],n[2]));if(c.squaredScreenDistance(o,h.vectorToScreenPoint(E,S,a.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(T)){if(this.isVertical(E,t)||this.isVertical(P,v))return;if(this._parallelToPreviousCandidate(e,u))return;u.push(new d.ParallelLineSnappingCandidate({referenceLine:e,lineStart:t,targetPoint:E,isDraped:"on-the-ground"===l.elevationInfo?.mode}))}},l._parallelToPreviousCandidate=function(e,t){const n=e.left,o=e.right;for(const r of t)if(g.projectPointToLine(f,o,r.constraint.start,r.constraint.end,n),i.squaredDistance(f,o)<s.defaults.parallelLineThreshold)return r.addReferenceLine(e),!0;return!1},o}(l.SnappingAlgorithm);const f=o.create();e.ParallelLineSnapper=u,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
