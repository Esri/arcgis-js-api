/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/mathUtils","../../../chunks/vec3","../../../chunks/vec3f64","../../../geometry/projection","../../../geometry/projectionEllipsoid","../../../geometry/support/frustum","../../../geometry/support/plane","./interfaces","./PatchGeometryFactory","./Tile"],(function(e,t,i,s,n,r,o,a,h,l,c,d){"use strict";let u=function(h){function d(e,t,i){var s;(s=h.call(this)||this).obb=new Array(8),s.isWebMercator=!1;for(let r=0;r<8;r++)s.obb[r]=n.create();return void 0!==e&&s.init(e,t,i),s}t._inheritsLoose(d,h);var u=d.prototype;return u.init=function(e,t,o){h.prototype.init.call(this,e,t,o),this.isWebMercator=o.tilingScheme.spatialReference.isWebMercator;const a=this.ellipsoid.radius,l=this.extentInRadians[0],c=this.extentInRadians[1],d=this.extentInRadians[2],u=this.extentInRadians[3],p=e[0],P=i.lerp(c,u,.5),_=i.lerp(l,d,.5),f=0===p?0:Math.min(Math.abs(c),Math.abs(u));this._edgeLen=(d-l)*Math.cos(f)*a,this._edgeLen2=this._edgeLen*this._edgeLen,this._curvatureHeight=a-Math.sqrt(a*a-this._edgeLen2/4),r.lonLatToSphericalPCPF(this.centerAtSeaLevel,_,P,this.ellipsoid.radius,0);const T=n.fromArray(this.centerAtSeaLevel);s.normalize(T,T),this.up=T,this._updateOBB(),this.updateRadiusAndCenter()},u.updateRadiusAndCenter=function(){if(0===this.lij[0])s.set(this._center[e.CenterPosition.MIDDLE],0,0,0),s.set(this._center[e.CenterPosition.TOP],0,0,0),s.set(this._center[e.CenterPosition.BOTTOM],0,0,0),this.ellipsoid||(this.ellipsoid=o.getReferenceEllipsoid(this.surface.spatialReference)),this._center[e.CenterPosition.MIDDLE][3]=this.ellipsoid.radius+this.elevationBounds[1];else{this._updateCenter();const t=Math.max(s.squaredDistance(this._center[e.CenterPosition.MIDDLE],this.obb[0]),s.squaredDistance(this._center[e.CenterPosition.MIDDLE],this.obb[1]));this._center[e.CenterPosition.MIDDLE][3]=Math.sqrt(t)}},u._isVisible=function(t){if(!a.intersectsSphere(t,this._center[e.CenterPosition.MIDDLE]))return!1;if(this.lij[0]<10)return!0;const i=this.obb;for(let e=0;e<a.NumPlanes.NUM;e++){const s=e===a.PlaneIndex.NEAR,n=t[e];s&&(P[0]=n[0],P[1]=n[1],P[2]=n[2],P[3]=n[3]-this.surface.view.state.camera.near);const r=s?P:n;let o;for(o=0;o<8;o++){const e=i[o];if(r[0]*e[0]+r[1]*e[1]+r[2]*e[2]+r[3]<0)break}if(8===o)return!1}return!0},u.computeElevationBounds=function(){h.prototype.computeElevationBounds.call(this),this._updateOBB()},u.createGeometry=function(e,t){const i=this._getPatchType(this.lij[1],this.lij[0]);c.createSphericalGlobePatch(e,this.extent,t,this.renderData,this.extentInRadians,this.isWebMercator,this.ellipsoid,i),this.setMemoryDirty()},u._updateOBB=function(){const e=this.extentInRadians,t=this.obb;for(let i=0;i<2;i++){const s=this.elevationBounds[i];let n=4*i;r.lonLatToSphericalPCPF(t[n++],e[0],e[1],this.ellipsoid.radius,s),r.lonLatToSphericalPCPF(t[n++],e[0],e[3],this.ellipsoid.radius,s),r.lonLatToSphericalPCPF(t[n++],e[2],e[3],this.ellipsoid.radius,s),r.lonLatToSphericalPCPF(t[n++],e[2],e[1],this.ellipsoid.radius,s)}if(this.isWebMercator)switch(this._getPatchType(this.lij[1],this.lij[0])){case l.PatchType.HAS_NORTH_POLE:s.set(t[1],0,0,this.ellipsoid.radius),s.set(t[2],0,0,this.ellipsoid.radius),s.set(t[5],0,0,this.ellipsoid.radius),s.set(t[6],0,0,this.ellipsoid.radius);break;case l.PatchType.HAS_SOUTH_POLE:s.set(t[0],0,0,-this.ellipsoid.radius),s.set(t[3],0,0,-this.ellipsoid.radius),s.set(t[4],0,0,-this.ellipsoid.radius),s.set(t[7],0,0,-this.ellipsoid.radius)}},u._getPatchType=function(e,t){return e===(1<<t)-1?0===e?l.PatchType.HAS_BOTH_POLES:l.PatchType.HAS_SOUTH_POLE:0===e?l.PatchType.HAS_NORTH_POLE:l.PatchType.REGULAR},u.intersectsRay=function(t,i,s,n,r){const o=this._center[e.CenterPosition.MIDDLE],a=o[3]+s+.2*this.ellipsoid.radius*Math.abs(r*(this.extentInRadians[3]-this.extentInRadians[1])),h=i[0]*i[0]+i[1]*i[1]+i[2]*i[2],l=o[0]-t[0],c=o[1]-t[1],d=o[2]-t[2],u=(l*i[0]+c*i[1]+d*i[2])/h,p=i[0]*u-l,P=i[1]*u-c,_=i[2]*u-d;return p*p+P*P+_*_<a*a},u.getDefaultVerticesPerRowOnLevel=function(){return this.level<p.length?p[this.level]+1:2},d}(d.Tile);const p=[128,64,32,16,16,8,8,4],P=h.create();var _;e.CenterPosition=void 0,(_=e.CenterPosition||(e.CenterPosition={}))[_.TOP=0]="TOP",_[_.MIDDLE=1]="MIDDLE",_[_.BOTTOM=2]="BOTTOM",e.SphericalPatch=u,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
