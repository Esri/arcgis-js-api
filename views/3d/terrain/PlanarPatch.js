/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../core/maybe.js";import{f as t,c as r}from"../../../chunks/vec3f64.js";import{projectVectorToVector as i}from"../../../geometry/projection.js";import s from"../../../geometry/SpatialReference.js";import{wrap as a}from"../../../geometry/support/aaBoundingBox.js";import{create as o}from"../../../geometry/support/aaBoundingRect.js";import{intersectsAABB as n}from"../../../geometry/support/frustum.js";import{isPlateCarree as h}from"../../../geometry/support/spatialReferenceUtils.js";import{createPlanarGlobePatch as c,updateCornerElevationsPlanar as l,updateEdgesElevationsAndNormalsPlanar as m}from"./PatchGeometryFactory.js";import{Tile as p,CenterPosition as d}from"./Tile.js";import{intersectAabbInvDirBefore as u}from"../webgl-engine/materials/internal/MaterialUtil.js";class f extends p{constructor(e,t,r){super(),this.horizontalScaleFactor=1,this.extentInRenderSR=o(),void 0!==e&&this.init(e,t,r)}init(r,a,o){super.init(r,a,o);const n=o.view.renderSpatialReference,c=o.spatialReference,l=e(n)&&h(n)&&c.isGeographic?this.ellipsoid.radius*Math.PI/180:1;this.horizontalScaleFactor=l;const m=this.surface.isWebMercatorOnPlateeCarree,p=this.extentInRenderSR,d=this.extent;if(m){const e=t(d[0],d[1],0);i(e,s.WebMercator,e,s.PlateCarree);const r=t(d[2],d[3],0);i(r,s.WebMercator,r,s.PlateCarree),p[0]=e[0],p[1]=e[1],p[2]=r[0],p[3]=r[1]}else for(let e=0;e<4;++e)p[e]=d[e]*l;this.centerAtSeaLevel[0]=.5*(p[0]+p[2]),this.centerAtSeaLevel[1]=.5*(p[1]+p[3]),this.centerAtSeaLevel[2]=0,this._edgeLen=Math.max(p[2]-p[0],p[3]-p[1]),this._edgeLen2=this._edgeLen*this._edgeLen,this.updateRadiusAndCenter()}updateRadiusAndCenter(){this._updateCenter();const e=this.extentInRenderSR,t=.5*(e[2]-e[0]),r=.5*(e[3]-e[1]),i=Math.sqrt(t*t+r*r),s=.5*(this.elevationBounds[0]-this.elevationBounds[1]),a=Math.max(i,s);this._center[d.MIDDLE][3]=a}_isVisible(e){return n(e,this._aabb())}_aabb(){const e=this.extentInRenderSR;return a(e[0],e[1],this.elevationBounds[0],e[2],e[3],this.elevationBounds[1])}intersectsRay(e,t,r,i){return g[0]=1/t[0],g[1]=1/t[1],g[2]=1/t[2],u(this._aabb(),e,g,r,i)}createGeometry(){c(this.renderData,this.horizontalScaleFactor),this.setMemoryDirty()}getDefaultVerticesPerRowOnLevel(){return this.level<9?3:2}updateCornerElevations(){l(this.renderData,this.horizontalScaleFactor)}updateEdgeElevations(){m(this.renderData,this.horizontalScaleFactor)}}const g=r();export{f as PlanarPatch};
