/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import{neverReached as e}from"../../../../core/compilerUtils.js";import{clamp as i,acosClamped as a,deg2rad as r}from"../../../../core/mathUtils.js";import{isSome as o}from"../../../../core/maybe.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import{j as c,e as m,i as l}from"../../../../chunks/mat4.js";import{c as p}from"../../../../chunks/mat4f64.js";import{b as h,m as d,a as u,g as f,c as v,o as C,l as g,s as y,n as w,f as O,e as b,i as S,r as _}from"../../../../chunks/vec3.js";import{c as j}from"../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as x}from"../../../../geometry/projectionEllipsoid.js";import{wrap as M}from"../../../../geometry/support/ray.js";import{j as L,k as T,t as A}from"../../../../chunks/sphere.js";import{sv3d as z}from"../../../../geometry/support/vectorStacks.js";import{applyAll as E}from"../../camera/constraintUtils.js";import{ConstraintTypes as D,InteractionType as I,TiltMode as k}from"../../camera/constraintUtils/common.js";import{TiltDefault as R}from"../Constraints.js";import{InteractiveController as U}from"./InteractiveController.js";import{panMotionToRotationMatrix as H,onSurfaceTiltToEyeTiltGlobal as N,offSurfaceTiltToEyeTiltGlobal as F}from"../utils/navigationUtils.js";import{viewAngle as P}from"../utils/viewUtils.js";import{headingTiltToDirectionUp as G}from"../../support/cameraUtils.js";import{createDirectionUp as V}from"../../support/cameraUtilsInternal.js";import{Camera as B}from"../../webgl-engine/lib/Camera.js";import{extractTransformation as K,isZeroTransformation as X,extractTransformationKeyboard as Z}from"../../../navigation/gamepadAndKeyboardUtils.js";let q=class extends U{constructor(t){super(t),this.transformation={translation:[0,0,0],heading:0,tilt:0,zoom:0},this.keysButtonState=[0,0,0,0,0,0,0,0,0,0,0,0],this.tmpCamera=new B,this.constraintOptions={selection:D.ALL,interactionType:I.NONE,interactionStartCamera:new B,interactionFactor:0,interactionDirection:null,tiltMode:k.LOOK_AROUND}}handleEventGamepad(t){const e=K(t,this.view.navigation.gamepad,this.transformation);("end"===t.action||X(e))&&this.finishController()}activateDirection(t){this.keysButtonState[t]=1,Z(this.keysButtonState,this.transformation)}deactivateDirection(t){this.keysButtonState[t]=0;const e=Z(this.keysButtonState,this.transformation);X(e)&&this.finishController()}onControllerStart(t){this.filteredSurfaceElevation=this.view.pointsOfInterest.cameraOnSurface.location.z,this.headingStart=this.view.camera.heading,super.onControllerStart(t)}_updateFilteredSurfaceElevation(t){const e=this.view.pointsOfInterest.cameraOnSurface.location.z,i=1;this.filteredSurfaceElevation+=i*(e-this.filteredSurfaceElevation)*t}stepController(t,e){this._updateStartHeading(),this._updateFilteredSurfaceElevation(t),this.currentCamera.copyViewFrom(e),this._updateCameraCenter(),this.constraintOptions.interactionStartCamera.copyFrom(this.currentCamera),this._calculateControlTransformation(t,this.currentCamera,it),this._applyDisabledMovementTypes(it),this._applyPan(it.pan),this._applyRotate(it.rotate),this._applyZoom(it.zoom),this._applyAscend(it.ascend),this.constraintOptions.interactionType=I.NONE,this.constraintOptions.selection=D.COLLISION,E(this.view,this.currentCamera,this.constraintOptions),super.stepController(t,e)}_updateStartHeading(){0!==this.transformation.heading&&(this.headingStart=this.view.camera.heading)}_applyRotate(t){if(!t.enabled)return;const e=this.currentCamera;h(at,e.center,e.eye),d(at,at,t.matrix),e.center=u(at,at,e.eye),e.up=d(at,e.up,t.matrix),this.constraintOptions.interactionType=I.LOOK_AROUND,this.constraintOptions.selection=D.ALL_EXCEPT_COLLISION,E(this.view,e,this.constraintOptions)}_applyPan(t,e=this.currentCamera){if(!t.enabled)return;e.eye=d(at,e.eye,t.matrix),e.center=d(at,e.center,t.matrix);this.view.state.isGlobal&&(e.up=d(at,e.up,t.matrix)),this.constraintOptions.interactionType=I.PAN,this.constraintOptions.selection=D.ALL,E(this.view,e,this.constraintOptions)}_applyZoom(t){if(!t)return;const e=this.currentCamera.viewForward;this.currentCamera.eye=u(at,this.currentCamera.eye,f(z.get(),e,t)),v(rt,e),C(rt,rt),this.constraintOptions.interactionDirection=rt,this.constraintOptions.interactionType=I.ZOOM,this.constraintOptions.selection=D.ALL_EXCEPT_COLLISION,E(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null}_applyAscend(t){if(!t)return;const e=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,z.get());this.constraintOptions.interactionDirection=v(rt,e);if(this.view.state.isGlobal){const e=g(this.currentCamera.eye),i=(e+t)/e;this.currentCamera.eye=f(at,this.currentCamera.eye,i),this.currentCamera.center=f(at,this.currentCamera.center,i)}else{const i=f(z.get(),e,t);this.currentCamera.eye=u(at,this.currentCamera.eye,i),this.currentCamera.center=u(at,this.currentCamera.center,i)}this._updateCameraCenter(),this.constraintOptions.interactionType=I.ASCEND,this.constraintOptions.selection=D.COLLISION,E(this.view,this.currentCamera,this.constraintOptions)&&this._updateCameraCenter(),this.constraintOptions.selection=D.ALL_EXCEPT_COLLISION,E(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null}_calculateControlTransformation(t,e,i){st(i);const a=this._computeVelocities(t);this.view.state.isLocal?this._calculateControlTransformationLocal(a,e,i):this._calculateControlTransformationGlobal(a,e,i)}_updateCameraCenter(){const t=this.view.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude,e=this.view.renderCoordsHelper,i=this.currentCamera.ray;this.currentCamera.center=e.intersectManifoldClosestSilhouette(i,t,at)}_calculateControlTransformationLocal(t,a,r){const{viewRight:o,viewForward:s}=a,n=this.transformation,l=this.view.navigation.gamepad,p=y(z.get(),s[0],s[1],0);w(p,p);const h=n.translation[0]*t.pan;if(0!==h){const t=f(z.get(),o,h);c(r.pan.matrix,r.pan.matrix,t),r.pan.enabled=!0}switch(l.mode){case"pan":{const e=-n.translation[1]*t.pan;if(0!==e){const t=f(z.get(),p,e);c(r.pan.matrix,r.pan.matrix,t),r.pan.enabled=!0}r.zoom=n.zoom*t.zoom;break}case"zoom":r.zoom=(-n.translation[1]+n.zoom)*t.zoom;break;default:e(l.mode)}const d=n.translation[2]*t.ascend;r.ascend=d;const u=-n.heading*t.rotate;0!==u&&(m(r.rotate.matrix,r.rotate.matrix,u,this.view.renderCoordsHelper.worldUpAtPosition(a.eye,z.get())),r.rotate.enabled=!0);const v=n.tilt*t.rotate,C=P(this.view.renderCoordsHelper,a.center,a.eye),g=i(C+v,R.min,R.max)-C;g&&(m(r.rotate.matrix,r.rotate.matrix,g,o),r.rotate.enabled=!0)}_calculateControlTransformationGlobal(t,e,i){const{eye:a,viewRight:r}=e,o=this.transformation,s=this.view.navigation.gamepad,n=O(z.get(),r,a);w(n,n),C(n,n),H(this.startCamera,e,o,t,this.view.camera.heading,this.headingStart,this.view.camera.tilt,i,s),this.tmpCamera.copyFrom(this.currentCamera),this._applyPan(it.pan,this.tmpCamera);const c=this.view.pointsOfInterest.centerOnSurfaceFrequent.estimatedSurfaceAltitude,l=o.translation[2]*t.ascend;i.ascend=l;const p=-o.heading*t.rotate;0!==p&&(m(i.rotate.matrix,i.rotate.matrix,p,this.tmpCamera.eye),i.rotate.enabled=!0);const h=o.tilt*t.rotate,d=this._clampTiltDeltaGlobalToValidRange(h,e.ray,c);0!==d&&(m(i.rotate.matrix,i.rotate.matrix,d,this.tmpCamera.viewRight),i.rotate.enabled=!0),i.zoom+=o.zoom*t.zoom}_clampTiltDeltaGlobalToValidRange(t,e,r){const o=x(this.view.spatialReference),s=N(R.min,e.origin,r,o);let n=0,c=0;const m=z.get();if(this.view.renderCoordsHelper.intersectManifold(e,r,m)){const t=P(this.view.renderCoordsHelper,m,e.origin);n=N(t,e.origin,r,o),c=N(R.max,e.origin,r,o)}else{L(T(A,r+o.radius),e,m);const t=a(-b(e.direction,w(m,m)));n=F(t,e.origin,r,o),c=F(R.max,e.origin,r,o)}return i(n+t,s,c)-n}_getPointAbsoluteSurfaceElevation(t,e,i){const{renderCoordsHelper:a}=this.view,r=a.getAltitude(t),o=e+Math.abs(r-e);return a.setAltitude(i,o,t),o}_clampedDistanceToSurface(t,e){const{renderCoordsHelper:i}=this.view,{camera:a}=this.view.state,{direction:r}=G(this.view,e,0,Q,ot),o=i.intersectManifoldClosestSilhouette(M(e,r),t,z.get()),s=S(e,o),n=i.intersectManifoldClosestSilhouette(M(e,_(z.get(),e,a.center)),t,z.get()),c=S(e,n);return Math.min(s,c)}_computeHeadingRotateRadius(t){const{renderCoordsHelper:e,state:i}=this.view,{camera:r,isGlobal:o}=i,s=e.intersectManifoldClosestSilhouette(r.ray,this.filteredSurfaceElevation,z.get());if(o){const e=h(z.get(),t,s),i=g(e);f(e,e,1/i);const r=w(z.get(),t),o=a(b(r,e));return i*Math.sin(Math.min(W,o))}{const i=v(z.get(),t);return e.setAltitude(i,this.filteredSurfaceElevation),S(s,i)}}_minimumAscendVelocity(){return this.view.state.constraints.collision.enabled?0:$}_computeVelocities(t){const e=this.filteredSurfaceElevation,a=e+x(this.view.spatialReference).radius,{camera:r,isGlobal:o}=this.view.state,s=z.get(),n=this._getPointAbsoluteSurfaceElevation(r.eye,e,s),c=this._clampedDistanceToSurface(e,s),m=r.width/2,l=Y*r.width,p=Y*r.width,h=c*Math.tan(.5*r.fovX)/m,d=h/a,u=h/this._computeHeadingRotateRadius(s),f=n-e;return{pan:(o?d:h)*l*t,ascend:Math.max(this._minimumAscendVelocity()*t,2**(l*t/m)*f-f),zoom:2**(l*t/m)*c-c,rotate:i(u*p,tt,et)*t}}_applyDisabledMovementTypes(t){!o(this.disableMovements)||void 0!==this.disableMovements.mode&&this.view.state.viewingMode!==this.disableMovements.mode||(t.zoom=this.disableMovements.zoom?0:t.zoom,t.ascend=this.disableMovements.ascend?0:t.ascend,t.pan.enabled=!this.disableMovements.pan,this.disableMovements.pan&&l(t.pan.matrix),t.rotate.enabled=!this.disableMovements.rotate,this.disableMovements.rotate&&l(t.rotate.matrix))}static activatesFor(t,e){const i=K(e,t.navigation.gamepad,J);return!("end"===e.action||X(i))}};t([s({constructOnly:!0})],q.prototype,"view",void 0),t([s({constructOnly:!0})],q.prototype,"gamepadDevice",void 0),t([s({constructOnly:!0})],q.prototype,"disableMovements",void 0),q=t([n("esri.views.3d.state.controllers.GamepadKeyboardController")],q);const J={translation:[0,0,0],heading:0,tilt:0,zoom:0},Q=80,W=r(Q),Y=.75,$=5,tt=r(30),et=r(80),it={zoom:0,ascend:0,pan:{enabled:!1,matrix:p()},rotate:{enabled:!1,matrix:p()}},at=j(),rt=j(),ot=V();function st(t){t.zoom=0,t.ascend=0,t.pan.enabled=!1,l(t.pan.matrix),t.rotate.enabled=!1,l(t.rotate.matrix)}export{q as GamepadKeyboardController};
