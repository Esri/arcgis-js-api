/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Handles.js";import{property as r}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as o}from"../../../../core/accessorSupport/decorators/subclass.js";import"../../camera/constraintUtils.js";import{eyeWithinExtent as s}from"../../camera/intersectionUtils.js";import{CameraController as i,State as a}from"./CameraController.js";import{applySurfaceCollisionConstraint as n,Mode as l}from"../../camera/constraintUtils/surfaceCollision.js";let c=class extends i{constructor(e){super(e),this.handles=new t}set desiredCamera(e){this._set("desiredCamera",e.clone())}get canStop(){return!0}get constraintEnabled(){return this.view.state.constraints.collision.enabled}onControllerStart(){this.state=a.Running,this.handles.add(this.view.basemapTerrain.on("elevation-change",(e=>this._handleElevationChangeEvent(e)))),this._applyCorrection()}onControllerEnd(){this.handles.removeAll()}stepController(){}_handleElevationChangeEvent(e){s(this.view,this.desiredCamera,e.extent,e.spatialReference)&&this._applyCorrection()}_applyCorrection(){this.view.state.updateCamera((e=>{e.copyViewFrom(this.desiredCamera),n(this.view,e,l.EYE_AND_CENTER)||this.constraintEnabled||(this.state=a.Stopped)}))}};e([r({constructOnly:!0})],c.prototype,"view",void 0),e([r({constructOnly:!0})],c.prototype,"desiredCamera",null),c=e([o("esri.views.3d.state.controllers.SurfaceCollisionCorrectionController")],c);export{c as SurfaceCollisionCorrectionController};
