/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/has","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/property","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/urlUtils","../../../../../core/uuid","../../../../../portal/support/resourceExtension","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../chunks/vec3f64","../../../../../chunks/vec3","../../../../../support/featureFlags","../../../support/geometryUtils","../../../camera/constraintUtils","../../../webgl-engine/lib/Camera","../../utils/navigationUtils","../InteractiveController","../../../input/util","../momentum/PanPlanarMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,n,i,o,a,r,s,l,c,m,h,p,u,d,g,C,P,v,M,b,f,w,y,S,E,V,z){"use strict";const A=u.fromValues(0,0,1),H={ELEVATION_THRESHOLD:3e4,ANGLE_THRESHOLD:16/180*Math.PI};t.PinchAndPanController=function(t){function n(e){var n;return(n=t.call(this,e)||this).view=null,n.rotationValueSmooth=new f.ExponentialFalloff(.05),n.scalingValueSmooth=new f.ExponentialFalloff(.05),n.planeHorizontal=C.plane.create(),n.planeVertical=C.plane.create(),n.rotationMomentumEstimator=new V.RotationMomentumEstimator,n.panMomentumEstimator=new E.PanPlanarMomentumEstimator(300,12,.9),n.zoomMomentumEstimator=new z.ZoomMomentumEstimator,n.beginCenter=u.create(),n.tmpPoints=[],n.beginCenterScreen=p.createScreenPointArray(),n.tmpCentroid3d=u.create(),n.tmpCentroid2d=p.createScreenPointArray(),n.tmp2d=p.createScreenPointArray(),n.constraintOptions={selection:15,interactionType:0,interactionFactor:0,interactionStartCamera:new v,interactionDirection:null,tiltMode:0},n}e._inheritsLoose(n,t);var i=n.prototype;return i.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panMomentumEstimator.enabled=e,this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.rotationValueSmooth.reset(),this.scalingValueSmooth.reset(),p.screenPointObjectToArray(t.center,this.beginCenterScreen),C.plane.fromNormalAndOffset(A,0,this.planeHorizontal);const n=u.create();this.intersectionHelper.intersectScreenFreePointFallback(this.beginCenterScreen,n);const i=u.create();d.negate(i,this.beginCamera.viewForward);const o=u.create();d.copy(o,A);const a=d.dot(i,o),r=a<0,s=h.asinClamped(r?-a:a);if(this.panMode=s>=H.ANGLE_THRESHOLD?M.NavigationMode.Horizontal:M.NavigationMode.Vertical,C.plane.setOffsetFromPoint(this.planeHorizontal,n,this.planeHorizontal),this.beginCamera.aboveGround||C.plane.negate(this.planeHorizontal,this.planeHorizontal),this.panMode===M.NavigationMode.Vertical){if(d.scale(o,o,a),d.subtract(this.planeVertical,i,o),d.normalize(this.planeVertical,this.planeVertical),C.plane.setOffsetFromPoint(this.planeVertical,n,this.planeVertical),!g.disableContextNavigation()){const t=u.create(),e=u.create(),i=u.create();d.subtract(t,n,this.currentCamera.eye),d.normalize(t,t);const o=5*Math.max(Math.abs(this.view.camera.position.z),50),a=this.view._stage.renderView.getMinimalDepthForArea(this.beginCenterScreen[0],this.beginCenterScreen[1],this.view._stage.camera,80),r=a?Math.min(a,o):o;d.copy(i,d.add(e,this.currentCamera.eye,d.scale(e,t,r))),this.planeVertical[3]=-d.dot(this.planeVertical,i)}this.computePlanePoints(t.pointers,this.planeVertical,this.beginCamera,this.tmpPoints),M.centroid(this.tmpPoints,this.beginCenter)}else this.computePlanePoints(t.pointers,this.planeHorizontal,this.beginCamera,this.tmpPoints),M.centroid(this.tmpPoints,this.beginCenter);this.constraintOptions.interactionStartCamera.copyFrom(this.beginCamera)},i.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.beginCamera);const e=t.pointers.size>1,n=this.panMode===M.NavigationMode.Horizontal?this.planeHorizontal:this.planeVertical,i=this.beginCenter;if(e){const e=this.beginRadius/t.radius,n=.001875*Math.min(Math.max(t.radius,40),120);this.scalingValueSmooth.gain=n,this.scalingValueSmooth.update(e),M.applyZoomToPoint(this.currentCamera,i,this.scalingValueSmooth.value,this.view.state.constraints.minimumPoiDistance),this.zoomMomentumEstimator.add(this.scalingValueSmooth.value,.001*t.timestamp),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=P.pixelDistanceToInteractionFactor(Math.abs(t.radius-this.beginRadius)),P.applyAll(this.view,this.currentCamera,this.constraintOptions)}if(this.computePlanePoints(t.pointers,n,this.currentCamera,this.tmpPoints),M.centroid(this.tmpPoints,this.tmpCentroid3d),p.screenPointObjectToArray(t.center,this.tmpCentroid2d),M.applyPanPlanar(this.currentCamera,i,this.tmpCentroid3d),this.panMomentumEstimator.add(this.tmpCentroid2d,this.tmpCentroid3d,.001*t.timestamp),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=P.pixelDistanceToInteractionFactor(this.beginCenterScreen,this.tmpCentroid2d),P.applyAll(this.view,this.currentCamera,this.constraintOptions),e){const e=this.planeHorizontal,n=i,o=this.rotationValueSmooth.value,a=o+M.normalizeRotationDelta(t.angle-o),r=.00125*Math.min(Math.max(t.radius,40),120);this.rotationValueSmooth.gain=r,this.rotationValueSmooth.update(a);const s=this.rotationValueSmooth.value-this.beginAngle;this.rotationMomentumEstimator.add(s,.001*t.timestamp),M.applyRotation(this.currentCamera,n,C.axisAngle.wrapAxisAngle(e,s)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=P.pixelDistanceToInteractionFactor(Math.abs(t.radius*s)),P.applyAll(this.view,this.currentCamera,this.constraintOptions)}this.currentCamera.markViewDirty()},i.end=function(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const e=this.zoomMomentumEstimator.evaluateMomentum();if(e)return new S.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this.beginCenter});const n=this.rotationMomentumEstimator.evaluateMomentum();if(n)return new y.RotationMomentumController({view:this.view,momentum:n,center:this.beginCenter,axis:C.plane.normal(this.planeHorizontal)});const i=this.panMomentumEstimator.evaluateMomentum();return i?new w.PanPlanarMomentumController({view:this.view,momentum:i}):null},i.computePlanePoints=function(t,e,n,i){i.length=t.size;const o=this.tmp2d;let a=0;return t.forEach((t=>{o[0]=t.x,o[1]=t.y,void 0===i[a]&&(i[a]=u.create()),M.intersectPlaneFromScreenPoint(e,n,o,i[a]),a+=1})),i},e._createClass(n,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),n}(b.InteractiveController),n.__decorate([r.property({constructOnly:!0})],t.PinchAndPanController.prototype,"view",void 0),t.PinchAndPanController=n.__decorate([s.subclass("esri.views.3d.state.controllers.local.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,"__esModule",{value:!0})}));
