/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/support/axisAngle","../../../../../geometry/support/plane","../../../../../support/featureFlags","../../../camera/constraintUtils","../../../input/util","../InteractiveController","../momentum/PanPlanarMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../../utils/navigationUtils","../../../webgl-engine/lib/Camera","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,n,i,o,a,r,s,l,c,m,h,p,u,d,C,g,P,v,M,b,f,w,y,S,E){"use strict";const V=h.fromValues(0,0,1),z={ELEVATION_THRESHOLD:3e4,ANGLE_THRESHOLD:16/180*Math.PI},A=80;t.PinchAndPanController=function(t){function n(e){var n;return(n=t.call(this,e)||this).view=null,n.rotationValueSmooth=new g.ExponentialFalloff(.05),n.scalingValueSmooth=new g.ExponentialFalloff(.05),n.planeHorizontal=u.create(),n.planeVertical=u.create(),n.rotationMomentumEstimator=new S.RotationMomentumEstimator,n.panMomentumEstimator=new y.PanPlanarMomentumEstimator(300,12,.9),n.zoomMomentumEstimator=new E.ZoomMomentumEstimator,n.beginCenter=h.create(),n.tmpPoints=[],n.beginCenterScreen=o.createScreenPointArray(),n.tmpCentroid3d=h.create(),n.tmpCentroid2d=o.createScreenPointArray(),n.tmp2d=o.createScreenPointArray(),n.constraintOptions={selection:15,interactionType:0,interactionFactor:0,interactionStartCamera:new w,interactionDirection:null,tiltMode:0},n}e._inheritsLoose(n,t);var a=n.prototype;return a.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panMomentumEstimator.enabled=e,this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.rotationValueSmooth.reset(),this.scalingValueSmooth.reset(),o.screenPointObjectToArray(t.center,this.beginCenterScreen),u.fromNormalAndOffset(V,0,this.planeHorizontal);const n=h.create();this.intersectionHelper.intersectScreenFreePointFallback(this.beginCenterScreen,n);const a=h.create();m.negate(a,this.startCamera.viewForward);const r=h.create();m.copy(r,V);const s=m.dot(a,r),l=s<0,c=i.asinClamped(l?-s:s);if(this.panMode=c>=z.ANGLE_THRESHOLD?f.NavigationMode.Horizontal:f.NavigationMode.Vertical,u.setOffsetFromPoint(this.planeHorizontal,n,this.planeHorizontal),this.startCamera.aboveGround||u.negate(this.planeHorizontal,this.planeHorizontal),this.panMode===f.NavigationMode.Vertical){if(m.scale(r,r,s),m.subtract(this.planeVertical,a,r),m.normalize(this.planeVertical,this.planeVertical),u.setOffsetFromPoint(this.planeVertical,n,this.planeVertical),!d.disableContextNavigation()){const t=h.create(),e=h.create(),i=h.create();m.subtract(t,n,this.currentCamera.eye),m.normalize(t,t);const o=5*Math.max(Math.abs(this.view.camera.position.z),50),a=this.view._stage.renderView.getMinimalDepthForArea(this.view.getVoxelWasmPerSceneView(),this.beginCenterScreen[0],this.beginCenterScreen[1],this.view.state.camera,A),r=a?Math.min(a,o):o;m.copy(i,m.add(e,this.currentCamera.eye,m.scale(e,t,r))),this.planeVertical[3]=-m.dot(this.planeVertical,i)}this.computePlanePoints(t.pointers,this.planeVertical,this.startCamera,this.tmpPoints),f.centroid(this.tmpPoints,this.beginCenter)}else this.computePlanePoints(t.pointers,this.planeHorizontal,this.startCamera,this.tmpPoints),f.centroid(this.tmpPoints,this.beginCenter);this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)},a.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1,n=this.panMode===f.NavigationMode.Horizontal?this.planeHorizontal:this.planeVertical,i=this.beginCenter;if(e){const e=this.beginRadius/t.radius,n=.001875*Math.min(Math.max(t.radius,40),120);this.scalingValueSmooth.gain=n,this.scalingValueSmooth.update(e),f.applyZoomToPoint(this.currentCamera,i,this.scalingValueSmooth.value,this.view.state.constraints.minimumPoiDistance),this.zoomMomentumEstimator.add(this.scalingValueSmooth.value,.001*t.timestamp),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(Math.abs(t.radius-this.beginRadius)),C.applyAll(this.view,this.currentCamera,this.constraintOptions)}if(this.computePlanePoints(t.pointers,n,this.currentCamera,this.tmpPoints),f.centroid(this.tmpPoints,this.tmpCentroid3d),o.screenPointObjectToArray(t.center,this.tmpCentroid2d),f.applyPanPlanar(this.currentCamera,i,this.tmpCentroid3d),this.panMomentumEstimator.add(this.tmpCentroid2d,this.tmpCentroid3d,.001*t.timestamp),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(this.beginCenterScreen,this.tmpCentroid2d),C.applyAll(this.view,this.currentCamera,this.constraintOptions),e){const e=this.planeHorizontal,n=i,o=this.rotationValueSmooth.value,a=o+f.normalizeRotationDelta(t.angle-o),r=.00125*Math.min(Math.max(t.radius,40),120);this.rotationValueSmooth.gain=r,this.rotationValueSmooth.update(a);const s=this.rotationValueSmooth.value-this.beginAngle;this.rotationMomentumEstimator.add(s,.001*t.timestamp),f.applyRotation(this.currentCamera,n,p.wrapAxisAngle(e,s)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(Math.abs(t.radius*s)),C.applyAll(this.view,this.currentCamera,this.constraintOptions)}},a.end=function(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const e=this.zoomMomentumEstimator.evaluateMomentum();if(e)return new b.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this.beginCenter});const n=this.rotationMomentumEstimator.evaluateMomentum();if(n)return new M.RotationMomentumController({view:this.view,momentum:n,center:this.beginCenter,axis:u.normal(this.planeHorizontal)});const i=this.panMomentumEstimator.evaluateMomentum();return i?new v.PanPlanarMomentumController({view:this.view,momentum:i}):null},a.computePlanePoints=function(t,e,n,i){i.length=t.size;const o=this.tmp2d;let a=0;return t.forEach((t=>{o[0]=t.x,o[1]=t.y,void 0===i[a]&&(i[a]=h.create()),f.intersectPlaneFromScreenPointAtEye(e,n,o,i[a]),a+=1})),i},e._createClass(n,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),n}(P.InteractiveController),n.__decorate([a.property({constructOnly:!0})],t.PinchAndPanController.prototype,"view",void 0),t.PinchAndPanController=n.__decorate([c.subclass("esri.views.3d.state.controllers.local.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,"__esModule",{value:!0})}));
