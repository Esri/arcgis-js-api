/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/screenUtils","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/Error","../../../../../core/has","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/support/axisAngle","../../../../../geometry/support/plane","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/TiltMode","../../../input/util","../InteractiveController","../momentum/PanPlanarMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../../utils/navigationUtils","../../../webgl-engine/lib/Camera","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,n,i,o,a,r,s,c,l,m,h,p,u,_,d,C,g,M,P,v,b,y,E,S,w,f,A,T,z,H){"use strict";const V=_.fromValues(0,0,1),O={ELEVATION_THRESHOLD:3e4,ANGLE_THRESHOLD:16/180*Math.PI};t.PinchAndPanController=function(t){function n(){var e;return(e=t.apply(this,arguments)||this)._rotationValueSmooth=new b.ExponentialFalloff(.05),e._scalingValueSmooth=new b.ExponentialFalloff(.05),e._planeHorizontal=C.create(),e._planeVertical=C.create(),e._rotationMomentumEstimator=new z.RotationMomentumEstimator,e._panMomentumEstimator=new T.PanPlanarMomentumEstimator(300,12,.9),e._zoomMomentumEstimator=new H.ZoomMomentumEstimator,e._beginRadius=0,e._beginCenter=_.create(),e._beginAngle=0,e._tmpPoints=[],e._panMode=f.NavigationMode.Horizontal,e._beginCenterScreen=a.createScreenPointArray(),e._tmpCentroid3d=_.create(),e._tmpCentroid2d=a.createScreenPointArray(),e._tmp2d=a.createScreenPointArray(),e._pointerCount=0,e._constraintOptions={selection:M.ConstraintTypes.ALL,interactionType:P.InteractionType.NONE,interactionFactor:0,interactionStartCamera:new A.Camera,interactionDirection:null,tiltMode:v.TiltMode.TUMBLE},e}e._inheritsLoose(n,t);var r=n.prototype;return r.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this._zoomMomentumEstimator.enabled=e,this._rotationMomentumEstimator.enabled=e,this._panMomentumEstimator.enabled=e,this._beginRadius=t.radius,this._pointerCount=t.pointers.size,this._beginAngle=t.angle,this._rotationValueSmooth.reset(),this._scalingValueSmooth.reset(),a.screenPointObjectToArray(t.center,this._beginCenterScreen),C.fromNormalAndOffset(V,0,this._planeHorizontal);const n=_.create(),r=this._intersectionHelper.intersectScreenFreePointFallback(this._beginCenterScreen,n,0===this.view.map.ground.opacity?f.contentIntersectorOptions:{}),s=_.create();u.negate(s,this.startCamera.viewForward);const c=_.create();u.copy(c,V);const l=u.dot(s,c),m=l<0,h=i.asinClamped(m?-l:l);this._panMode=h>=O.ANGLE_THRESHOLD?f.NavigationMode.Horizontal:f.NavigationMode.Vertical;const p=Math.min(f.PAN_DISTANCE_MODIFIER,1/Math.abs(u.dot(c,this.startCamera.viewForward)))*Math.max(Math.abs(this.view.camera.position.z),f.MIN_HEIGHT_LIMIT);C.setOffsetFromPoint(this._planeHorizontal,this._planeHorizontal,n),this.startCamera.aboveGround||C.negate(this._planeHorizontal,this._planeHorizontal);const d=_.create(),g=_.create(),M=_.create();u.subtract(d,n,this.currentCamera.eye);const P=u.length(d);if(u.normalize(d,d),this._panMode===f.NavigationMode.Vertical){u.scale(c,c,l),u.subtract(this._planeVertical,s,c),u.normalize(this._planeVertical,this._planeVertical),C.setOffsetFromPoint(this._planeVertical,this._planeVertical,n);const e=this.view._stage.renderView.getMinimalDepthForArea(this.view.voxelWasm,this._beginCenterScreen[0],this._beginCenterScreen[1],this.view.state.camera,f.SCREEN_PIXEL_AREA);let i=o.isSome(e)?e:p;i=r?Math.min(i,P):i,u.copy(M,u.add(g,this.currentCamera.eye,u.scale(g,d,i))),this._planeVertical[3]=-u.dot(this._planeVertical,M),this._computePlanePoints(t.pointers,this._planeVertical,this.startCamera,this._tmpPoints),f.centroid(this._tmpPoints,this._beginCenter)}else{const e=r?P:p;u.copy(M,u.add(g,this.currentCamera.eye,u.scale(g,d,e))),this._planeHorizontal[3]=-u.dot(C.normal(this._planeHorizontal),M),this._computePlanePoints(t.pointers,this._planeHorizontal,this.startCamera,this._tmpPoints),f.centroid(this._tmpPoints,this._beginCenter)}this._constraintOptions.interactionStartCamera?.copyFrom(this.startCamera)},r.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1,n=this._panMode===f.NavigationMode.Horizontal?this._planeHorizontal:this._planeVertical,i=this._beginCenter;if(e){const e=this._beginRadius/t.radius,n=.001875*Math.min(Math.max(t.radius,40),120);this._scalingValueSmooth.gain=n,this._scalingValueSmooth.update(e),f.applyZoomToPoint(this.currentCamera,i,this._scalingValueSmooth.value,this.view.state.constraints.minimumPoiDistance),this._zoomMomentumEstimator.add(this._scalingValueSmooth.value,.001*t.timestamp),this._constraintOptions.interactionType=P.InteractionType.ZOOM,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(Math.abs(t.radius-this._beginRadius)),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}if(this._computePlanePoints(t.pointers,n,this.currentCamera,this._tmpPoints),f.centroid(this._tmpPoints,this._tmpCentroid3d),a.screenPointObjectToArray(t.center,this._tmpCentroid2d),f.applyPanPlanar(this.currentCamera,i,this._tmpCentroid3d),this._panMomentumEstimator.add(this._tmpCentroid2d,this._tmpCentroid3d,.001*t.timestamp),this._constraintOptions.interactionType=P.InteractionType.PAN,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(p.distance(this._beginCenterScreen,this._tmpCentroid2d)),g.applyAll(this.view,this.currentCamera,this._constraintOptions),e){const e=this._planeHorizontal,n=i,o=this._rotationValueSmooth.value,a=o+f.normalizeRotationDelta(t.angle-o),r=.00125*Math.min(Math.max(t.radius,40),120);this._rotationValueSmooth.gain=r,this._rotationValueSmooth.update(a);const s=this._rotationValueSmooth.value-this._beginAngle;this._rotationMomentumEstimator.add(s,.001*t.timestamp),f.applyRotation(this.currentCamera,n,d.wrapAxisAngle(e,s)),this._constraintOptions.interactionType=P.InteractionType.TUMBLE,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(Math.abs(t.radius*s)),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}this.commitCamera()},r.end=function(t){t.pointers.size===this._pointerCount&&this.update(t),this.finishController();const e=this._zoomMomentumEstimator.evaluateMomentum();if(e)return new w.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this._beginCenter});const n=this._rotationMomentumEstimator.evaluateMomentum();if(n)return new S.RotationMomentumController({view:this.view,momentum:n,center:this._beginCenter,axis:C.normal(this._planeHorizontal)});const i=this._panMomentumEstimator.evaluateMomentum();return i?new E.PanPlanarMomentumController({view:this.view,momentum:i}):null},r._computePlanePoints=function(t,e,n,i){i.length=t.size;const o=this._tmp2d;let a=0;return t.forEach((t=>{o[0]=t.x,o[1]=t.y,void 0===i[a]&&(i[a]=_.create()),f.intersectPlaneFromScreenPointAtEye(e,n,o,i[a]),a+=1})),i},e._createClass(n,[{key:"_intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),n}(y.InteractiveController),t.PinchAndPanController=n.__decorate([h.subclass("esri.views.3d.state.controllers.local.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
