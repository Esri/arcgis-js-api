/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/time","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/Error","../../../../../core/has","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/ellipsoidUtils","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/surfaceCollision","../../../camera/constraintUtils/TiltMode","../PointToPointAnimationController","../../utils/navigationUtils","../../../support/geometryUtils/ray","../../../support/geometryUtils/sphere","../../../webgl-engine/lib/Camera","../../../webgl-engine/lib/Intersector","../../../../animation/easing"],(function(t,e,i,r,n,a,o,s,c,h,m,p,l,_,y,d,u,g,C,D,M,w,S,v,f,O,b,R){"use strict";const I=.6,T=4,E=60;t.ZoomStepController=function(t){function i(){var e;return(e=t.apply(this,arguments)||this)._zoomLocation=_.create(),e._tmpCamera=new O.Camera,e._tmpViewDir=_.create(),e._tmpRayDir={origin:_.create(),direction:_.create()},e._targetOnSphere=_.create(),e._tmpCenter=_.create(),e._constraintOptions={selection:g.ConstraintTypes.ALL_EXCEPT_COLLISION,interactionType:C.InteractionType.ZOOM,interactionFactor:null,interactionStartCamera:new O.Camera,interactionDirection:null,tiltMode:M.TiltMode.TUMBLE},e._sphere=d.create(),e}e._inheritsLoose(i,t);var o=i.prototype;return o.initialize=function(){this._intersector=b.newIntersector(this.view.state.viewingMode)},o.zoomStep=function(t,e){if(!this.active)return;const i=this.view.state,{interactionStartCamera:r}=this._constraintOptions;r&&(this.animation.finished?r.copyFrom(i.camera):this.animation.cameraAt(1,r));let n=!1,a=!1;this.intersectionHelper.intersectScreen(e,this._zoomLocation,0===this.view.map.ground.opacity?S.contentIntersectorOptions:{})&&(n=t>0,a=!0),this._tmpCamera.copyFrom(i.camera),n?this.intersectionHelper.intersectRay(this._tmpCamera.ray,this._intersector,this._tmpCenter)&&(this._tmpCamera.center=this._tmpCenter):this.intersectionHelper.intersectRay(this._tmpCamera.ray,this._intersector,this._zoomLocation)?this._tmpCamera.center=this._zoomLocation:l.copy(this._zoomLocation,this._tmpCamera.center),this._updateCamera(this._tmpCamera,t,this._zoomLocation,e,a),this.begin(this._tmpCamera)},o.animationSettings=function(){return{duration:a.Milliseconds(600),easing:R.outExpo}},o._updateCamera=function(t,e,i,a,o){const s=y.getReferenceEllipsoid(this.view.spatialReference),c=S.decideNavigationMode(t,a,s),h=Math.abs(this.view.camera.position.z);l.normalize(z,t.eye),l.scale(z,z,-1),v.fromScreenAtEye(t,a,this._tmpRayDir),l.normalize(this._tmpRayDir.direction,this._tmpRayDir.direction);const m=r.clamp(Math.min(S.ZOOM_DISTANCE_MODIFIER,1/Math.abs(l.dot(z,this._tmpRayDir.direction)))*h,S.ZOOM_MIN_DISTANCE_MODIFIER,S.ZOOM_MAX_DISTANCE_MODIFIER);if(c===S.NavigationMode.Horizontal){let r=I**e;this._sphere[3]=l.length(i),l.subtract(this._tmpViewDir,t.center,t.eye);const n=Math.min(l.length(this._tmpViewDir),m);let o=n*r;if(r<=1&&o<T&&(o=T,r=o/n),Math.abs(n-o)<1e-6)return;const s=l.length(t.center);if(this._sphere[3]!==s){const e=this._sphere[3]+r*(s-this._sphere[3]);t.center=l.scale(L,t.center,e/s)}l.scale(this._tmpViewDir,this._tmpViewDir,-r),t.eye=l.add(L,t.center,this._tmpViewDir),u.applyAll(this.view,t,this._constraintOptions),l.squaredDistance(i,t.center)>1e-12&&f.intersectScreen(this._sphere,t,a,this._targetOnSphere)&&S.panToPosition(this._sphere,t,i,this._targetOnSphere,this.view.camera.heading,this.view.camera.tilt,!0)}else{let r=I**Math.abs(e);const s=e>0?1:-1;l.subtract(this._tmpViewDir,i,t.eye);const c=l.length(this._tmpViewDir),h=this.view._stage.renderView.getMinimalDepthForArea(null,a[0],a[1],this.view.state.camera,E);let p=n.isSome(h)?h:m;p=o&&e>0?Math.min(p,c):p,l.scale(this._tmpRayDir.direction,this._tmpRayDir.direction,p),l.add(i,this._tmpRayDir.origin,this._tmpRayDir.direction);let _=p*r;const y=Math.max(T,1.01*t.nearFar[0]);if(e>0&&_<y&&(_=y,r=_/p),Math.abs(p-_)<1e-6)return;l.scale(this._tmpRayDir.direction,this._tmpRayDir.direction,s*(1-r)),t.eye=l.add(L,t.eye,this._tmpRayDir.direction),t.center=l.add(L,t.center,this._tmpRayDir.direction)}D.applySurfaceCollisionConstraint(this.view,t)},i}(w.PointToPointAnimationController),t.ZoomStepController=i.__decorate([p.subclass("esri.views.3d.state.controllers.global.ZoomStepController")],t.ZoomStepController);const L=_.create(),z=_.create();Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
