/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/time","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/accessorSupport/set","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/projectionEllipsoid","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/common","../PointToPointAnimationController","../../utils/navigationUtils","../../../support/geometryUtils/ray","../../../support/geometryUtils/sphere","../../../webgl-engine/lib/Camera","../../../webgl-engine/lib/Intersector","../../../../animation/easing","../../../camera/constraintUtils/surfaceCollision"],(function(t,e,i,r,n,o,a,s,c,h,p,l,m,u,d,y,g,C,w,f,v,D,S,b){"use strict";const M=.6,R=4,L=12,z=60,O=20;t.ZoomStepController=function(t){function i(){var e;return(e=t.apply(this,arguments)||this).zoomLocation=l.create(),e.tmpCamera=new v.default,e.tmpViewDir=l.create(),e.tmpRayDir={origin:l.create(),direction:l.create()},e.targetOnSphere=l.create(),e.tmpCenter=l.create(),e.constraintOptions={selection:y.ConstraintTypes.ALL_EXCEPT_COLLISION,interactionType:y.InteractionType.ZOOM,interactionFactor:null,interactionStartCamera:new v.default,interactionDirection:null,tiltMode:y.TiltMode.TUMBLE},e.sphere=u.create(),e}e._inheritsLoose(i,t);var n=i.prototype;return n.initialize=function(){this.intersector=D.newIntersector(this.view.state.viewingMode)},n.zoomStep=function(t,e){if(!this.active)return;const i=this.view.state,{interactionStartCamera:r}=this.constraintOptions;this.animation.finished?r.copyFrom(i.camera):this.animation.cameraAt(1,r);let n=!1,o=!1;this.intersectionHelper.intersectScreen(e,this.zoomLocation)&&(n=t>0,o=!0),this.tmpCamera.copyFrom(i.camera),n?this.intersectionHelper.intersectRay(this.tmpCamera.ray,this.intersector,this.tmpCenter)&&(this.tmpCamera.center=this.tmpCenter):this.intersectionHelper.intersectRay(this.tmpCamera.ray,this.intersector,this.zoomLocation)?this.tmpCamera.center=this.zoomLocation:p.copy(this.zoomLocation,this.tmpCamera.center),this._updateCamera(this.tmpCamera,t,this.zoomLocation,e,o),this.begin(this.tmpCamera)},n.animationSettings=function(){return{apex:null,duration:r.Milliseconds(600),easing:S.outExpo}},n._updateCamera=function(t,e,i,r,n){const o=m.getReferenceEllipsoid(this.view.spatialReference);if(C.decideNavigationMode(t,r,n,o)===C.NavigationMode.Horizontal){let n=M**e;this.sphere[3]=p.length(i),p.subtract(this.tmpViewDir,t.center,t.eye);const o=p.length(this.tmpViewDir);let a=o*n;if(n<=1&&a<R&&(a=R,n=a/o),Math.abs(o-a)<1e-6)return;const s=p.length(t.center);if(this.sphere[3]!==s){const e=this.sphere[3]+n*(s-this.sphere[3]);t.center=p.scale(T,t.center,e/s)}p.scale(this.tmpViewDir,this.tmpViewDir,-n),t.eye=p.add(T,t.center,this.tmpViewDir),d.applyAll(this.view,t,this.constraintOptions),p.squaredDistance(i,t.center)>1e-12&&f.intersectScreen(this.sphere,t,r,this.targetOnSphere)&&C.panToPosition(this.sphere,t,i,this.targetOnSphere,this.view.camera.heading,this.view.camera.tilt,!0)}else{let n=M**Math.abs(e);const o=e>0?1:-1;let a;w.fromScreenAtEye(t,r,this.tmpRayDir),p.normalize(this.tmpRayDir.direction,this.tmpRayDir.direction),this.view.camera.position.hasZ&&(a=Math.abs(this.view.camera.position.z));let s=Math.max(L*a,O);const c=this.view._stage.renderView.getMinimalDepthForArea(null,r[0],r[1],this.view.state.camera,z);s=s>c?c:s,p.scale(this.tmpRayDir.direction,this.tmpRayDir.direction,s),p.add(i,this.tmpRayDir.origin,this.tmpRayDir.direction);let h=s*n;const l=Math.max(R,1.01*t.nearFar[0]);if(e>0&&h<l&&(h=l,n=h/s),Math.abs(s-h)<1e-6)return;p.scale(this.tmpRayDir.direction,this.tmpRayDir.direction,o*(1-n)),t.eye=p.add(T,t.eye,this.tmpRayDir.direction),t.center=p.add(T,t.center,this.tmpRayDir.direction)}b.applySurfaceCollisionConstraint(this.view,t)},i}(g.PointToPointAnimationController),t.ZoomStepController=i.__decorate([h.subclass("esri.views.3d.state.controllers.global.ZoomStepController")],t.ZoomStepController);const T=l.create();Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
