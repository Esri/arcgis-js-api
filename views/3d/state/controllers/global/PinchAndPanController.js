/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/projectionEllipsoid","../../../../../geometry/support/axisAngle","../../../../../geometry/support/plane","../../../../../chunks/sphere","../../../../../support/featureFlags","../../../camera/constraintUtils","../../../input/util","../InteractiveController","../momentum/PanPlanarMomentumController","../momentum/PanSphericalMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../momentum/ZoomSphericalMomentumController","../../utils/navigationUtils","../../../support/mathUtils","../../../webgl-engine/lib/Camera","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/PanSphericalMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,i,n,a,o,r,s,c,h,m,l,p,u,P,d,g,v,M,S,C,y,w,b,A,f,E,O,x,R,k,z,F){"use strict";t.PinchAndPanController=function(t){function i(e){var i;return(i=t.call(this,e)||this).view=null,i.smoothRotation=new S.ExponentialFalloff(.05),i.rotationAxis=p.create(),i.panningPlane=d.create(),i.smoothScaling=new S.ExponentialFalloff(.05),i.zoomCenterScreen=a.createScreenPointArray(),i.zoomMomentumEstimator=new F.ZoomMomentumEstimator,i.rotationMomentumEstimator=new z.RotationMomentumEstimator,i.panSphericalMomentumEstimator=new k.PanSphericalMomentumEstimator,i.panPlanarMomentumEstimator=new R.PanPlanarMomentumEstimator,i.adjustedSphere=g.create(),i.tmp3d=p.create(),i.tmpScreenPointArray=a.createScreenPointArray(),i.beginScreenPoint=a.createScreenPointArray(),i.beginScenePoint=p.create(),i.screenPickPoint=a.createScreenPointArray(),i.navMode=E.NavigationMode.Horizontal,i.tmpInteractionDirection=p.create(),i.constraintOptions={selection:15,interactionType:0,interactionFactor:0,interactionStartCamera:new x,interactionDirection:null,tiltMode:0},i}e._inheritsLoose(i,t);var o=i.prototype;return o.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panPlanarMomentumEstimator.enabled=e,this.panSphericalMomentumEstimator.enabled=e,this.beginHeading=-O.cyclicalPI.normalize(n.deg2rad(this.view.camera.heading)),this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.smoothRotation.reset(),a.screenPointObjectToArray(t.center,this.screenPickPoint),m.copy(this.beginScreenPoint,this.screenPickPoint);const i=u.getReferenceEllipsoid(this.view.spatialReference),o=E.pickPointAndInitSphere(this.intersectionHelper,this.startCamera,this.screenPickPoint,!0,i);this.scenePickPoint=o.scenePickPoint,this.sphere=o.sphere,l.copy(this.beginScenePoint,this.scenePickPoint),this.navMode=E.decideNavigationMode(this.startCamera,this.screenPickPoint,o.hasGeometryIntersection,i),this.navMode===E.NavigationMode.Vertical&&this.preparePlanarPanMode(t),this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)},o.preparePlanarPanMode=function(t){const e=l.negate(this.tmp3d,this.startCamera.viewForward);d.fromPositionAndNormal(this.scenePickPoint,e,this.panningPlane);const i=a.createScreenPointArray(this.screenPickPoint[0],0),n=p.create(),o=l.length(this.startCamera.eye);this.adjustedSphere[3]=o<this.sphere[3]?o-100:this.sphere[3],E.sphereOrPlanePointFromScreenPoint(this.adjustedSphere,this.startCamera,i,n);const r=a.createRenderScreenPointArray3();this.startCamera.projectToRenderScreen(n,r);const s=.9*r[1];if(this.screenPickPoint[1]=Math.min(this.screenPickPoint[1],s),this.intersectionHelper.intersectScreen(this.screenPickPoint,this.scenePickPoint)&&d.fromPositionAndNormal(this.scenePickPoint,d.normal(this.panningPlane),this.panningPlane),!v.disableContextNavigation()){const t=p.create(),e=p.create(),i=p.create(),n=80,a=5,o=50;l.subtract(t,this.scenePickPoint,this.currentCamera.eye),l.normalize(t,t);const r=a*Math.max(Math.abs(this.view.camera.position.z),o),s=this.view._stage.renderView.getMinimalDepthForArea(null,this.screenPickPoint[0],this.screenPickPoint[1],this.view.state.camera,n),c=s?Math.min(s,r):r;l.copy(i,l.add(e,this.currentCamera.eye,l.scale(e,t,c))),this.panningPlane[3]=-l.dot(this.panningPlane,i),this.startCamera.center=l.add(e,this.startCamera.eye,l.scale(e,this.startCamera.viewForward,c))}const c=a.screenPointObjectToArray(t.center,this.tmpScreenPointArray);E.intersectPlaneFromScreenPointAtEye(this.panningPlane,this.startCamera,c,this.beginScenePoint)},o.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1;this.navMode===E.NavigationMode.Horizontal?(e&&this.zoomSpherical(t),this.panningSpherical(t),e&&this.rotateSpherical(t)):(e&&this.zoomPlanar(t),this.panningPlanar(t),e&&this.rotatePlanar(t))},o.end=function(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const e=this.zoomMomentumEstimator.evaluateMomentum();if(e)return this.navMode===E.NavigationMode.Horizontal?new f.ZoomSphericalMomentumController({view:this.view,momentum:e,screenCenter:this.zoomCenterScreen,sceneCenter:this.beginScenePoint,radius:this.sphere[3]}):new A.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this.beginScenePoint});const i=this.rotationMomentumEstimator.evaluateMomentum();if(i)return new b.RotationMomentumController({view:this.view,momentum:i,center:this.sphere,axis:this.rotationAxis});if(this.navMode===E.NavigationMode.Horizontal){const t=this.panSphericalMomentumEstimator.evaluateMomentum();if(t)return new w.PanSphericalMomentumController({view:this.view,momentum:t})}else{const t=this.panPlanarMomentumEstimator.evaluateMomentum();if(t)return new y.PanPlanarMomentumController({view:this.view,momentum:t})}return null},o.zoomSpherical=function(t){const e=this.beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=i,this.smoothScaling.update(e),E.applyZoomOnSphere(this.sphere,this.currentCamera,this.smoothScaling.value),a.screenPointObjectToArray(t.center,this.zoomCenterScreen),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=M.pixelDistanceToInteractionFactor(t.radius-this.beginRadius),M.applyAll(this.view,this.currentCamera,this.constraintOptions)},o.panningSpherical=function(t){const e=a.screenPointObjectToArray(t.center,this.tmpScreenPointArray);E.sphereOrPlanePointFromScreenPoint(this.sphere,this.currentCamera,e,this.tmp3d),E.preserveHeadingThreshold(this.beginScenePoint,l.dot(this.currentCamera.up,this.beginScenePoint),this.sphere[3],this.beginHeading,this.view.camera.tilt,this.startCamera)?(E.applyPanSphericalPreserveHeading(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.beginHeading,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumPreserveHeading(e,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere,this.beginHeading,this.view.camera.tilt)):(E.applyPanSphericalDirectRotation(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumDirectRotation(e,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere[3],this.view.camera.tilt)),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=M.pixelDistanceToInteractionFactor(this.screenPickPoint,e),M.applyAll(this.view,this.currentCamera,this.constraintOptions)},o.rotateSpherical=function(t){l.normalize(this.rotationAxis,this.scenePickPoint),this.currentCamera.aboveGround||l.negate(this.rotationAxis,this.rotationAxis);const e=this.smoothRotation.value,i=e+E.normalizeRotationDelta(t.angle-e),n=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=n,this.smoothRotation.update(i);const a=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(a,.001*t.timestamp),E.applyRotation(this.currentCamera,this.sphere,P.wrapAxisAngle(this.rotationAxis,a)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=M.pixelDistanceToInteractionFactor(t.radius*i),M.applyAll(this.view,this.currentCamera,this.constraintOptions)},o.panningPlanar=function(t){const e=a.screenPointObjectToArray(t.center,this.tmpScreenPointArray);E.intersectPlaneFromScreenPointAtEye(this.panningPlane,this.currentCamera,e,this.tmp3d)&&(E.applyPanPlanar(this.currentCamera,this.beginScenePoint,this.tmp3d),this.panPlanarMomentumEstimator.add(e,this.tmp3d,.001*t.timestamp),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=M.pixelDistanceToInteractionFactor(this.beginScreenPoint,e),this.constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this.tmpInteractionDirection),M.applyAll(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null)},o.zoomPlanar=function(t){const e=this.beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=i,this.smoothScaling.update(e),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),E.applyZoomToPoint(this.currentCamera,this.beginScenePoint,this.smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=M.pixelDistanceToInteractionFactor(t.radius-this.beginRadius),M.applyAll(this.view,this.currentCamera,this.constraintOptions)},o.rotatePlanar=function(t){l.copy(this.rotationAxis,this.beginScenePoint),this.currentCamera.aboveGround||l.negate(this.rotationAxis,this.rotationAxis);const e=this.smoothRotation.value;let i=t.angle-e;i=E.normalizeRotationDelta(i);const n=e+i,a=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=a,this.smoothRotation.update(n);const o=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(o,.001*t.timestamp),E.applyRotation(this.currentCamera,this.sphere,P.wrapAxisAngle(this.rotationAxis,o)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=M.pixelDistanceToInteractionFactor(t.radius*o),M.applyAll(this.view,this.currentCamera,this.constraintOptions)},e._createClass(i,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),i}(C.InteractiveController),i.__decorate([o.property({constructOnly:!0})],t.PinchAndPanController.prototype,"view",void 0),t.PinchAndPanController=i.__decorate([h.subclass("esri.views.3d.state.controllers.global.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,"__esModule",{value:!0})}));
