/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/arrayUtils","../../../../../core/has","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/projectionEllipsoid","../../../../../geometry/support/axisAngle","../../../../../geometry/support/plane","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/common","../../../input/util","../InteractiveController","../momentum/PanPlanarMomentumController","../momentum/PanSphericalMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../momentum/ZoomSphericalMomentumController","../../utils/navigationUtils","../../../support/mathUtils","../../../webgl-engine/lib/Camera","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/PanSphericalMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,i,n,o,a,r,s,c,h,m,l,p,u,P,d,g,v,M,S,y,C,w,A,b,E,O,T,f,R,k,x,z){"use strict";t.PinchAndPanController=function(t){function i(e){var i;return(i=t.call(this,e)||this).view=null,i.smoothRotation=new S.ExponentialFalloff(.05),i.rotationAxis=p.create(),i.panningPlane=d.create(),i.smoothScaling=new S.ExponentialFalloff(.05),i.zoomCenterScreen=o.createScreenPointArray(),i.zoomMomentumEstimator=new z.ZoomMomentumEstimator,i.rotationMomentumEstimator=new x.RotationMomentumEstimator,i.panSphericalMomentumEstimator=new k.PanSphericalMomentumEstimator,i.panPlanarMomentumEstimator=new R.PanPlanarMomentumEstimator,i.adjustedSphere=g.create(),i.tmp3d=p.create(),i.tmpScreenPointArray=o.createScreenPointArray(),i.beginScreenPoint=o.createScreenPointArray(),i.beginScenePoint=p.create(),i.screenPickPoint=o.createScreenPointArray(),i.navMode=O.NavigationMode.Horizontal,i.tmpInteractionDirection=p.create(),i.constraintOptions={selection:M.ConstraintTypes.ALL,interactionType:M.InteractionType.NONE,interactionFactor:0,interactionStartCamera:new f.default,interactionDirection:null,tiltMode:M.TiltMode.TUMBLE},i}e._inheritsLoose(i,t);var a=i.prototype;return a.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panPlanarMomentumEstimator.enabled=e,this.panSphericalMomentumEstimator.enabled=e,this.beginHeading=-T.cyclicalPI.normalize(n.deg2rad(this.view.camera.heading)),this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.smoothRotation.reset(),o.screenPointObjectToArray(t.center,this.screenPickPoint),m.copy(this.beginScreenPoint,this.screenPickPoint);const i=u.getReferenceEllipsoid(this.view.spatialReference),a=O.pickPointAndInitSphere(this.intersectionHelper,this.startCamera,this.screenPickPoint,!0,i);this.scenePickPoint=a.scenePickPoint,this.sphere=a.sphere,l.copy(this.beginScenePoint,this.scenePickPoint),this.navMode=O.decideNavigationMode(this.startCamera,this.screenPickPoint,a.hasGeometryIntersection,i),this.navMode===O.NavigationMode.Vertical&&this._preparePlanarPanMode(t),this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)},a._preparePlanarPanMode=function(t){const e=l.negate(this.tmp3d,this.startCamera.viewForward);d.fromPositionAndNormal(this.scenePickPoint,e,this.panningPlane);const i=o.createScreenPointArray(this.screenPickPoint[0],0),n=p.create(),a=l.length(this.startCamera.eye);this.adjustedSphere[3]=a<this.sphere[3]?a-100:this.sphere[3],O.sphereOrPlanePointFromScreenPoint(this.adjustedSphere,this.startCamera,i,n);const r=o.createRenderScreenPointArray3();this.startCamera.projectToRenderScreen(n,r);const s=.9*r[1];this.screenPickPoint[1]=Math.min(this.screenPickPoint[1],s),this.intersectionHelper.intersectScreen(this.screenPickPoint,this.scenePickPoint)&&d.fromPositionAndNormal(this.scenePickPoint,d.normal(this.panningPlane),this.panningPlane);const c=p.create(),h=p.create(),m=p.create(),u=80,P=5,g=50;l.subtract(c,this.scenePickPoint,this.currentCamera.eye),l.normalize(c,c);const v=P*Math.max(Math.abs(this.view.camera.position.z),g),M=this.view._stage.renderView.getMinimalDepthForArea(null,this.screenPickPoint[0],this.screenPickPoint[1],this.view.state.camera,u),S=M?Math.min(M,v):v;l.copy(m,l.add(h,this.currentCamera.eye,l.scale(h,c,S))),this.panningPlane[3]=-l.dot(this.panningPlane,m),this.startCamera.center=l.add(h,this.startCamera.eye,l.scale(h,this.startCamera.viewForward,S));const y=o.screenPointObjectToArray(t.center,this.tmpScreenPointArray);O.intersectPlaneFromScreenPointAtEye(this.panningPlane,this.startCamera,y,this.beginScenePoint)},a.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1;this.navMode===O.NavigationMode.Horizontal?(e&&this._zoomSpherical(t),this._panningSpherical(t),e&&this._rotateSpherical(t)):(e&&this._zoomPlanar(t),this._panningPlanar(t),e&&this._rotatePlanar(t))},a.end=function(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const e=this.zoomMomentumEstimator.evaluateMomentum();if(e)return this.navMode===O.NavigationMode.Horizontal?new E.ZoomSphericalMomentumController({view:this.view,momentum:e,screenCenter:this.zoomCenterScreen,sceneCenter:this.beginScenePoint,radius:this.sphere[3]}):new b.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this.beginScenePoint});const i=this.rotationMomentumEstimator.evaluateMomentum();if(i)return new A.RotationMomentumController({view:this.view,momentum:i,center:this.sphere,axis:this.rotationAxis});if(this.navMode===O.NavigationMode.Horizontal){const t=this.panSphericalMomentumEstimator.evaluateMomentum();if(t)return new w.PanSphericalMomentumController({view:this.view,momentum:t})}else{const t=this.panPlanarMomentumEstimator.evaluateMomentum();if(t)return new C.PanPlanarMomentumController({view:this.view,momentum:t})}return null},a._zoomSpherical=function(t){const e=this.beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=i,this.smoothScaling.update(e),O.applyZoomOnSphere(this.sphere,this.currentCamera,this.smoothScaling.value),o.screenPointObjectToArray(t.center,this.zoomCenterScreen),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),this.constraintOptions.interactionType=M.InteractionType.ZOOM,this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(t.radius-this.beginRadius),v.applyAll(this.view,this.currentCamera,this.constraintOptions)},a._panningSpherical=function(t){const e=o.screenPointObjectToArray(t.center,this.tmpScreenPointArray);O.sphereOrPlanePointFromScreenPoint(this.sphere,this.currentCamera,e,this.tmp3d),O.preserveHeadingThreshold(this.beginScenePoint,l.dot(this.currentCamera.up,this.beginScenePoint),this.sphere[3],this.beginHeading,this.view.camera.tilt,this.startCamera)?(O.applyPanSphericalPreserveHeading(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.beginHeading,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumPreserveHeading(e,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere,this.beginHeading,this.view.camera.tilt)):(O.applyPanSphericalDirectRotation(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumDirectRotation(e,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere[3],this.view.camera.tilt)),this.constraintOptions.interactionType=M.InteractionType.PAN,this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(this.screenPickPoint,e),v.applyAll(this.view,this.currentCamera,this.constraintOptions)},a._rotateSpherical=function(t){l.normalize(this.rotationAxis,this.scenePickPoint),this.currentCamera.aboveGround||l.negate(this.rotationAxis,this.rotationAxis);const e=this.smoothRotation.value,i=e+O.normalizeRotationDelta(t.angle-e),n=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=n,this.smoothRotation.update(i);const o=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(o,.001*t.timestamp),O.applyRotation(this.currentCamera,this.sphere,P.wrapAxisAngle(this.rotationAxis,o)),this.constraintOptions.interactionType=M.InteractionType.TUMBLE,this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(t.radius*i),v.applyAll(this.view,this.currentCamera,this.constraintOptions)},a._panningPlanar=function(t){const e=o.screenPointObjectToArray(t.center,this.tmpScreenPointArray);O.intersectPlaneFromScreenPointAtEye(this.panningPlane,this.currentCamera,e,this.tmp3d)&&(O.applyPanPlanar(this.currentCamera,this.beginScenePoint,this.tmp3d),this.panPlanarMomentumEstimator.add(e,this.tmp3d,.001*t.timestamp),this.constraintOptions.interactionType=M.InteractionType.PAN,this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(this.beginScreenPoint,e),this.constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this.tmpInteractionDirection),v.applyAll(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null)},a._zoomPlanar=function(t){const e=this.beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=i,this.smoothScaling.update(e),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),O.applyZoomToPoint(this.currentCamera,this.beginScenePoint,this.smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this.constraintOptions.interactionType=M.InteractionType.ZOOM,this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(t.radius-this.beginRadius),v.applyAll(this.view,this.currentCamera,this.constraintOptions)},a._rotatePlanar=function(t){l.copy(this.rotationAxis,this.beginScenePoint),this.currentCamera.aboveGround||l.negate(this.rotationAxis,this.rotationAxis);const e=this.smoothRotation.value;let i=t.angle-e;i=O.normalizeRotationDelta(i);const n=e+i,o=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=o,this.smoothRotation.update(n);const a=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(a,.001*t.timestamp),O.applyRotation(this.currentCamera,this.sphere,P.wrapAxisAngle(this.rotationAxis,a)),this.constraintOptions.interactionType=M.InteractionType.TUMBLE,this.constraintOptions.interactionFactor=v.pixelDistanceToInteractionFactor(t.radius*a),v.applyAll(this.view,this.currentCamera,this.constraintOptions)},e._createClass(i,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),i}(y.InteractiveController),i.__decorate([a.property({constructOnly:!0})],t.PinchAndPanController.prototype,"view",void 0),t.PinchAndPanController=i.__decorate([h.subclass("esri.views.3d.state.controllers.global.PinchAndPanController")],t.PinchAndPanController),Object.defineProperties(t,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
