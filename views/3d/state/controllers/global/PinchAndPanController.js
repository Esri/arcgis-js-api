/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../../chunks/tslib.es6.js";import{cyclicalPI as i}from"../../../../../core/Cyclical.js";import{deg2rad as e}from"../../../../../core/mathUtils.js";import{createScreenPointArray as n,screenPointObjectToArray as s,createRenderScreenPointArray3 as o}from"../../../../../core/screenUtils.js";import{property as r}from"../../../../../core/accessorSupport/decorators/property.js";import"../../../../../core/arrayUtils.js";import"../../../../../core/has.js";import"../../../../../core/accessorSupport/ensureType.js";import{subclass as a}from"../../../../../core/accessorSupport/decorators/subclass.js";import{c as m}from"../../../../../chunks/vec2.js";import{c as h,o as c,l as p,b as l,n as u,a as P,g as d,e as g}from"../../../../../chunks/vec3.js";import{c as v}from"../../../../../chunks/vec3f64.js";import{getReferenceEllipsoid as M}from"../../../../../geometry/projectionEllipsoid.js";import{wrapAxisAngle as C}from"../../../../../geometry/support/axisAngle.js";import{create as S,fromPositionAndNormal as w,normal as b}from"../../../../../geometry/support/plane.js";import{c as f}from"../../../../../chunks/sphere.js";import{pixelDistanceToInteractionFactor as j,applyAll as E}from"../../../camera/constraintUtils.js";import{ConstraintTypes as y,InteractionType as O,TiltMode as k}from"../../../camera/constraintUtils/common.js";import{ExponentialFalloff as A}from"../../../input/util.js";import{InteractiveController as z}from"../InteractiveController.js";import{PanPlanarMomentumController as R}from"../momentum/PanPlanarMomentumController.js";import{PanSphericalMomentumController as x}from"../momentum/PanSphericalMomentumController.js";import{RotationMomentumController as _}from"../momentum/RotationMomentumController.js";import{ZoomPlanarMomentumController as H}from"../momentum/ZoomPlanarMomentumController.js";import{ZoomSphericalMomentumController as F}from"../momentum/ZoomSphericalMomentumController.js";import{NavigationMode as T,pickPointAndInitSphere as U,SpherePickPointFallback as D,decideNavigationMode as I,sphereOrPlanePointFromScreenPoint as L,intersectPlaneFromScreenPointAtEye as Z,applyZoomOnSphere as N,preserveHeadingThreshold as B,applyPanSphericalPreserveHeading as G,applyPanSphericalDirectRotation as V,normalizeRotationDelta as q,applyRotation as J,applyPanPlanar as K,applyZoomToPoint as Q}from"../../utils/navigationUtils.js";import{Camera as W}from"../../../webgl-engine/lib/Camera.js";import{PanPlanarMomentumEstimator as X}from"../../../../navigation/PanPlanarMomentumEstimator.js";import{PanSphericalMomentumEstimator as Y}from"../../../../navigation/PanSphericalMomentumEstimator.js";import{RotationMomentumEstimator as $}from"../../../../navigation/RotationMomentumEstimator.js";import{ZoomMomentumEstimator as tt}from"../../../../navigation/ZoomMomentumEstimator.js";let it=class extends z{constructor(t){super(t),this.view=null,this.smoothRotation=new A(.05),this.rotationAxis=v(),this.panningPlane=S(),this.smoothScaling=new A(.05),this.zoomCenterScreen=n(),this.zoomMomentumEstimator=new tt,this.rotationMomentumEstimator=new $,this.panSphericalMomentumEstimator=new Y,this.panPlanarMomentumEstimator=new X,this.adjustedSphere=f(),this.tmp3d=v(),this.tmpScreenPointArray=n(),this.beginScreenPoint=n(),this.beginScenePoint=v(),this.screenPickPoint=n(),this.navMode=T.Horizontal,this.tmpInteractionDirection=v(),this.constraintOptions={selection:y.ALL,interactionType:O.NONE,interactionFactor:0,interactionStartCamera:new W,interactionDirection:null,tiltMode:k.TUMBLE}}get intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;const n=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=n,this.rotationMomentumEstimator.enabled=n,this.panPlanarMomentumEstimator.enabled=n,this.panSphericalMomentumEstimator.enabled=n,this.beginHeading=-i.normalize(e(this.view.camera.heading)),this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.smoothRotation.reset(),s(t.center,this.screenPickPoint),m(this.beginScreenPoint,this.screenPickPoint);const o=M(this.view.spatialReference),r=U(this.intersectionHelper,this.startCamera,this.screenPickPoint,o,D.Silhouette);this.scenePickPoint=r.scenePickPoint,this.sphere=r.sphere,h(this.beginScenePoint,this.scenePickPoint),this.navMode=I(this.startCamera,this.screenPickPoint,r.hasGeometryIntersection,o),this.navMode===T.Vertical&&this._preparePlanarPanMode(t),this.constraintOptions.interactionStartCamera.copyFrom(this.startCamera)}_preparePlanarPanMode(t){const i=c(this.tmp3d,this.startCamera.viewForward);w(this.scenePickPoint,i,this.panningPlane);const e=n(this.screenPickPoint[0],0),r=v(),a=p(this.startCamera.eye);this.adjustedSphere[3]=a<this.sphere[3]?a-100:this.sphere[3],L(this.adjustedSphere,this.startCamera,e,r);const m=o();this.startCamera.projectToRenderScreen(r,m);const M=.9*m[1];this.screenPickPoint[1]=Math.min(this.screenPickPoint[1],M);const C=this.intersectionHelper.intersectScreen(this.screenPickPoint,this.scenePickPoint);C&&w(this.scenePickPoint,b(this.panningPlane),this.panningPlane);const S=v(),f=v(),j=v(),E=80,y=5,O=50;l(S,this.scenePickPoint,this.currentCamera.eye);const k=p(S);u(S,S);const A=y*Math.max(Math.abs(this.view.camera.position.z),O),z=this.view._stage.renderView.getMinimalDepthForArea(null,this.screenPickPoint[0],this.screenPickPoint[1],this.view.state.camera,E);let R=z?Math.min(z,A):A;R=C?Math.min(R,k):R,h(j,P(f,this.currentCamera.eye,d(f,S,R))),this.panningPlane[3]=-g(this.panningPlane,j),this.startCamera.center=P(f,this.startCamera.eye,d(f,this.startCamera.viewForward,R));const x=s(t.center,this.tmpScreenPointArray);Z(this.panningPlane,this.startCamera,x,this.beginScenePoint)}update(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const i=t.pointers.size>1;this.navMode===T.Horizontal?(i&&this._zoomSpherical(t),this._panningSpherical(t),i&&this._rotateSpherical(t)):(i&&this._zoomPlanar(t),this._panningPlanar(t),i&&this._rotatePlanar(t))}end(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const i=this.zoomMomentumEstimator.evaluateMomentum();if(i)return this.navMode===T.Horizontal?new F({view:this.view,momentum:i,screenCenter:this.zoomCenterScreen,sceneCenter:this.beginScenePoint,radius:this.sphere[3]}):new H({view:this.view,momentum:i,zoomCenter:this.beginScenePoint});const e=this.rotationMomentumEstimator.evaluateMomentum();if(e)return new _({view:this.view,momentum:e,center:this.sphere,axis:this.rotationAxis});if(this.navMode===T.Horizontal){const t=this.panSphericalMomentumEstimator.evaluateMomentum();if(t)return new x({view:this.view,momentum:t})}else{const t=this.panPlanarMomentumEstimator.evaluateMomentum();if(t)return new R({view:this.view,momentum:t})}return null}_zoomSpherical(t){const i=this.beginRadius/t.radius,e=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=e,this.smoothScaling.update(i),N(this.sphere,this.currentCamera,this.smoothScaling.value),s(t.center,this.zoomCenterScreen),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),this.constraintOptions.interactionType=O.ZOOM,this.constraintOptions.interactionFactor=j(t.radius-this.beginRadius),E(this.view,this.currentCamera,this.constraintOptions)}_panningSpherical(t){const i=s(t.center,this.tmpScreenPointArray);L(this.sphere,this.currentCamera,i,this.tmp3d),B(this.beginScenePoint,g(this.currentCamera.up,this.beginScenePoint),this.sphere[3],this.beginHeading,this.view.camera.tilt,this.startCamera)?(G(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.beginHeading,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumPreserveHeading(i,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere,this.beginHeading,this.view.camera.tilt)):(V(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumDirectRotation(i,this.tmp3d,.001*t.timestamp,this.startCamera,this.sphere[3],this.view.camera.tilt)),this.constraintOptions.interactionType=O.PAN,this.constraintOptions.interactionFactor=j(this.screenPickPoint,i),E(this.view,this.currentCamera,this.constraintOptions)}_rotateSpherical(t){u(this.rotationAxis,this.scenePickPoint),this.currentCamera.aboveGround||c(this.rotationAxis,this.rotationAxis);const i=this.smoothRotation.value,e=i+q(t.angle-i),n=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=n,this.smoothRotation.update(e);const s=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(s,.001*t.timestamp),J(this.currentCamera,this.sphere,C(this.rotationAxis,s)),this.constraintOptions.interactionType=O.TUMBLE,this.constraintOptions.interactionFactor=j(t.radius*e),E(this.view,this.currentCamera,this.constraintOptions)}_panningPlanar(t){const i=s(t.center,this.tmpScreenPointArray);Z(this.panningPlane,this.currentCamera,i,this.tmp3d)&&(K(this.currentCamera,this.beginScenePoint,this.tmp3d),this.panPlanarMomentumEstimator.add(i,this.tmp3d,.001*t.timestamp),this.constraintOptions.interactionType=O.PAN,this.constraintOptions.interactionFactor=j(this.beginScreenPoint,i),this.constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this.tmpInteractionDirection),E(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null)}_zoomPlanar(t){const i=this.beginRadius/t.radius,e=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=e,this.smoothScaling.update(i),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),Q(this.currentCamera,this.beginScenePoint,this.smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this.constraintOptions.interactionType=O.ZOOM,this.constraintOptions.interactionFactor=j(t.radius-this.beginRadius),E(this.view,this.currentCamera,this.constraintOptions)}_rotatePlanar(t){h(this.rotationAxis,this.beginScenePoint),this.currentCamera.aboveGround||c(this.rotationAxis,this.rotationAxis);const i=this.smoothRotation.value;let e=t.angle-i;e=q(e);const n=i+e,s=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=s,this.smoothRotation.update(n);const o=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(o,.001*t.timestamp),J(this.currentCamera,this.sphere,C(this.rotationAxis,o)),this.constraintOptions.interactionType=O.TUMBLE,this.constraintOptions.interactionFactor=j(t.radius*o),E(this.view,this.currentCamera,this.constraintOptions)}};t([r({constructOnly:!0})],it.prototype,"view",void 0),it=t([a("esri.views.3d.state.controllers.global.PinchAndPanController")],it);export{it as PinchAndPanController};
