/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/has","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/property","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/urlUtils","../../../../../core/uuid","../../../../../portal/support/resourceExtension","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../chunks/vec3f64","../../../../../chunks/vec3","../../../support/mathUtils","../../../../../geometry/projectionEllipsoid","../../../../../support/featureFlags","../../../../../chunks/vec2","../../../support/geometryUtils","../../../camera/constraintUtils","../../../webgl-engine/lib/Camera","../../utils/navigationUtils","../InteractiveController","../../../input/util","../momentum/PanPlanarMomentumController","../momentum/PanSphericalMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../momentum/ZoomSphericalMomentumController","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/PanSphericalMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,i,n,o,a,r,s,c,h,m,l,p,u,P,d,g,v,M,S,C,b,y,w,A,f,E,O,x,R,k,z,F,T){"use strict";t.PinchAndPanController=function(t){function i(e){var i;return(i=t.call(this,e)||this).view=null,i.smoothRotation=new A.ExponentialFalloff(.05),i.rotationAxis=u.create(),i.panningPlane=S.plane.create(),i.smoothScaling=new A.ExponentialFalloff(.05),i.zoomCenterScreen=p.createScreenPointArray(),i.zoomMomentumEstimator=new T.ZoomMomentumEstimator,i.rotationMomentumEstimator=new F.RotationMomentumEstimator,i.panSphericalMomentumEstimator=new z.PanSphericalMomentumEstimator,i.panPlanarMomentumEstimator=new k.PanPlanarMomentumEstimator,i.adjustedSphere=S.sphere.create(),i.tmp3d=u.create(),i.tmpScreenPointArray=p.createScreenPointArray(),i.beginScreenPoint=p.createScreenPointArray(),i.beginScenePoint=u.create(),i.screenPickPoint=p.createScreenPointArray(),i.navMode=y.NavigationMode.Horizontal,i.tmpInteractionDirection=u.create(),i.constraintOptions={selection:15,interactionType:0,interactionFactor:0,interactionStartCamera:new b,interactionDirection:null,tiltMode:0},i}e._inheritsLoose(i,t);var n=i.prototype;return n.begin=function(t){if(!this.active)return;const e=this.view.navigation.momentumEnabled;this.zoomMomentumEstimator.enabled=e,this.rotationMomentumEstimator.enabled=e,this.panPlanarMomentumEstimator.enabled=e,this.panSphericalMomentumEstimator.enabled=e,this.beginHeading=-d.cyclicalPI.normalize(l.deg2rad(this.view.camera.heading)),this.beginRadius=t.radius,this.pointerCount=t.pointers.size,this.beginAngle=t.angle,this.smoothRotation.reset(),p.screenPointObjectToArray(t.center,this.screenPickPoint),M.copy(this.beginScreenPoint,this.screenPickPoint);const i=g.getReferenceEllipsoid(this.view.spatialReference),n=y.pickPointAndInitSphere(this.intersectionHelper,this.beginCamera,this.screenPickPoint,!0,i);this.scenePickPoint=n.scenePickPoint,this.sphere=n.sphere,P.copy(this.beginScenePoint,this.scenePickPoint),this.navMode=y.decideNavigationMode(this.beginCamera,this.screenPickPoint,n.hasGeometryIntersection,i),this.navMode===y.NavigationMode.Vertical&&this.preparePlanarPanMode(t),this.constraintOptions.interactionStartCamera.copyFrom(this.beginCamera)},n.preparePlanarPanMode=function(t){const e=P.negate(this.tmp3d,this.beginCamera.viewForward);S.plane.fromPositionAndNormal(this.scenePickPoint,e,this.panningPlane);const i=p.createScreenPointArray(this.screenPickPoint[0],0),n=u.create(),o=P.length(this.beginCamera.eye);this.adjustedSphere[3]=o<this.sphere[3]?o-100:this.sphere[3],y.sphereOrPlanePointFromScreenPoint(this.adjustedSphere,this.beginCamera,i,n);const a=p.createRenderScreenPointArray3();this.beginCamera.projectToRenderScreen(n,a);const r=.9*a[1];if(this.screenPickPoint[1]=Math.min(this.screenPickPoint[1],r),this.intersectionHelper.intersectScreen(this.screenPickPoint,this.scenePickPoint)&&S.plane.fromPositionAndNormal(this.scenePickPoint,S.plane.normal(this.panningPlane),this.panningPlane),!v.disableContextNavigation()){const t=u.create(),e=u.create(),i=u.create(),n=80,o=5,a=50;P.subtract(t,this.scenePickPoint,this.currentCamera.eye),P.normalize(t,t);const r=o*Math.max(Math.abs(this.view.camera.position.z),a),s=this.view._stage.renderView.getMinimalDepthForArea(this.screenPickPoint[0],this.screenPickPoint[1],this.view._stage.camera,n),c=s?Math.min(s,r):r;P.copy(i,P.add(e,this.currentCamera.eye,P.scale(e,t,c))),this.panningPlane[3]=-P.dot(this.panningPlane,i)}const s=p.screenPointObjectToArray(t.center,this.tmpScreenPointArray);y.intersectPlaneFromScreenPoint(this.panningPlane,this.beginCamera,s,this.beginScenePoint)},n.update=function(t){if(!this.active)return;this.currentCamera.copyFrom(this.beginCamera);const e=t.pointers.size>1;this.navMode===y.NavigationMode.Horizontal?(e&&this.zoomSpherical(t),this.panningSpherical(t),e&&this.rotateSpherical(t)):(e&&this.zoomPlanar(t),this.panningPlanar(t),e&&this.rotatePlanar(t)),this.currentCamera.markViewDirty()},n.end=function(t){t.pointers.size===this.pointerCount&&this.update(t),this.finishController();const e=this.zoomMomentumEstimator.evaluateMomentum();if(e)return this.navMode===y.NavigationMode.Horizontal?new R.ZoomSphericalMomentumController({view:this.view,momentum:e,screenCenter:this.zoomCenterScreen,sceneCenter:this.beginScenePoint,radius:this.sphere[3]}):new x.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this.beginScenePoint});const i=this.rotationMomentumEstimator.evaluateMomentum();if(i)return new O.RotationMomentumController({view:this.view,momentum:i,center:this.sphere,axis:this.rotationAxis});if(this.navMode===y.NavigationMode.Horizontal){const t=this.panSphericalMomentumEstimator.evaluateMomentum();if(t)return new E.PanSphericalMomentumController({view:this.view,momentum:t})}else{const t=this.panPlanarMomentumEstimator.evaluateMomentum();if(t)return new f.PanPlanarMomentumController({view:this.view,momentum:t})}return null},n.zoomSpherical=function(t){const e=this.beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=i,this.smoothScaling.update(e),y.applyZoomOnSphere(this.sphere,this.currentCamera,this.smoothScaling.value),p.screenPointObjectToArray(t.center,this.zoomCenterScreen),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius-this.beginRadius),C.applyAll(this.view,this.currentCamera,this.constraintOptions)},n.panningSpherical=function(t){const e=p.screenPointObjectToArray(t.center,this.tmpScreenPointArray);y.sphereOrPlanePointFromScreenPoint(this.sphere,this.currentCamera,e,this.tmp3d),y.preserveHeadingThreshold(this.beginScenePoint,P.dot(this.currentCamera.up,this.beginScenePoint),this.sphere[3],this.beginHeading,this.view.camera.tilt,this.beginCamera)?(y.applyPanSphericalPreserveHeading(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.beginHeading,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumPreserveHeading(e,this.tmp3d,.001*t.timestamp,this.beginCamera,this.sphere,this.beginHeading,this.view.camera.tilt)):(y.applyPanSphericalDirectRotation(this.sphere,this.currentCamera,this.beginScenePoint,this.tmp3d,this.view.camera.tilt,!1),this.panSphericalMomentumEstimator.addMomentumDirectRotation(e,this.tmp3d,.001*t.timestamp,this.beginCamera,this.sphere[3],this.view.camera.tilt)),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(this.screenPickPoint,e),C.applyAll(this.view,this.currentCamera,this.constraintOptions)},n.rotateSpherical=function(t){P.normalize(this.rotationAxis,this.scenePickPoint),this.currentCamera.aboveGround||P.negate(this.rotationAxis,this.rotationAxis);const e=this.smoothRotation.value,i=e+y.normalizeRotationDelta(t.angle-e),n=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=n,this.smoothRotation.update(i);const o=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(o,.001*t.timestamp),y.applyRotation(this.currentCamera,this.sphere,S.axisAngle.wrapAxisAngle(this.rotationAxis,o)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius*i),C.applyAll(this.view,this.currentCamera,this.constraintOptions)},n.panningPlanar=function(t){const e=p.screenPointObjectToArray(t.center,this.tmpScreenPointArray);y.intersectPlaneFromScreenPoint(this.panningPlane,this.currentCamera,e,this.tmp3d)&&(y.applyPanPlanar(this.currentCamera,this.beginScenePoint,this.tmp3d),this.panPlanarMomentumEstimator.add(e,this.tmp3d,.001*t.timestamp),this.constraintOptions.interactionType=4,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(this.beginScreenPoint,e),this.constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this.tmpInteractionDirection),C.applyAll(this.view,this.currentCamera,this.constraintOptions),this.constraintOptions.interactionDirection=null)},n.zoomPlanar=function(t){const e=this.beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this.smoothScaling.gain=i,this.smoothScaling.update(e),this.zoomMomentumEstimator.add(this.smoothScaling.value,.001*t.timestamp),y.applyZoomToPoint(this.currentCamera,this.beginScenePoint,this.smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this.constraintOptions.interactionType=1,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius-this.beginRadius),C.applyAll(this.view,this.currentCamera,this.constraintOptions)},n.rotatePlanar=function(t){P.copy(this.rotationAxis,this.beginScenePoint),this.currentCamera.aboveGround||P.negate(this.rotationAxis,this.rotationAxis);const e=this.smoothRotation.value;let i=t.angle-e;i=y.normalizeRotationDelta(i);const n=e+i,o=.00125*Math.min(Math.max(t.radius,40),120);this.smoothRotation.gain=o,this.smoothRotation.update(n);const a=this.smoothRotation.value-this.beginAngle;this.rotationMomentumEstimator.add(a,.001*t.timestamp),y.applyRotation(this.currentCamera,this.sphere,S.axisAngle.wrapAxisAngle(this.rotationAxis,a)),this.constraintOptions.interactionType=2,this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(t.radius*a),C.applyAll(this.view,this.currentCamera,this.constraintOptions)},e._createClass(i,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),i}(w.InteractiveController),i.__decorate([r.property({constructOnly:!0})],t.PinchAndPanController.prototype,"view",void 0),t.PinchAndPanController=i.__decorate([s.subclass("esri.views.3d.state.controllers.global.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,"__esModule",{value:!0})}));
