/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/has","../../../../../core/screenUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/accessorSupport/ensureType","../../../../../core/Logger","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec2","../../../../../chunks/vec2f64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/projectionEllipsoid","../../../../../geometry/support/axisAngle","../../../../../chunks/sphere","../../../camera/constraintUtils","../InteractiveController","../../utils/navigationUtils","../../../support/geometryUtils/ray","../../../camera/constraintUtils/surfaceCollision"],(function(t,e,i,r,n,a,s,o,c,h,l,p,m,u,d,y,C,P,g,v,f){"use strict";const R=30,k=70;t.ZoomController=function(t){function i(e){var i;return(i=t.call(this,e)||this).view=null,i.pickPoint=m.create(),i.tmpP0=l.create(),i.panAxisAngle=d.create(),i.tmpRayDir=m.create(),i.targetOnSphere=m.create(),i.tmpRay={origin:m.create(),direction:m.create()},i.dragBeginPoint=n.createScreenPointArray(),i.normalizedAnchorPoint=l.create(),i.constraintOptions={selection:7,interactionType:1,interactionFactor:0,interactionStartCamera:null,interactionDirection:null,tiltMode:0},i.sphere=y.create(),i.hasPickPoint=!1,i}e._inheritsLoose(i,t);var a=i.prototype;return a.begin=function(t){if(!this.active)return;h.copy(this.dragBeginPoint,t),g.normalizeCoordinate(this.startCamera,t,this.normalizedAnchorPoint);const e=u.getReferenceEllipsoid(this.view.spatialReference),i=g.pickPointAndInitSphere(this.intersectionHelper,this.startCamera,t,!1,e);if(this.navMode=g.decideNavigationMode(this.startCamera,t,i.hasGeometryIntersection,e),this.navMode===g.NavigationMode.Horizontal||r("disable-feature:context-navigation"))this.hasPickPoint=!!i.scenePickPoint,this.pickPoint=i.scenePickPoint,this.sphere=i.sphere;else{let e;v.fromScreenAtEye(this.startCamera,t,this.tmpRay),p.normalize(this.tmpRay.direction,this.tmpRay.direction),this.view.camera.position.hasZ&&(e=Math.abs(this.view.camera.position.z));let i=R*e;const r=this.view._stage.renderView.getMinimalDepthForArea(t[0],t[1],this.view.state.camera,k);i=i>r?r:i,this.hasPickPoint=!0,p.scale(this.tmpRay.direction,this.tmpRay.direction,i),p.add(this.pickPoint,this.tmpRay.origin,this.tmpRay.direction)}this.constraintOptions.interactionStartCamera=this.startCamera},a.update=function(t){if(this.active){if(this.currentCamera.eye=this.startCamera.eye,this.currentCamera.center=this.startCamera.center,this.currentCamera.up=this.startCamera.up,this.navMode===g.NavigationMode.Horizontal||r("disable-feature:context-navigation")){p.subtract(this.tmpRayDir,this.currentCamera.center,this.currentCamera.eye);const e=p.length(this.tmpRayDir);g.normalizeCoordinate(this.currentCamera,t,this.tmpP0);const i=12*(this.normalizedAnchorPoint[1]-this.tmpP0[1]);let r=e*2**i;const n=this.view.state.constraints.minimumPoiDistance;if(i<0&&r<n&&(r=n),Math.abs(e-r)<1e-6)return;if(this.hasPickPoint&&r<e){const t=1-(1-r/e)*(1-this.sphere[3]/p.length(this.currentCamera.center));this.currentCamera.center=p.scale(A,this.currentCamera.center,t)}p.scale(this.tmpRayDir,this.tmpRayDir,-r/e),this.currentCamera.eye=p.add(A,this.currentCamera.center,this.tmpRayDir),this.constraintOptions.interactionFactor=C.pixelDistanceToInteractionFactor(this.dragBeginPoint,t),C.applyAll(this.view,this.currentCamera,this.constraintOptions),this.hasPickPoint&&(g.sphereOrPlanePointFromScreenPoint(this.sphere,this.currentCamera,this.dragBeginPoint,this.targetOnSphere),d.fromPoints(this.pickPoint,this.targetOnSphere,this.panAxisAngle),g.applyRotation(this.currentCamera,this.sphere,this.panAxisAngle))}else{const e=p.length(this.tmpRay.direction);g.normalizeCoordinate(this.currentCamera,t,this.tmpP0);const i=12*(this.normalizedAnchorPoint[1]-this.tmpP0[1]);let r=e*2**i;const n=this.view.state.constraints.minimumPoiDistance;if(i<0&&r<n&&(r=n),Math.abs(e-r)<1e-6)return;p.scale(this.tmpRayDir,this.tmpRay.direction,1-r/e),this.currentCamera.eye=p.add(A,this.currentCamera.eye,this.tmpRayDir),this.currentCamera.center=p.add(A,this.currentCamera.center,this.tmpRayDir)}f.applySurfaceCollisionConstraint(this.view,this.currentCamera)}},a.end=function(){this.active&&this.finishController()},e._createClass(i,[{key:"intersectionHelper",get:function(){return this.view.sceneIntersectionHelper}}]),i}(P.InteractiveController),i.__decorate([a.property({constructOnly:!0})],t.ZoomController.prototype,"view",void 0),t.ZoomController=i.__decorate([c.subclass("esri.views.3d.state.controllers.global.ZoomController")],t.ZoomController);const A=m.create();Object.defineProperty(t,"__esModule",{value:!0})}));
