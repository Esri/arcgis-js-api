/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import s from"../../../core/Handles.js";import{property as r}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import"../camera/constraintUtils.js";import{eyeWithinExtent as a}from"../camera/intersectionUtils.js";import{applySurfaceCollisionConstraint as i,Mode as n}from"../camera/constraintUtils/surfaceCollision.js";let c=class extends t{constructor(e){super(e),this.handles=new s}initialize(){this.handles.add(this.view.basemapTerrain.on("elevation-change",(e=>this._handleElevationChangeEvent(e))))}destroy(){this.handles&&(this.handles.destroy(),this.handles=null)}_handleElevationChangeEvent(e){if(this.view.state.cameraController)return;const t=this.view.state.camera;a(this.view,t,e.extent,e.spatialReference)&&this._applyToCurrentCamera()}_applyToCurrentCamera(){this.view.state.updateCamera((e=>{i(this.view,e,n.EYE_AND_CENTER)}))}};e([r({constructOnly:!0})],c.prototype,"view",void 0),c=e([o("esri.views.3d.state.ElevationCollisionConstraint")],c);export{c as SurfaceCollisionConstraint};
