/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{lerp as e,clamp as t}from"../../../core/mathUtils.js";import{isSome as i}from"../../../core/maybe.js";import{getMetersPerUnitForSR as r}from"../../../core/unitUtils.js";import{b as n,n as s,e as a,l as o}from"../../../chunks/vec3.js";import{c as m}from"../../../chunks/vec3f64.js";import h from"../../../geometry/Extent.js";import{getReferenceEllipsoid as l}from"../../../geometry/projectionEllipsoid.js";import{ViewingMode as x}from"../../ViewingMode.js";function c(e,t,i){return e===x.Global?new M(i):new u(t,i)}class u{constructor(e,t){this.elevationProvider=e,this._referenceEllipsoid=l(t),this.unitInMeters=r(t,this._referenceEllipsoid.metersPerDegree)}compute(r,o,m,l,x){x||(x={near:0,far:0});let c=r[2]*this.unitInMeters;const u=c,M=c-l,d=this.elevationProvider?this.elevationProvider.elevationBounds:null;d&&(c=M>=0?u-this.unitInMeters*d.min:this.unitInMeters*d.max-u);const E={x:(m=i(m)?m:new h({xmin:0,ymin:0,zmin:0,xmax:0,ymax:0,zmax:0})).xmax-m.xmin,y:m.ymax-m.ymin,z:4*Math.max(m.xmax-m.xmin,m.ymax-m.ymin)},b=Math.max(E.x,E.y,E.z);n(I,o,r),v[0]=I[0]>0?m.xmax:m.xmin,v[1]=I[1]>0?m.ymax:m.ymin,v[2]=I[2]>0?b/2:-b/2,n(v,v,r),s(I,I);const g=1.1*a(v,I)*this.unitInMeters,_=Math.sqrt(c*(c+2*this._referenceEllipsoid.radius)),w=Math.max(m.xmax-m.xmin,m.ymax-m.ymin),z=w*y*this.unitInMeters,P=w*j*this.unitInMeters;let k=t((c-P)/(z-P),0,1);k*=k*k;let q=e(_,g,k);return q*=Math.max(Math.log(Math.abs(M)),1),q=Math.min(q,Math.max(34064e4,b)),q/=this.unitInMeters,f(q,p,this.unitInMeters,x)}}class M{constructor(e){this._referenceEllipsoid=l(e)}compute(e,i,r,n,s){s||(s={near:0,far:0});const a=o(e)-this._referenceEllipsoid.radius,m=this._referenceEllipsoid.radius+Math.min(0,n),h=Math.abs(a-n),l=Math.max(h,Math.abs(a));return f(1.2*Math.sqrt(l*(l+2*m)),t(2e4-(Math.log(l)-7.983)/9.011*19e3,1e3,2e4),1,s)}}function f(e,t,i,r){const n=d/i;return e/t>n?(r.far=e,r.near=r.far/t):(r.near=n,r.far=r.near*t),r}const p=2e4,d=2,y=.001,j=1e-4,v=m(),I=m();export{c as createNearFarHeuristic};
