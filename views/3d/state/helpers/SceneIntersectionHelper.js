/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isNone as e,isSome as t,unwrapOr as r}from"../../../../core/maybe.js";import i from"../../../../core/PooledArray.js";import{castRenderScreenPointArray3 as n,createRenderScreenPointArray3 as s}from"../../../../core/screenUtils.js";import{a as o,n as a,g as c,l}from"../../../../chunks/vec3.js";import{c as h}from"../../../../chunks/vec3f64.js";import{create as u,copy as m,NEGATIVE_INFINITY as d,width as p,height as y,expandPointInPlace as g}from"../../../../geometry/support/aaBoundingRect.js";import{create as f}from"../../../../geometry/support/ray.js";import{sv3d as R}from"../../../../geometry/support/vectorStacks.js";import{ViewingMode as v}from"../../../ViewingMode.js";import{fromRenderAtEye as x,fromScreen as w}from"../../support/geometryUtils/ray.js";import{DEFAULT_TOLERANCE as b,newIntersector as I}from"../../webgl-engine/lib/Intersector.js";import{StoreResults as M,IntersectorType as P}from"../../webgl-engine/lib/IntersectorInterfaces.js";import{isValidIntersectorResult as j,sliceFilterPredicate as E}from"../../webgl-engine/lib/intersectorUtils.js";class H{constructor(e,t,r){this.viewingMode=e,this._forEachLayer=t,this.view=r,this.externalIntersectionHandlers=new i,this.tolerance=b,this.tmpRay=f(),this.tmpRegion=u(),this.validateHUDIntersector=I(this.viewingMode),this.validateHUDIntersector.options.hud=!1}intersectScreen(e,t,r){return this.intersectRay(this._getPickRay(e,this.tmpRay),k(this.viewingMode),t,r)}intersectScreenFreePointFallback(e,t,r){return this.intersectRayFreePointFallback(this._getPickRay(e,this.tmpRay),t,r)}intersectRayFreePointFallback(e,t,r){return this.intersectRay(e,k(this.viewingMode),t,r)||this._intersectRayFreePointLocal(e,t)}intersectRay(e,t,r,i){return t.options.selectionMode=!1,t.options.store=M.MIN,this.computeIntersection(e,t,i),!!t.results.min&&t.results.min.getIntersectionPoint(r)}getCenterRayWithSubpixelOffset(e,t,r=.5,i=.5){return e.getRenderCenter(N,r,i),N[0]+=.0466,N[1]-=.0123,x(e,N,t)}intersectIntersectorScreen(e,t,r){this.computeIntersection(this._getPickRay(e,this.tmpRay),t,r)}intersectToolIntersectorScreen(e,t,r){const i=this._getPickRay(e,this.tmpRay);this.intersectToolIntersectorRay(i,t,r)}intersectToolIntersectorRay(e,t,r){t.options.selectionMode=!0,this.computeIntersection(e,t,r);const i=t.results.min;!!this.view.basemapTerrain&&this.view.basemapTerrain.opaque||j(i)&&i.intersector!==P.TERRAIN||(t.options.selectionMode=!1,this.computeIntersection(e,t,r))}setTolerance(e=b){this.tolerance=e}addIntersectionHandler(e){this.externalIntersectionHandlers.push(e),this.externalIntersectionHandlers.sort(((e,t)=>e.type===P.TERRAIN?1:t.type===P.TERRAIN?-1:0))}removeIntersectionHandler(e){null!=this.externalIntersectionHandlers.removeUnordered(e)&&this.externalIntersectionHandlers.sort(((e,t)=>e.type===P.TERRAIN?1:t.type===P.TERRAIN?-1:0))}_getPickRay(e,t){const r=this.view.state.camera;return w(r,e,t)}_intersectRayFreePointLocal(t,r){if(this.viewingMode!==v.Local||e(t))return!1;const i=this.view.renderDataExtent;if(e(i))return o(r,t.origin,a(R.get(),t.direction)),!0;const n={x:i.xmax-i.xmin,y:i.ymax-i.ymin,z:8*Math.max(i.xmax-i.xmin,i.ymax-i.ymin)},s=Math.max(n.x,n.y,n.z);if(0===s)return o(r,t.origin,a(R.get(),t.direction)),!0;const h=this.view.state.camera,u=Math.max(0,i.xmin-h.eye[0],h.eye[0]-i.xmax),m=Math.max(0,i.ymin-h.eye[1],h.eye[1]-i.ymax),d=Math.sqrt(u*u+m*m),p=Math.abs(h.relativeElevation)+Number.MIN_VALUE,y=Math.max(0,Math.log(s/p))**2;let g=s/Math.max(1,y);g=Math.max(g,Math.min(d,s));const f=c(R.get(),t.direction,g/l(t.direction));return o(r,t.origin,f),!0}intersectElevationFromScreen(e,t,r=0,i=null){return this._intersectElevation(this._getPickRay(e,this.tmpRay),t,r,i)}_intersectElevation(i,s,a=0,c=null){if(e(i))return null;const l=t(s)?s.mode:"absolute-height",h=t(s)?r(s.offset,0):0,u="on-the-ground"!==l?h+a:0,m=u/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===l){if(this.view.renderCoordsHelper.intersectInfiniteManifold(i,u,S)){const e=this.view.computeMapPointFromVec3d(S);return e.z-=h,e}return null}const d=this.view.state.camera,p=n(R.get());d.projectToRenderScreen(i.origin,p);const y=new A(null,this._forEachLayer),g=this.view.slicePlane,f=t(g)?E(g):null,v=I(this.viewingMode);v.options.store=M.MIN,v.options.verticalOffset=m;const x=i.origin,w=o(R.get(),x,i.direction);v.reset(x,w,d),v.point=p;const b=t(c)?"type"in c&&"graphics"===c.type?e=>e.metadata.layerUid!==c.uid:e=>e.metadata.graphicUid!==c.uid:null;switch(l){case"relative-to-scene":{const t=t=>(e(b)||b(t))&&t.metadata&&t.metadata.isElevationSource;v.intersect(y.layers,p,this.tolerance,null,t),this.externalIntersectionHandlers.forAll((e=>{if(e.type===P.I3S||e.type===P.TERRAIN){const t=e.slicePlaneEnabled?f:null;e.intersect(v,t,v.rayBegin,v.rayEnd,p)}}))}break;case"on-the-ground":case"relative-to-ground":this.externalIntersectionHandlers.forAll((e=>{if(e.isGround){const t=e.slicePlaneEnabled?f:null;e.intersect(v,t,v.rayBegin,v.rayEnd,p)}}))}if(v.results.min.getIntersectionPoint(S)){const e=this.view.computeMapPointFromVec3d(S);return e.z=a,e}return null}computeIntersection(i,s,a){if(e(i))return;const c=this.view.state.camera,l=n(R.get());c.projectToRenderScreen(i.origin,l);const h=new A(a,this._forEachLayer);s.options.selectOpaqueTerrainOnly=!a||!("include"in a||"exclude"in a);const u=i.origin,m=o(R.get(),i.origin,i.direction);s.reset(u,m,c),s.intersect(h.layers,l,this.tolerance);const d=this.view.slicePlane,p=t(d)?E(d):null;s.intersect(h.sliceableLayers,l,this.tolerance,p);const y=a&&(a.requiresGroundFeedback||a.enableDraped);this.externalIntersectionHandlers.forAll((e=>{if(s.options.isFiltered=!h.filterLayerUid(e.layerUid),e.isGround&&y||!s.options.isFiltered){const t=e.slicePlaneEnabled?p:null;e.intersect(s,t,u,m,l)}}));const g=R.get();if(a&&a.enableDraped&&s.results.ground.getIntersectionPoint(g)){const e=this.view.basemapTerrain,t=e.overlayManager.renderer,i=this.view.renderCoordsHelper.spatialReference,n=R.get();this.view.renderCoordsHelper.fromRenderCoords(g,n,e.spatialReference),n[2]=r(this.view.elevationProvider.getElevation(g[0],g[1],g[2],i,"ground"),0),t.intersect(s,n,s.results.ground,(e=>h.filterRenderGeometry(e)))}s.sortResults(),this._processHUDResults(s)}_processHUDResults(r){const i=r.results.hud;m(this.tmpRegion,d);const n=this.view.state.camera,s=[],o=this.tmpRegion,a=e=>{const t=new T(e);n.projectToRenderScreen(e.target.center,t.screenPoint),t.screenPoint[0]=Math.floor(t.screenPoint[0]),t.screenPoint[1]=Math.floor(t.screenPoint[1]),s.push(t),g(o,t.screenPoint)};r.sortResults(i.all),t(i.min.dist)&&a(i.min);for(const e of i.all)i.min.target.object!==e.target.object&&i.max.target.object!==e.target.object&&a(e);if(t(i.max.dist)&&i.max.target.object!==i.min.target.object&&a(i.max),!s.length)return;o[0]===o[2]&&(o[2]+=1),o[1]===o[3]&&(o[3]+=1);const c=n.fullWidth,l=n.fullHeight,h=Math.max(0,o[0]-U),u=Math.max(0,o[1]-U),f=Math.min(p(o)+2*U,c-h),R=Math.min(y(o)+2*U,l-u),v=new Uint8Array(f*R*4);this.view._stage.renderView.readHUDVisibility(h,u,f,R,v);let x=!0;const w=e(r.results.max.dist);let b=0;for(const e of s)for(const t of L){if(v[4*(Math.min(e.screenPoint[0]+t[0],c)-o[0]+(Math.min(e.screenPoint[1]+t[1],l)-o[1])*f)]){x&&(r.results.min.copy(e.result),x=!1),w&&r.results.max.copy(e.result),r.options.store===M.ALL&&r.results.all.splice(b++,0,e.result);break}}}}const U=1,L=(()=>{const e=[],t=U;for(let r=-t;r<=t;r++)for(let i=-t;i<=t;i++)e.push([i+t,r+t]);return e})();class T{constructor(e){this.result=e,this.screenPoint=s()}}let _;function k(e){return _&&_.viewingMode===e||(_=I(e)),_}class A{constructor(e,t){this.layers=new Array,this.sliceableLayers=new Array,this.include=e?.include,this.exclude=e?.exclude,t((e=>{e.isPickable&&this.filterLayerUid(e.apiLayerUid)&&(e.isSliceable?this.sliceableLayers:this.layers).push(e)}))}filterLayerUid(t){const{include:r,exclude:i}=this;return e(t)?null==r&&null==i:(null==r||r.has(t))&&(null==i||!i.has(t))}filterRenderGeometry(e){return this.filterLayerUid(e.layerUid)}}function F(e){return"object"==typeof e&&"intersect"in e}const S=h(),N=s();export{H as SceneIntersectionHelper,F as isIntersectionHandler};
