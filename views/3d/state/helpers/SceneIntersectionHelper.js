/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../core/maybe","../../../../core/PooledArray","../../../../core/screenUtils","../../../../chunks/vec3f64","../../../../chunks/vec3","../../support/stack","../../../../chunks/ray","../../webgl-engine/lib/intersectorUtils","../../webgl-engine/lib/Intersector"],(function(e,t,n,r,i,s,o,a,c,l){"use strict";let d,u=function(){function e(e,t,r){this.viewingMode=e,this.layerProvider=t,this.view=r,this.externalIntersectionHandlers=new n,this.tolerance=l.Intersector.DEFAULT_TOLERANCE,this.tmpRay=a.create(),this.validateHUDIntersector=new l.Intersector(this.viewingMode),this.validateHUDIntersector.options.hud=!1}var i=e.prototype;return i.intersectScreen=function(e,t){return this.intersectRay(this.getPickRay(e,this.tmpRay),y(this.viewingMode),t)},i.intersectScreenFreePointFallback=function(e,t){return this.intersectRayFreePointFallback(this.getPickRay(e,this.tmpRay),t)},i.intersectRayFreePointFallback=function(e,t){return this.intersectRay(e,y(this.viewingMode),t)||this.intersectRayFreePointLocal(e,t)},i.intersectRay=function(e,t,n,r){return t.options.selectionMode=!1,t.options.store=0,this.computeIntersection(e,t,r),!!t.results.min&&t.results.min.getIntersectionPoint(n)},i.getCenterRayWithSubpixelOffset=function(e,t,n=.5,r=.5){return e.getRenderCenter(f,n,r),f[0]+=.0466,f[1]-=.0123,a.fromRenderAtEye(e,f,t)},i.intersectIntersectorScreen=function(e,t,n){this.computeIntersection(this.getPickRay(e,this.tmpRay),t,n)},i.intersectToolIntersectorScreen=function(e,t,n){const r=this.getPickRay(e,this.tmpRay);this.intersectToolIntersectorRay(r,t,n)},i.intersectToolIntersectorRay=function(e,t,n){t.options.selectionMode=!0,this.computeIntersection(e,t,n);const r=t.results.min;!!this.view.basemapTerrain&&this.view.basemapTerrain.isOpaque()||r.hasIntersectionPoint&&"TerrainRenderer"!==r.intersector||(t.options.selectionMode=!1,this.computeIntersection(e,t,n))},i.setTolerance=function(e=l.Intersector.DEFAULT_TOLERANCE){this.tolerance=e},i.addIntersectionHandler=function(e){this.externalIntersectionHandlers.push(e),this.externalIntersectionHandlers.sort(((e,t)=>"Terrain"===e.type?1:"Terrain"===t.type?-1:0))},i.removeIntersectionHandler=function(e){this.externalIntersectionHandlers.removeUnordered(e),this.externalIntersectionHandlers.sort(((e,t)=>"Terrain"===e.type?1:"Terrain"===t.type?-1:0))},i.getPickRay=function(e,t=a.create()){const n=this.view.state.camera;return a.fromScreen(n,e,t)},i.intersectRayFreePointLocal=function(e,n){if(2!==this.viewingMode||t.isNone(e))return!1;const r=this.view.dataExtent,i={x:r.xmax-r.xmin,y:r.ymax-r.ymin,z:8*Math.max(r.xmax-r.xmin,r.ymax-r.ymin)},a=Math.max(i.x,i.y,i.z);if(0===a)return s.add(n,e.origin,s.normalize(o.sv3d.get(),e.direction)),!0;const c=this.view.state.camera,l=Math.max(0,r.xmin-c.eye[0],c.eye[0]-r.xmax),d=Math.max(0,r.ymin-c.eye[1],c.eye[1]-r.ymax),u=Math.sqrt(l*l+d*d),h=Math.abs(c.relativeElevation)+Number.MIN_VALUE,y=Math.pow(Math.max(0,Math.log(a/h)),2);let p=a/Math.max(1,y);p=Math.max(p,Math.min(u,a));const m=s.scale(o.sv3d.get(),e.direction,p/s.length(e.direction));return s.add(n,e.origin,m),!0},i.intersectElevationFromScreen=function(e,t,n=0){return this.intersectElevation(this.getPickRay(e,this.tmpRay),t,n)},i.intersectElevation=function(e,n,i=0){if(t.isNone(e))return null;const a=t.isSome(n)?n.mode:"absolute-height",d=t.isSome(n)?t.unwrapOr(n.offset,0):0,u="on-the-ground"!==a?d+i:0,h=u/this.view.renderCoordsHelper.unitInMeters;if("absolute-height"===a){if(this.view.renderCoordsHelper.intersectManifold(e,u,m)){const e=this.view.computeMapPointFromVec3d(m);return e.z-=d,e}return null}const y=this.view.state.camera,f=r.castRenderScreenPointArray3(o.sv3d.get());y.projectToRenderScreen(e.origin,f);const v=this.prepareFilters(null,p),g=this.view.slicePlane,R=t.isSome(g)?c.sliceFilterPredicate(g):null,I=new l.Intersector(this.viewingMode);I.options.store=0,I.options.verticalOffset=h;const P=e.origin,x=s.add(o.sv3d.get(),P,e.direction);switch(I.reset(P,x),I.point=f,I.camera=y,I.filterPredicate=null,a){case"relative-to-scene":{const e=e=>e.metadata&&e.metadata.isElevationSource;I.intersect(v.layers,f,y,this.tolerance,null,e),this.externalIntersectionHandlers.forAll((e=>{if("I3S"===e.type||"Terrain"===e.type){const t=e.slicePlane?R:null;e.intersect(I,t,I.rayBeginPoint,I.rayEndPoint,f)}}))}break;case"on-the-ground":case"relative-to-ground":this.externalIntersectionHandlers.forAll((e=>{if(e.isGround){const t=e.slicePlane?R:null;e.intersect(I,t,I.rayBeginPoint,I.rayEndPoint,f)}}))}if(I.results.min.getIntersectionPoint(m)){const e=this.view.computeMapPointFromVec3d(m);return e.z=i,e}return null},i.computeIntersection=function(e,n,i){if(t.isNone(e))return;const a=this.view.state.camera,l=r.castRenderScreenPointArray3(o.sv3d.get());a.projectToRenderScreen(e.origin,l);const d=this.prepareFilters(i,p);n.options.selectOpaqueTerrainOnly=!i||!("include"in i||"exclude"in i);const u=e.origin,h=s.add(o.sv3d.get(),e.origin,e.direction);n.reset(u,h),n.intersect(d.layers,l,a,this.tolerance);const y=this.view.slicePlane,m=t.isSome(y)?c.sliceFilterPredicate(y):null;n.intersect(d.sliceableLayers,l,a,this.tolerance,m);const f=i&&(i.requiresGroundFeedback||i.enableDraped);this.externalIntersectionHandlers.forAll((e=>{if(n.options.isFiltered=!d.filterLayerUid(e.intersectionHandlerId),e.isGround&&f||!n.options.isFiltered){const t=e.slicePlane?m:null;e.intersect(n,t,u,h,l)}}));const v=o.sv3d.get();if(i&&i.enableDraped&&n.results.ground.getIntersectionPoint(v)){const e=this.view.basemapTerrain.overlayManager.renderer,t=this.view.renderCoordsHelper.spatialReference,r=o.sv3d.get();this.view.renderCoordsHelper.fromRenderCoords(v,r,this.view.spatialReference),r[2]=this.view.elevationProvider.getElevation(v[0],v[1],v[2],t,"ground")||0,e.intersect(n,r,d.filterRenderGeometry)}n.sortResults();const g=n.results.hud;if(g.hasIntersectionPoint){const e=r.castRenderScreenPointArray3(o.sv3d.get()),t=o.sv3d.get(),i=o.sv3d.get();this.unprojectHUDResultRay(g.center,e,t,i);const c=s.distance(g.center,t)/s.distance(t,i)*.99;this.validateHUDIntersector.reset(t,i),this.validateHUDIntersector.intersect(d.layers,e,a,this.tolerance),this.validateHUDIntersector.intersect(d.sliceableLayers,e,a,this.tolerance,m),this.externalIntersectionHandlers.forAll((n=>{if(!d.filterLayerUid(n.intersectionHandlerId))return;const r=n.slicePlane?m:null;n.intersect(this.validateHUDIntersector,r,t,i,e)}));const l=this.validateHUDIntersector.results.min;(null==l.dist||c<=l.dist)&&(n.results.min.copyFrom(g),n.results.all.splice(0,0,g))}},i.prepareFilters=function(e,t){const n=[],r=[];return this.layerProvider.forEachLayer((e=>{e.isPickable&&(e.isSliceable?r:n).push(e)})),t.include=e&&e.include,t.exclude=e&&e.exclude,t.layers.length=0,t.sliceableLayers.length=0,h(n,t.filterLayer,t.layers),h(r,t.filterLayer,t.sliceableLayers),t},i.unprojectHUDResultRay=function(e,t,n,i){const s=this.view.state.camera;s.projectToRenderScreen(e,t);const a=r.castRenderScreenPointArray3(o.sv3d.get());a[0]=t[0],a[1]=t[1],a[2]=0,s.unprojectFromRenderScreen(a,n),a[2]=1,s.unprojectFromRenderScreen(a,i)},e}();function h(e,t,n){for(const r of e)t&&!t(r)||n.push(r);return n}function y(e){return d||(d=new l.Intersector(e)),d.viewingMode=e,d}const p={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer:e=>p.filterLayerUid(e.apiLayerUid),filterLayerUid(e){const{include:n,exclude:r}=p;return t.isNone(e)?null==n&&null==r:(null==n||n.has(e))&&(null==r||!r.has(e))},filterRenderGeometry:e=>p.filterLayerUid(e.data.layerUid)},m=i.create(),f=r.createRenderScreenPointArray();e.SceneIntersectionHelper=u,Object.defineProperty(e,"__esModule",{value:!0})}));
