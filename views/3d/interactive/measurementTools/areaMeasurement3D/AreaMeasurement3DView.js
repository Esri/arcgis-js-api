/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../../../chunks/_rollupPluginBabelHelpers","../../../../../core/maybe","../../../../../core/screenUtils","../../../../../chunks/vec3f64","../../../../../chunks/vec3","../../../../../core/Handles","../../../../../geometry/projectionEllipsoid","../../../../../chunks/mat4","../../../../../geometry/projection","../../../../../chunks/mat4f64","../../../support/stack","../../../webgl-engine/lib/GeometryData","../../../webgl-engine/lib/GeometryUtil","../../../webgl-engine/lib/Object3D","../../../webgl-engine/lib/Intersector","../../../webgl-engine/lib/Geometry","../../../webgl-engine/lib/Layer","../../../webgl-engine/materials/RibbonLineMaterial","../../../webgl-engine/materials/lineStippleUtils","../../../support/LaserLineRenderer","../../../../interactive/ManipulatorCollection","../../editingTools/dragEventPipeline3D","../../manipulatorUtils","../support/Label","../support/viewUtils","../support/LabelSegment","../support/labelUtils","../support/PathSegmentInterpolator","../../../webgl-engine/materials/CheckerBoardMaterial"],(function(e,t,i,n,r,s,a,o,l,h,c,d,_,p,m,u,g,L,b,w,f,v,S,P,M,y,j,C,O){"use strict";const V={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};let R=function(){function R(e,t=new f.ManipulatorCollection,i={}){this._model=e,this._manipulators=t,this.vertexManipulators=[],this._visible=!1,this._laserLineRenderer=null,this._cursorManipulator=null,this._pathSegmentObjects=[],this._perimeterSegmentObjects=[],this._projectionLineObjects=[],this._areaLabel=new P(16),this._pathLengthLabel=new P(12),this._cursorSegmentLengthLabel=new P(12),this._perimeterLengthLabel=new P(12),this._pathLabelSegments=[],this._perimeterLabelSegments=[],this._cursorSegmentLengthLabelSegment=new y,this._listenerHandles=null,this._origin=n.create(),this._originTransform=h.create(),this._tempStartPosition=n.create(),this._tempEndPosition=n.create(),this._tempHandlePosition=n.create(),this._sceneView=this._model.sceneView,this._params=M.copyParameter(V,i),this._layer=new g("path-measurement-tool",{isPickable:!1}),this._createMaterials(),this._createObjects(),this._intersector=new m.Intersector(this._sceneView.state.mode),this._intersector.options.store=0;const r=S.createSphereManipulator(this._sceneView,this._params.handleColor,this._params.handleOpacity);r.available=!1,r.radius=this._params.handleRadius,r.interactive=!1,this._manipulators.add(r),this._cursorManipulator=r}var D=R.prototype;return D.destroy=function(){this.hide()},D.show=function(){if(this._visible)return;this._visible=!0;const e=this._sceneView._stage,t={glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,globalAlpha:this._params.laserLineGlobalAlpha};this._laserLineRenderer=new w.LaserLineRenderer(this._sceneView.renderCoordsHelper,t),e.addRenderPlugin(this._laserLineRenderer.renderSlots,this._laserLineRenderer),this._addToStage(e),this._areaLabel.addToView(this._sceneView),this._pathLengthLabel.addToView(this._sceneView),this._cursorSegmentLengthLabel.addToView(this._sceneView),this._perimeterLengthLabel.addToView(this._sceneView),this._initializeListeners(),this._updateAll(this._model.viewData)},D.hide=function(){if(!this._visible)return;this._visible=!1;const e=this._sceneView._stage;e.removeRenderPlugin(this._laserLineRenderer),this._laserLineRenderer=null,this._destroyListeners(),this._updatePathLength(0),this._removeFromStage(e),this._areaLabel.removeFromView(this._sceneView),this._pathLengthLabel.removeFromView(this._sceneView),this._cursorSegmentLengthLabel.removeFromView(this._sceneView),this._perimeterLengthLabel.removeFromView(this._sceneView),this._sceneView.cursor=null},D.vertexHandleAt=function(e,i){const n=this._manipulators.intersect(e,i);return t.isSome(n)?this.manipulatorIdToVertexId(n):null},D.manipulatorIdToVertexId=function(e){for(let t=0;t<this.vertexManipulators.length;t++){const{id:i}=this.vertexManipulators[t];if(e===i)return t}return null},D.pick=function(e){const t=this._sceneView.spatialReference,r=i.screenPointObjectToArray(e.screenPoint);this._sceneView.sceneIntersectionHelper.intersectToolIntersectorScreen(r,this._intersector);const s=this._intersector.results.min,a=n.create();if(!s.getIntersectionPoint(a))return new R.PickResult;const o=this._sceneView.renderCoordsHelper.fromRenderCoords(a,t),l="TerrainRenderer"===s.intersector?"surface":"feature";return new R.PickResult(l,a,o)},D.overlappingHandles=function(e,t){return M.pointToPointScreenDistance(e,t,this._sceneView)<=this._params.handleRadius},D.screenToMap3D=function(){return v.screenToMap3D(this._sceneView)},D._createMaterials=function(){this._pathLineMaterial=new L.RibbonLineMaterial({width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4},"path-line"),this._intersectingPathLineMaterial=new L.RibbonLineMaterial({width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4},"intersecting-path-line"),this._perimeterLineMaterial=new L.RibbonLineMaterial({width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4},"perimeter-line"),this._intersectingPerimeterLineMaterial=new L.RibbonLineMaterial({width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4},"intersecting-perimeter-line"),this._projectionLineMaterial=new L.RibbonLineMaterial({width:this._params.projectionLineWidth,color:this._params.projectionLineColor,polygonOffset:!0,stipplePattern:b.createStipplePatternSimple(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,renderOccluded:4},"projection-line"),this._checkerBoardMaterial=new O.CheckerBoardMaterial({color1:this._params.areaColor1,color2:this._params.areaColor2,transparent:!0,writeDepth:!1,polygonOffset:!0,renderOccluded:4},"checker-board")},D._createObjects=function(){this._cursorSegmentObject=new p,this._areaObject=new p},D._addToStage=function(e){e.add(0,this._layer),e.add(3,this._pathLineMaterial),e.add(3,this._intersectingPathLineMaterial),e.add(3,this._perimeterLineMaterial),e.add(3,this._intersectingPerimeterLineMaterial),e.add(3,this._projectionLineMaterial),e.add(3,this._checkerBoardMaterial),e.addToViewContent([this._layer.id])},D._removeFromStage=function(e){e.removeFromViewContent([this._layer.id]),e.remove(0,this._layer.id),e.remove(3,this._pathLineMaterial.id),e.remove(3,this._intersectingPathLineMaterial.id),e.remove(3,this._perimeterLineMaterial.id),e.remove(3,this._intersectingPerimeterLineMaterial.id),e.remove(3,this._projectionLineMaterial.id),e.remove(3,this._checkerBoardMaterial.id)},D._syncViewData=function(e){if(!this._visible)return"none";const t=e.pathChanges;"full"===t.change?this._updateAll(e):"incremental"===t.change&&(t.updatedVertices.forEach((t=>{const i=(t-1+this._model.path.length)%this._model.path.length;this._updatePathSegment(e,t),this._updatePathSegment(e,i),this._updateVertexHandle(e,t),this._updateArea(e),this._updatePerimeterSegments(e),this._updateProjectionLines(e),this._updateLaserLine(),this._updateLabels(e)})),t.updatedVertices.has(this._model.path.length-1)&&this._updateCursorSegment());const i=t.change;return t.clear(),i},D._updateAfterSyncViewData=function(e){const t=this._model.viewData;!("full"===this._syncViewData(t))&&e&&e(t)},D._updateOrigin=function(e){M.midpoint(e.positionsRenderCoords,this._origin),o.identity(this._originTransform),o.translate(this._originTransform,this._originTransform,this._origin)},D._updateAll=function(e){this._updateOrigin(e),this._updatePathLength(e.path.length),this._updatePathSegments(e),this._updatePerimeterSegments(e),this._updateHandles(e),this._updateArea(e),this._updateProjectionLines(e),this._updateLabels(e),this._updateLaserLine()},D._updateCameraDependent=function(e){this._updateHandles(e),this._updateProjectionLines(e),this._updateLabels(e)},D._updatePathLength=function(e){this._resizeObject3DArray(this._pathSegmentObjects,e),this._resizeObject3DArray(this._perimeterSegmentObjects,e),this._resizeManipulatorArray(this.vertexManipulators,e),M.resizeArray(this._pathLabelSegments,e,(()=>new y)),M.resizeArray(this._perimeterLabelSegments,e,(()=>new y))},D._updatePathSegments=function(e){for(let t=0;t<this._pathSegmentObjects.length;++t)this._updatePathSegment(e,t);this._updateCursorSegment()},D._updatePathSegment=function(e,t){const i=e.path,n=this._pathSegmentObjects[t];e.validMeasurement||t<i.length-1?(this._createInterpolatedLineGeometry(n,e.intersectingSegments.has(t)?this._intersectingPathLineMaterial:this._pathLineMaterial,"path-segment",e.positionsRenderCoords[t],e.positionsRenderCoords[(t+1)%i.length],this._origin,this._originTransform,this._model.measurementMode,this._pathLabelSegments[t],e.validMeasurement?"center":"end"),this._addObject3D(n)):(n.removeAllGeometries(),this._removeObject3D(n))},D._updateCursorSegment=function(){const e=this._sceneView.renderCoordsHelper,t=this._model.path,i=this._cursorSegmentObject;t.length>0&&"drawing"===this._model.state&&this._model.cursorPoint?(e.toRenderCoords(t.back,this._tempStartPosition),e.toRenderCoords(this._model.cursorPoint,this._tempEndPosition),this._createInterpolatedLineGeometry(i,this._pathLineMaterial,"path-segment",this._tempStartPosition,this._tempEndPosition,this._origin,this._originTransform,this._model.measurementMode,this._cursorSegmentLengthLabelSegment,"end"),this._addObject3D(i)):(i.removeAllGeometries(),this._removeObject3D(i))},D._updatePerimeterSegments=function(e){for(let t=0;t<this._perimeterSegmentObjects.length;++t)this._updatePerimeterSegment(e,t)},D._updatePerimeterSegment=function(e,t){const i=e.path,n=this._perimeterSegmentObjects[t];e.validMeasurement&&"geodesic"!==this._model.measurementMode?(this._updatePerimeterSegmentObject(n,e.positionsFittedRenderCoords[t],e.positionsFittedRenderCoords[(t+1)%i.length],this._origin,this._originTransform,e.intersectingSegments.has(t),this._perimeterLabelSegments[t]),this._addObject3D(n)):(n.removeAllGeometries(),this._removeObject3D(n))},D._updatePerimeterSegmentObject=function(e,t,i,n,r,s,a){this._createInterpolatedLineGeometry(e,s?this._intersectingPerimeterLineMaterial:this._perimeterLineMaterial,"perimeter-segment",t,i,n,r,this._model.measurementMode,a)},D._updateHandles=function(e){for(let t=0;t<this.vertexManipulators.length;++t)this._updateVertexHandle(e,t);this._updateCursorHandle()},D._updateVertexHandle=function(e,t){const{manipulator:i}=this.vertexManipulators[t];i.renderLocation=e.positionsRenderCoords[t]},D._updateCursorHandle=function(){const e=this._cursorManipulator;"drawing"===this._model.state&&this._model.cursorPoint?(e.available=!0,e.location=this._model.cursorPoint):e.available=!1},D._updateArea=function(e){switch(this._model.measurementMode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}},D._updateAreaEuclidean=function(e){const t=this._areaObject;if(e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices){const i=[],s=n.create();e.positionsFittedRenderCoords.forEach((e=>{r.subtract(s,e,this._origin),i.push(s[0],s[1],s[2])}));const a=[];e.positionsProjected.forEach((e=>{a.push(e[0],e[1])}));const o=new d.GeometryData({position:{size:3,data:i},uv0:{size:2,data:a}},{position:e.triangleIndices,uv0:e.triangleIndices}),l=new u(o,"area");t.removeAllGeometries(),t.addGeometry(l,this._checkerBoardMaterial,this._originTransform),this._addObject3D(t),this._checkerBoardMaterial.setParameterValues({size:[e.checkerSize,e.checkerSize]})}else t.removeAllGeometries(),this._removeObject3D(t)},D._updateAreaGeodesic=function(){const e=this._areaObject;e.removeAllGeometries(),this._removeObject3D(e)},D._updateProjectionLines=function(e){const t=e.path;this._resizeObject3DArray(this._projectionLineObjects,t.length);for(let i=0;i<t.length;++i)this._updateProjectionLine(e,i)},D._updateProjectionLine=function(e,t){const i=this._projectionLineObjects[t];if(i.removeAllGeometries(),e.validMeasurement&&"euclidean"===this._model.measurementMode){const e=n.create();r.subtract(e,this._model.viewData.positionsRenderCoords[t],this._origin);const s=n.create();r.subtract(s,this._model.viewData.positionsFittedRenderCoords[t],this._origin);const a=new u(_.createPolylineGeometry([e,s]),"projected-line");i.addGeometry(a,this._projectionLineMaterial,this._originTransform),this._addObject3D(i)}else this._removeObject3D(i)},D._updateLabels=function(e){const t=this._sceneView.state.camera,i=this._params.labelDistance,n=this._model,r="geodesic"===n.measurementMode,s="drawing"===n.state,a=(e,t)=>e.visible&&t.visible&&this._sceneView.overlay.overlaps(e.textItem,t.textItem);{const i=this._areaLabel,r=j.positionLabelOnPoint(i,e.areaCentroid,t);i.text=n.areaLabel,i.visible=r&&e.validMeasurement&&0===e.intersectingSegments.size&&null!=n.areaLabel}{const r=this._pathLengthLabel,a=this._pathLabelSegments[e.pathLengthLabelSegmentIndex],o=this._cursorSegmentLengthLabelSegment,l=j.positionLabelOnCorner(r,a,o,i,t);r.text=n.pathLengthLabel,r.visible=l&&s&&n.path.length>0}{const e=this._cursorSegmentLengthLabel,r=this._cursorSegmentLengthLabelSegment,a=j.positionLabelOnSegment(e,r,i,"bottom",t);e.text=n.cursorSegmentLengthLabel,e.visible=a&&s&&n.cursorSegmentLength&&0!==n.cursorSegmentLength.value}a(this._cursorSegmentLengthLabel,this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),a(this._pathLengthLabel,this._areaLabel)&&(this._pathLengthLabel.visible=!1);{const s=this._perimeterLengthLabel;if(n.validMeasurement&&0===e.intersectingSegments.size)for(let o=0;o<e.path.length;++o){const l=(e.perimeterLengthLabelSegmentIndex+o)%e.path.length,h=r?this._pathLabelSegments[l]:this._perimeterLabelSegments[l],c=j.positionLabelOnSegment(s,h,i,"top",t);if(s.text=n.perimeterLengthLabel,s.visible=c,!a(s,this._areaLabel))break;s.visible=!1}else s.visible=!1}},D._getFocusPoint=function(){const e=this._model,i=this._model.lastDraggedVertex;switch(e.state){case"drawing":return e.cursorPoint?e.cursorPoint:e.path.vertex(t.isSome(i)?i:e.path.length-1);case"editing":return t.isSome(i)?e.path.vertex(i):null;default:return e.cursorPoint}},D._updateLaserLine=function(){const e=this._model,t=this._params.laserLineEnabled&&"measured"!==e.state&&e.active;this._laserLineRenderer.pointDistanceEnabled=!1,this._laserLineRenderer.lineVerticalPlaneEnabled=!1;const i=this._getFocusPoint();if(t&&i){const e=this._tempHandlePosition;this._sceneView.renderCoordsHelper.toRenderCoords(i,e),this._laserLineRenderer.heightManifoldTarget=e,this._laserLineRenderer.heightManifoldEnabled=!0}else this._laserLineRenderer.heightManifoldEnabled=!1},D._addObject3D=function(e){e.parentLayer||(this._layer.addObject(e),this._sceneView._stage.add(1,e))},D._removeObject3D=function(e){e.parentLayer&&(this._layer.removeObject(e),this._sceneView._stage.remove(1,e.id))},D._resizeObject3DArray=function(e,t){M.resizeArray(e,t,(()=>new p),(e=>{this._removeObject3D(e)}))},D._resizeManipulatorArray=function(e,t){M.resizeArray(e,t,(()=>{const e=S.createSphereManipulator(this._sceneView,this._params.handleColor,this._params.handleOpacity);e.radius=this._params.handleRadius;return{id:this._manipulators.add(e),manipulator:e}}),(({manipulator:e})=>{this._manipulators.remove(e)}))},D._createInterpolatedLineGeometry=function(e,t,i,n,s,a,o,l,h,d){const p=this._sceneView.renderCoordsHelper,m=[],g=[],L=(e,t)=>{const i=c.sv3d.get();r.subtract(i,e,a),m.push(i),g.push(t)};if("euclidean"===l){const e=c.sv3d.get();M.midpoint([n,s],e);const t=c.sv3d.get();p.worldUpAtPosition(e,t),L(n,t),L(s,t),h&&h.update(n,s,d)}else{const e=this._getSegmentInterpolator(n,s),t=this._params.lineSubdivisions+1&-2;let i=null,r=null,a=t/2-1,o=t/2;"start"===d?(a=0,o=1):"end"===d&&(a=t-2,o=t-1);for(let n=0;n<t;++n){const s=n/(t-1),l=c.sv3d.get(),h=c.sv3d.get();e.eval(s,l),p.worldUpAtPosition(l,h),n===a&&(i=l),n===o&&(r=l),L(l,h)}h&&h.update(i,r,d)}const b=new u(_.createPolylineGeometry(m,g),i);e.removeAllGeometries(),e.addGeometry(b,t,o)},D._getSegmentInterpolator=function(e,t){const i=this._sceneView.spatialReference;if(l.canProjectWithoutEngine(i,a.getSphericalPCPF(i))){const i=this._sceneView.renderCoordsHelper.spatialReference;return new C.Spherical(e,t,i,i)}return new C.Linear(e,t)},D._initializeListeners=function(){this._listenerHandles=new s,this._listenerHandles.add([this._model.watch(["state","lastDraggedVertex"],(()=>this._updateLaserLine())),this._model.watch("cursorPoint",(()=>this._updateAfterSyncViewData((e=>{this._updateCursorSegment(),this._updateCursorHandle(),"drawing"===this._model.state&&this._updateLabels(e),this._updateLaserLine()})))),this._sceneView.state.watch("camera",(()=>this._updateAfterSyncViewData((()=>this._updateCameraDependent(this._model.viewData))))),this._model.watch(["unit","measurementMode"],(()=>this._updateAll(this._model.viewData))),this._model.watch(["areaLabel","cursorSegmentLengthLabel","pathLengthLabel","perimeterLengthLabel"],(()=>{this._updateLabels(this._model.viewData)})),this._model.watch(["active"],(()=>{this._updateLaserLine(),this._syncViewData(this._model.viewData)})),this._model.watch("viewData",(e=>this._syncViewData(e)))])},D._destroyListeners=function(){this._listenerHandles.destroy(),this._listenerHandles=null},e._createClass(R,[{key:"requiresCursorPoint",get:function(){return("initial"===this._model.state||"drawing"===this._model.state)&&this._model.active}},{key:"visible",get:function(){return this._visible},set:function(e){e?this.show():this.hide()}},{key:"testData",get:function(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel},laserLineRenderer:this._laserLineRenderer}}}]),R}();return R._handleGeometry=new u(_.createSphereGeometry(1,32,32),"handle"),function(e){e.PickRequest=function(){};e.PickResult=function(e=null,t=null,i=null){this.type=e,this.scenePoint=t,this.mapPoint=i}}(R||(R={})),R}));
