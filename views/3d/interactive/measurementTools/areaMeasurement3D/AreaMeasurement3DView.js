/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../../../../core/Handles.js";import{clone as e}from"../../../../../core/lang.js";import{destroyMaybe as i,isSome as s,isNone as a,unwrap as n}from"../../../../../core/maybe.js";import{watch as r,sync as l}from"../../../../../core/reactiveUtils.js";import{screenPointObjectToArray as o}from"../../../../../core/screenUtils.js";import{c as h}from"../../../../../chunks/vec3f64.js";import{createSphereManipulator as d}from"../../manipulatorUtils.js";import{PickResult as u}from"../support/PickRequest.js";import{LaserlineVisualElement as p}from"../../visualElements/LaserlineVisualElement.js";import _ from"../../../webgl-engine/lib/GeometryUtil.js";import{newIntersector as c}from"../../../webgl-engine/lib/Intersector.js";import{StoreResults as m}from"../../../webgl-engine/lib/IntersectorInterfaces.js";import{ManipulatorCollection as g}from"../../../../interactive/ManipulatorCollection.js";const w={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};class y{constructor(t){this.vertexManipulators=[],this._analysisViewData=null,this._destroyed=!1,this._isManipulatorsOwner=!0,this._visible=!0,this._laserLine=null,this._cursorManipulator=null,this._listenerHandles=null,this._tempHandlePosition=h();const{analysisViewData:e,manipulators:i,toolState:s,view:a,visible:n}=t;this._analysisViewData=e,this._toolState=s,null!=i?(this._manipulators=i,this._isManipulatorsOwner=!1):this._manipulators=new g,this._view=a;const r=this._style=L(w,t.style);this._intersector=c(a.state.viewingMode),this._intersector.options.store=m.MIN;const l=d(a,r.handleColor,r.handleOpacity);l.available=!1,l.radius=r.handleRadius,l.interactive=!1,this._manipulators.add(l),this._cursorManipulator=l,this._laserLine=new p({view:a,attached:!0,style:{glowColor:r.laserLineGlowColor,glowWidth:r.laserLineGlowWidth,glowFalloff:r.laserLineGlowFalloff,innerColor:r.laserLineInnerColor,innerWidth:r.laserLineInnerWidth,globalAlpha:r.laserLineGlobalAlpha}}),this._updateVisibility(n||!0)}destroy(){this._listenerHandles=i(this._listenerHandles),this._isManipulatorsOwner?this._manipulators=i(this._manipulators):this._manipulators=null,this._laserLine=i(this._laserLine),this._destroyed=!0}get destroyed(){return this._destroyed}get visible(){return this._visible}set visible(t){t?this.show():this.hide()}get testData(){const t=this._laserLine.testData;return{laserLineRenderer:s(t)?{heightManifoldEnabled:t.heightManifoldEnabled,heightManifoldTarget:t.heightManifoldTarget,pointDistanceEnabled:t.pointDistanceEnabled,pointDistanceOrigin:t.pointDistanceOrigin,pointDistanceTarget:t.pointDistanceTarget,lineVerticalPlaneEnabled:t.lineVerticalPlaneEnabled}:{heightManifoldEnabled:!1,heightManifoldTarget:null,pointDistanceEnabled:!1,pointDistanceOrigin:null,pointDistanceTarget:null,lineVerticalPlaneEnabled:!1}}}show(){this._setVisibility(!0)}hide(){this._setVisibility(!1)}_setVisibility(t){this._destroyed||this._visible===t||this._updateVisibility(t)}_updateVisibility(t){this._visible=t,this._laserLine.visible=t,t?(this._initializeListeners(),this._updateAll()):(this._destroyListeners(),this.vertexManipulators.forEach((t=>{this._removeVertexManipulator(t.manipulator)})),this.vertexManipulators=[],this._view.cursor=null)}vertexHandleAt(t,e){const i=this._manipulators.intersect(t,e);return s(i)?i.manipulator.metadata:null}pick(t){const e=this._view.spatialReference,i=o(t.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(i,this._intersector);const s=this._intersector.results.min,n=h();if(!s.getIntersectionPoint(n))return null;const r=this._view.renderCoordsHelper.fromRenderCoords(n,e);return a(r)?null:new u(n,r)}_updateAll(){this._visible&&(this._updateVertexManipulators(),this._updateLaserLine())}_createVertexManipulator(){const t=d(this._view,this._style.handleColor,this._style.handleOpacity);t.radius=this._style.handleRadius;return{id:this._manipulators.add(t),manipulator:t}}_removeVertexManipulator(t){this._manipulators.remove(t)}_updateVertexManipulators(){const{viewData:t}=this._analysisViewData,e=this._analysisViewData.path?this._analysisViewData.path.vertices:[],i=this.vertexManipulators;f(i,e.length,(()=>this._createVertexManipulator()),(t=>this._removeVertexManipulator(t.manipulator))),i.forEach(((i,s)=>{i.manipulator.metadata=e[s],i.manipulator.renderLocation=t.positionsRenderCoords[s]})),"drawing"===this._toolState.polygonState&&s(this._analysisViewData.cursorPoint)?(this._cursorManipulator.available=!0,this._cursorManipulator.location=this._analysisViewData.cursorPoint):this._cursorManipulator.available=!1}_getFocusPoint(){const{lastDraggedVertex:t}=this._analysisViewData;switch(this._toolState.polygonState){case"drawing":return s(this._analysisViewData.cursorPoint)?this._analysisViewData.cursorPoint:s(t)?this._analysisViewData.path.getVertexPositionAsPoint(t):n(this._analysisViewData.path.lastPoint);case"editing":return s(t)?this._analysisViewData.path.getVertexPositionAsPoint(t):null;default:return this._analysisViewData.cursorPoint}}_updateLaserLine(){const t=this._style.laserLineEnabled&&"measured"!==this._toolState.polygonState&&this._toolState.active,e=this._getFocusPoint();if(t&&s(e)){const t=this._tempHandlePosition;this._view.renderCoordsHelper.toRenderCoords(e,t),this._laserLine.heightManifoldTarget=t}else this._laserLine.heightManifoldTarget=null}_initializeListeners(){this._listenerHandles=new t,this._listenerHandles.add([r((()=>this._toolState.polygonState),(()=>this._updateLaserLine())),r((()=>this._analysisViewData.viewData),(()=>this._updateAll()),l),r((()=>({lastDraggedVertex:this._analysisViewData.lastDraggedVertex,cursorPoint:this._analysisViewData.cursorPoint})),(()=>this._updateLaserLine())),r((()=>this._toolState.active),(()=>this._updateAll()))])}_destroyListeners(){this._listenerHandles=i(this._listenerHandles)}}function L(t,i){return{...t,...e(i)}}function f(t,e,i,s){for(;t.length<e;)t.push(i());if(s)for(;t.length>e;){s(t.pop())}else t.length=e}y._handleGeometry=_.createSphereGeometry(1,32,32);export{L as copyParameter,y as default,f as resizeArray};
