/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../../../chunks/_rollupPluginBabelHelpers","../../../../../core/maybe","../../../../../core/screenUtils","../../../../../chunks/vec3f64","../../../../../chunks/vec3","../../../../../core/Handles","../../../../../chunks/mat4","../../../../../chunks/mat4f64","../../../webgl-engine/lib/GeometryUtil","../../../webgl-engine/lib/Intersector","../../../webgl-engine/materials/lineStippleUtils","../../visualElements/LaserlineVisualElement","../../../../interactive/ManipulatorCollection","../../editingTools/dragEventPipeline3D","../../manipulatorUtils","../support/viewUtils","../../visualElements/LabelVisualElement","../../visualElements/LineVisualElement","../../visualElements/MeasurementAreaVisualElement","../../visualElements/support/Segment"],(function(e,t,i,s,n,r,a,l,o,h,c,m,u,_,d,p,g,L,b,v){"use strict";const w={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25};let f=function(){function o(e,t=new u.ManipulatorCollection,i={}){this._model=e,this._manipulators=t,this.vertexManipulators=[],this._visible=!1,this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._laserLine=null,this._measurementArea=null,this._areaLabel=null,this._pathLengthLabel=null,this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel=null,this._cursorManipulator=null,this._pathSegments=[],this._perimeterSegments=[],this._cursorSegment=null,this._listenerHandles=null,this._origin=s.create(),this._originTransform=l.create(),this._tempHandlePosition=s.create(),this._cursorPositionRenderSpace=s.create(),this._view=this._model.sceneView,this._params=p.copyParameter(w,i),this._intersector=new h.Intersector(this._view.state.mode),this._intersector.options.store=0;const n=d.createSphereManipulator(this._view,this._params.handleColor,this._params.handleOpacity);n.available=!1,n.radius=this._params.handleRadius,n.interactive=!1,this._manipulators.add(n),this._cursorManipulator=n,this._path=new L.LineVisualElement({view:this._view,attached:!0,width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPath=new L.LineVisualElement({view:this._view,attached:!0,width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._perimeter=new L.LineVisualElement({view:this._view,attached:!0,width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPerimeter=new L.LineVisualElement({view:this._view,attached:!0,width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._projectionLines=new L.LineVisualElement({view:this._view,attached:!0,width:this._params.projectionLineWidth,color:this._params.projectionLineColor,stipplePattern:c.createStipplePatternSimple(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4}),this._laserLine=new m.LaserlineVisualElement({view:this._view,attached:!0,style:{glowColor:this._params.laserLineGlowColor,glowWidth:this._params.laserLineGlowWidth,glowFalloff:this._params.laserLineGlowFalloff,innerColor:this._params.laserLineInnerColor,innerWidth:this._params.laserLineInnerWidth,globalAlpha:this._params.laserLineGlobalAlpha}}),this._measurementArea=new b.MeasurementAreaVisualElement({view:this._view,attached:!0,color1:this._params.areaColor1,color2:this._params.areaColor2}),this._areaLabel=new g.LabelVisualElement({view:this._view,attached:!0,fontSize:16}),this._pathLengthLabel=new g.LabelVisualElement({view:this._view,attached:!0,fontSize:12}),this._cursorSegmentLengthLabel=new g.LabelVisualElement({view:this._view,attached:!0,fontSize:12}),this._perimeterLengthLabel=new g.LabelVisualElement({view:this._view,attached:!0,fontSize:12})}var f=o.prototype;return f.destroy=function(){this.hide(),this._laserLine.destroy(),this._laserLine=null,this._measurementArea.destroy(),this._measurementArea=null,this._path.destroy(),this._path=null,this._intersectedPath.destroy(),this._intersectedPath=null,this._perimeter.destroy(),this._perimeter=null,this._intersectedPerimeter.destroy(),this._intersectedPerimeter=null,this._areaLabel.destroy(),this._areaLabel=null,this._pathLengthLabel.destroy(),this._pathLengthLabel=null,this._cursorSegmentLengthLabel.destroy(),this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel.destroy(),this._perimeterLengthLabel=null},f.show=function(){this._visible||(this._visible=!0,this._path.visible=!0,this._intersectedPath.visible=!0,this._perimeter.visible=!0,this._intersectedPerimeter.visible=!0,this._projectionLines.visible=!0,this._laserLine.visible=!0,this._measurementArea.visible=!0,this._areaLabel.visible=!0,this._pathLengthLabel.visible=!0,this._cursorSegmentLengthLabel.visible=!0,this._perimeterLengthLabel.visible=!0,this._initializeListeners(),this._updateAll(this._model.viewData))},f.hide=function(){this._visible&&(this._visible=!1,this._path.visible=!1,this._intersectedPath.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1,this._intersectedPerimeter.visible=!1,this._laserLine.visible=!1,this._measurementArea.visible=!1,this._areaLabel.visible=!1,this._pathLengthLabel.visible=!1,this._cursorSegmentLengthLabel.visible=!1,this._perimeterLengthLabel.visible=!1,this._destroyListeners(),this.vertexManipulators.forEach((e=>{this._removeVertexManipulator(e.manipulator)})),this.vertexManipulators=[],this._view.cursor=null)},f.vertexHandleAt=function(e,i){const s=this._manipulators.intersect(e,i);return t.isSome(s)?s.manipulator.metadata:null},f.manipulatorToVertex=function(e){return e.metadata},f.pick=function(e){const n=this._view.spatialReference,r=i.screenPointObjectToArray(e.screenPoint);this._view.sceneIntersectionHelper.intersectToolIntersectorScreen(r,this._intersector);const a=this._intersector.results.min,l=s.create();if(!a.getIntersectionPoint(l))return new o.PickResult;const h=this._view.renderCoordsHelper.fromRenderCoords(l,n);if(t.isNone(h))return new o.PickResult;const c="TerrainRenderer"===a.intersector?"surface":"feature";return new o.PickResult(c,l,h)},f.overlappingHandles=function(e,t){return p.pointToPointScreenDistance(e,t,this._view)<=this._params.handleRadius},f.screenToMap3D=function(){return _.screenToMap3D(this._view)},f._updateOrigin=function(e){p.midpoint(e.positionsRenderCoords,this._origin),a.identity(this._originTransform),a.translate(this._originTransform,this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform},f._updateAll=function(e){this._visible&&(this._updateOrigin(e),this._updatePathSegments(e),this._updatePerimeterSegments(e),this._updateVertexManipulators(e),this._updateArea(e),this._updateProjectionLines(e),this._updateLabels(e),this._updateLaserLine())},f._createSegments=function(e,t){const i=e.path,s=this._view.renderCoordsHelper.spatialReference,n=this._model.measurementMode,r=[],a=[],l=[],o=e.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<o;++h){const o=e[t][h],c=e[t][(h+1)%i.numVertices];let m=null;switch(n){case"euclidean":m=new v.EuclideanSegment(o,c);break;case"geodesic":m=new v.GeodesicSegment(o,c,s)}e.intersectingSegments.has(h)?l.push(m):a.push(m),r.push(m)}return{all:r,nonIntersecting:a,intersecting:l}},f._updatePathSegments=function(e){const i=this._createSegments(e,"positionsRenderCoords"),s=e.path,n=this._view.renderCoordsHelper,r=n.spatialReference,a=this._model.measurementMode;if(this._cursorSegment=null,s.numVertices>0&&"drawing"===this._model.state&&t.isSome(this._model.cursorPoint)){if(n.toRenderCoords(this._model.cursorPoint,this._cursorPositionRenderSpace)){const t=e.positionsRenderCoords[s.numVertices-1],n=this._cursorPositionRenderSpace;let l=null;switch(a){case"euclidean":l=new v.EuclideanSegment(t,n);break;case"geodesic":l=new v.GeodesicSegment(t,n,r)}i.nonIntersecting.push(l),this._cursorSegment=l}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._pathSegments=i.all},f._updatePerimeterSegments=function(e){const t=this._createSegments(e,"positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._perimeterSegments=t.all},f._createVertexManipulator=function(){const e=d.createSphereManipulator(this._view,this._params.handleColor,this._params.handleOpacity);e.radius=this._params.handleRadius;return{id:this._manipulators.add(e),manipulator:e}},f._removeVertexManipulator=function(e){this._manipulators.remove(e)},f._updateVertexManipulators=function(e){const i=this._model.path.vertices,s=this.vertexManipulators;p.resizeArray(s,i.length,(()=>this._createVertexManipulator()),(e=>this._removeVertexManipulator(e.manipulator))),s.forEach(((t,s)=>{t.manipulator.metadata=i[s],t.manipulator.renderLocation=e.positionsRenderCoords[s]})),"drawing"===this._model.state&&t.isSome(this._model.cursorPoint)?(this._cursorManipulator.available=!0,this._cursorManipulator.location=this._model.cursorPoint):this._cursorManipulator.available=!1},f._updateArea=function(e){switch(this._model.measurementMode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}},f._updateAreaEuclidean=function(e){e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=!0,this._perimeter.visible=!0,this._projectionLines.visible=!0):(this._measurementArea.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1)},f._updateAreaGeodesic=function(){this._measurementArea.visible=!1,this._perimeter.visible=!1,this._projectionLines.visible=!1},f._updateProjectionLines=function(e){const t=e.path;if(t.numVertices>0&&e.validMeasurement&&"euclidean"===this._model.measurementMode){const e=[];for(let i=0;i<t.numVertices;++i){const t=s.create();n.subtract(t,this._model.viewData.positionsRenderCoords[i],this._origin);const r=s.create();n.subtract(r,this._model.viewData.positionsFittedRenderCoords[i],this._origin),e.push([t,r])}this._projectionLines.geometry=e}else this._projectionLines.geometry=null},f._updateLabels=function(e){if(!this._visible)return;const i=this._model,s=this._view,n="drawing"===i.state;if(this._areaLabel.geometry=s.renderCoordsHelper.fromRenderCoords(e.areaCentroid,s.spatialReference),this._areaLabel.text=i.areaLabel,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&null!=i.areaLabel,e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const s=this._pathSegments[e.pathLengthLabelSegmentIndex],r=t.isSome(this._cursorSegment)?this._cursorSegment:S;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:s,right:r},this._pathLengthLabel.text=i.pathLengthLabel,this._pathLengthLabel.visible=n&&i.path.numVertices>0}else this._pathLengthLabel.visible=!1;this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=t.isSome(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=i.cursorSegmentLengthLabel,this._cursorSegmentLengthLabel.visible=n&&!!i.cursorSegmentLength&&0!==i.cursorSegmentLength.value,this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1),this._updatePerimeterLabel(this._model.viewData)},f._updatePerimeterLabel=function(e){const t=this._model,i="geodesic"===t.measurementMode;if(t.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=t.perimeterLengthLabel,this._perimeterLengthLabel.visible=!0;let s=!0;for(let t=0;t<e.path.numVertices;++t){const n=(e.perimeterLengthLabelSegmentIndex+t)%e.path.numVertices,r=i?this._pathSegments[n]:this._perimeterSegments[n];if(s=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;s=!1}this._perimeterLengthLabel.visible=s}else this._perimeterLengthLabel.visible=!1},f._getFocusPoint=function(){const e=this._model,i=this._model.lastDraggedVertex;switch(e.state){case"drawing":return t.isSome(e.cursorPoint)?e.cursorPoint:t.isSome(i)?e.path.getVertexPositionAsPoint(i):t.unwrap(e.path.lastPoint);case"editing":return t.isSome(i)?e.path.getVertexPositionAsPoint(i):null;default:return e.cursorPoint}},f._updateLaserLine=function(){const e=this._model,i=this._params.laserLineEnabled&&"measured"!==e.state&&e.active,s=this._getFocusPoint();if(i&&t.isSome(s)){const e=this._tempHandlePosition;this._view.renderCoordsHelper.toRenderCoords(s,e),this._laserLine.heightManifoldTarget=e}else this._laserLine.heightManifoldTarget=null},f._initializeListeners=function(){this._listenerHandles=new r,this._listenerHandles.add([this._model.watch(["state","lastDraggedVertex"],(()=>this._updateLaserLine())),this._model.watch(["cursorPoint","unit","measurementMode","active","viewData"],(()=>this._updateAll(this._model.viewData))),this._model.watch(["areaLabel","cursorSegmentLengthLabel","pathLengthLabel","perimeterLengthLabel"],(()=>{this._updateAll(this._model.viewData)})),this._view.state.watch("camera",(()=>this._updatePerimeterLabel(this._model.viewData)))])},f._destroyListeners=function(){this._listenerHandles.destroy(),this._listenerHandles=null},e._createClass(o,[{key:"requiresCursorPoint",get:function(){return("initial"===this._model.state||"drawing"===this._model.state)&&this._model.active}},{key:"visible",get:function(){return this._visible},set:function(e){e?this.show():this.hide()}},{key:"testData",get:function(){const e=this._laserLine.testData;return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel},laserLineRenderer:t.isSome(e)?{heightManifoldEnabled:e.heightManifoldEnabled,heightManifoldTarget:e.heightManifoldTarget,pointDistanceEnabled:e.pointDistanceEnabled,pointDistanceOrigin:e.pointDistanceOrigin,pointDistanceTarget:e.pointDistanceTarget,lineVerticalPlaneEnabled:e.lineVerticalPlaneEnabled}:{heightManifoldEnabled:!1,heightManifoldTarget:null,pointDistanceEnabled:!1,pointDistanceOrigin:null,pointDistanceTarget:null,lineVerticalPlaneEnabled:!1}}}}]),o}();f._handleGeometry=o.createSphereGeometry(1,32,32),function(e){let t=function(){};e.PickRequest=t;let i=function(e=null,t=null,i=null){this.type=e,this.scenePoint=t,this.mapPoint=i};e.PickResult=i}(f||(f={}));const S=new v.EuclideanSegment(s.create(),s.create());return f}));
