/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../../core/Handles.js";import{unwrap as t,isSome as r,isNone as s}from"../../../../core/maybe.js";import{watch as i}from"../../../../core/reactiveUtils.js";import{createScreenPointArray as o}from"../../../../core/screenUtils.js";import{i as a,g as c,f as n,a as h,b as l}from"../../../../chunks/vec2.js";import{k as d,c as m,n as u,b as _,a as p}from"../../../../chunks/vec3.js";import{c as f,f as g}from"../../../../chunks/vec3f64.js";import{g as b,c as j}from"../../../../chunks/vec4.js";import{f as y}from"../../../../chunks/vec4f32.js";import{Object3DVisualElement as w}from"./Object3DVisualElement.js";import x from"../../webgl-engine/lib/GeometryUtil.js";import{RenderOccludedFlag as G}from"../../webgl-engine/lib/Material.js";import{VertexAttribute as O}from"../../webgl-engine/lib/VertexAttribute.js";import{RibbonLineMaterial as R}from"../../webgl-engine/materials/RibbonLineMaterial.js";class v extends w{constructor(t){super(t),this._handles=new e,this._location=f(),this._direction=g(1,0,0),this._width=1,this._offset=1,this._length=18,this._color=y(1,0,1,1),this._renderOccluded=G.OccludeAndTransparent,this.applyProps(t)}get location(){return this._location}set location(e){d(this._location,e)||(m(this._location,e),this._updateGeometry())}get direction(){return this._direction}set direction(e){d(this._direction,e)||(m(this._direction,e),this._updateGeometry())}setDirectionFromPoints(e,t){u(this._direction,_(this._direction,t,e)),this._updateGeometry()}get width(){return this._width}set width(e){e!==this._width&&(this._width=e,this._updateMaterial())}get offset(){return this._offset}set offset(e){e!==this._offset&&(this._offset=e,this._updateGeometry())}get length(){return this._length}set length(e){e!==this._length&&(this._length=e,this._updateGeometry())}get color(){return this._color}set color(e){b(e,this._color)||(j(this._color,e),this._updateMaterial())}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}createExternalResources(){const e=new R(this.materialParameters);this._handles.add(i((()=>this.view.state.camera),(()=>{this._updateGeometry()}))),this._externalResources={material:e}}destroyExternalResources(){this._handles.removeAll(),this._externalResources=null}createGeometries(e){const r=x.createPolylineGeometry([f(),f()]),s=x.createPolylineGeometry([f(),f()]),i=t(this._externalResources).material;e.addGeometry(r,i),e.addGeometry(s,i),this._updateVertices(e)}forEachExternalMaterial(e){r(this._externalResources)&&e(this._externalResources.material)}_updateMaterial(){if(s(this._externalResources))return;this._externalResources.material.setParameters(this.materialParameters)}get materialParameters(){return{width:this._width,color:this._color,renderOccluded:this._renderOccluded}}_updateGeometry(){const e=this.object;s(e)||this._updateVertices(e)}_updateVertices(e){const t=this.view.state.camera;t.projectToScreen(this.location,V),p(P,this.location,this.direction),t.projectToScreen(P,A),a(A,c(A,A,V)),this._updateVertexAttributes(t,e,0,V,A,1),this._updateVertexAttributes(t,e,1,V,A,-1)}_updateVertexAttributes(e,t,r,s,i,o){const a=t.geometryRecords[r],c=a.geometry.getMutableAttribute(O.POSITION).data,d=n(M,h(M,i[1]*o,i[0]*-o),this.offset+this.width/2),m=l(k,l(k,l(k,s,n(k,i,this.length/2)),d),d),u=l(E,m,n(E,i,-this.length));e.unprojectFromScreen(m,P),c[0]=P[0],c[1]=P[1],c[2]=P[2],e.unprojectFromScreen(u,P),c[3]=P[0],c[4]=P[1],c[5]=P[2],t.geometryVertexAttrsUpdated(a)}}const P=f(),V=o(),A=o(),M=o(),k=o(),E=o();export{v as ParallelLineVisualElement};
