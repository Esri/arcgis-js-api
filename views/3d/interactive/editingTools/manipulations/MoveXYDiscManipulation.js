/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../../../../Color.js";import{unwrap as e}from"../../../../../core/maybe.js";import{u as i}from"../../../../../chunks/mat4.js";import{c as a}from"../../../../../chunks/mat4f64.js";import{s as r}from"../../../../../chunks/vec3.js";import{f as s}from"../../../../../chunks/vec3f64.js";import{sv3d as o,sm4d as n}from"../../../../../geometry/support/vectorStacks.js";import{getGraphicEffectiveElevationInfo as l}from"../../../../../support/elevationInfoUtils.js";import{Manipulator3D as p}from"../../Manipulator3D.js";import{screenToMapXYAtLocation as c}from"../dragEventPipeline3D.js";import{ManipulatorType as m}from"../ManipulatorType.js";import{colors as u}from"../settings.js";import{DISC_RADIUS as h,DISC_HEIGHT as d,GEOMETRY_SEGMENTS as _,DISC_COLLISION_RADIUS as f}from"./config.js";import{Manipulation as g}from"./Manipulation.js";import{createGraphicMoveDragPipeline as M}from"./moveUtils.js";import{SnapToScene as j}from"../snapping/SnapToScene.js";import{CullFaceOptions as T}from"../../../webgl-engine/lib/basicInterfaces.js";import S from"../../../webgl-engine/lib/GeometryUtil.js";import{RenderOccludedFlag as v}from"../../../webgl-engine/lib/Material.js";import{ColorMaterial as y}from"../../../webgl-engine/materials/ColorMaterial.js";import{createManipulatorDragEventPipeline as w,dragAtLocation as b,addScreenDelta as k}from"../../../../interactive/dragEventPipeline.js";import{ManipulatorStateFlags as x}from"../../../../interactive/interfaces.js";class E extends g{constructor(t){super(),this._snapToScene=new j,this._discMaterial=this._createMaterial(),this._discMaterialTransparent=this._createMaterial(.5),this._scale=1,this._radius=h,this._view=t.view,this._tool=t.tool,null!=t.snapToScene&&(this.snapToScene=t.snapToScene),null!=t.radius&&(this._radius=t.radius),this._createManipulator(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}destroy(){this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._manipulator=null}forEachManipulator(t){t(this._manipulator,m.TRANSLATE_XY)}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get snapToScene(){return this._snapToScene.enabled}set snapToScene(t){this._snapToScene.enabled=t}get radius(){return this._radius}set radius(t){t!==this._radius&&(this._radius=t,this._updateManipulator())}createGraphicDragPipeline(t,i,a){const r=i.graphic,s=l(r),o=e(r.geometry).spatialReference;return M(i,a,(e=>this.createDragPipeline(((i,a,r,s,o)=>e(i,t(i,a,r,s,o),r)),s,o,r)),this._view.state.viewingMode)}createDragPipeline(t,e,i,a){const r=this._view;return w(this._manipulator,((s,o,n,l,p)=>{const u=o.next(b(r,s.elevationAlignedLocation)).next(c(r,s.elevationAlignedLocation,e,i,a)).next(this._snapToScene.createDragEventPipelineStep(r,e),this._snapToScene.next).next((t=>({...t,manipulatorType:m.TRANSLATE_XY}))).next(k());t(s,u,n,l,p)}))}_updateManipulatorTransform(){const t=i(n.get(),r(o.get(),this.displayScale,this.displayScale,this.displayScale));this._manipulator.modelTransform=t}_createManipulator(){const t=this._view;this._manipulator=new p({view:t,worldSized:!1,autoScaleRenderObjects:!1,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:s(0,0,1)},worldOriented:!0}),this._updateManipulator()}_updateManipulator(){const t=S.createCylinderGeometry(d,1,_,s(0,0,1),s(0,0,0)),e=i(a(),s(this._radius,this._radius,this._radius));this._manipulator.renderObjects=[{geometry:t,material:this._discMaterial,transform:e,stateMask:x.Focused},{geometry:t,material:this._discMaterialTransparent,transform:e,stateMask:x.Unfocused}],this._manipulator.radius=f*(this._radius/h)}_createMaterial(e=1){const i=t.toUnitRGBA(u.main);return i[3]*=e,new y({color:i,transparent:1!==e,cullFace:T.Back,renderOccluded:v.Transparent})}get test(){return{discManipulator:this._manipulator}}}export{E as MoveXYDiscManipulation};
