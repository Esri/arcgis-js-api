/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/Error","../../../../core/maybe","../../../../core/promiseUtils","../../../../core/screenUtils","../../../../chunks/vec2f64","../../../../symbols/callouts/calloutUtils","./ElevationAligners","./elevationAlignmentUtils","./ElevationContext","./Graphics3DObject3DGraphicLayer","./Graphics3DSymbolLayer","./graphicUtils","./placementUtils","./pointUtils","../../webgl-engine/lib/GeometryUtil","../../webgl-engine/lib/TextRenderParameters","../../webgl-engine/lib/TextTextureFactory","../../webgl-engine/materials/HUDMaterial"],(function(e,t,n,r,i,o,a,s,l,c,h,u,d,m,f,p,y,g,v,b){"use strict";const x=[0,0,1];let P=function(e){function d(t,n,r,i){var o;return(o=e.call(this,t,n,r,i)||this)._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},o.ensureDrapedStatus(!1),o}t._inheritsLoose(d,e);var P=d.prototype;return P.doLoad=function(){var e=t._asyncToGenerator((function*(){if(!this._drivenProperties.size){const e=m.validateSymbolLayerSize(this.symbolLayer.size);if(e)throw new n("graphics3dtextsymbollayer:invalid-size",e)}yield this._createTextRenderParameters()}));function r(){return e.apply(this,arguments)}return r}(),P._createTextRenderParameters=function(){var e=t._asyncToGenerator((function*(){const e=this._context.graphicsCoreOwner.view.pixelRatio;this._textRenderParameters=yield g.TextRenderParameters.fromSymbol(this.symbolLayer,e)}));function n(){return e.apply(this,arguments)}return n}(),P.destroy=function(){e.prototype.destroy.call(this)},P.createGraphics3DGraphic=function(e){const t=e.graphic,n=p.placePointOnGeometry(t.geometry);if(r.isNone(n))return this.logger.warn(`unsupported geometry type for text symbol: ${t.geometry.type}`),null;const i=this.symbolLayer.text;if(r.isNone(i)||""===i)return null;const o=s.hasCalloutSupport(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol.verticalOffset:null;if(r.isSome(o)&&!s.textSymbolLayerSupportsVerticalOffset(this.symbolLayer))return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`),null;const a={...E,verticalOffset:o,horizontalPlacement:f.horizontalPlacementFromAlignment(this.symbolLayer.horizontalAlignment),verticalPlacement:f.verticalPlacementFromAlignment(this.symbolLayer.verticalAlignment)};return this._createAs3DShape(t,n,i,a)},P.createLabel=function(e,t,n,i){const o=e.graphic,a=p.placePointOnGeometry(o.geometry);if(r.isNone(a))return this.logger.warn(`unsupported geometry type for label: ${o.geometry.type}`),null;const s=t.text;return!s||/^\s+$/.test(s)?null:this._createAs3DShape(o,a,s,t,n,i)},P.setGraphicElevationContext=function(t,n,r=0){const i=e.prototype.setGraphicElevationContext.call(this,t,n);return i.addOffsetRenderUnits(r),i},P.layerOpacityChanged=function(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1},P.layerElevationInfoChanged=function(e,t){return S(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),c.SymbolUpdateType.UPDATE},P.slicePlaneEnabledChanged=function(e,t){return S(e,t,(e=>{for(const t of e.stageObject.geometryRecords)t.material.setParameters({slicePlaneEnabled:this._context.slicePlaneEnabled})})),!0},P.physicalBasedRenderingChanged=function(){return!0},P.pixelRatioChanged=function(){return!1},P.updateGraphicElevationContext=function(e,t){this.setGraphicElevationContext(e,t.elevationContext,t.metadata.elevationOffset),t.needsElevationUpdates=c.needsElevationUpdates2D(t.elevationContext.mode)||"absolute-height"===t.elevationContext.mode},P._defaultElevationInfoNoZ=function(){return L},P._createAs3DShape=function(e,t,n,s,d,m){const g=this.setGraphicElevationContext(e,new h.ElevationContext,s.elevationOffset),P="polyline"===r.get(e.geometry,"type"),S=e.uid;let L=null,E=null;if(r.isNone(m)){const e=f.textRenderAlignmentFromHorizontalPlacement(s.horizontalPlacement);L=new v(n,e,this._textRenderParameters);let t=null;E=this._context.sharedResources.textures.fromData(L.key,(()=>r.unwrap(L).create()),(()=>{r.isSome(t)&&t.release()}));const o=this._context.stage.renderView.textureRepository.acquire(E.texture.id);if(r.isNone(o)||i.isPromiseLike(o))return E.release(),null;t=o}const _=O(L,s),D={occlusionTest:!0,screenOffset:s.screenOffset,anchorPos:_,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:s.centerOffsetUnits,debugDrawLabelBorder:s.debugDrawLabelBorder,drawInSecondSlot:!0};if(r.isSome(E)&&(D.textureId=E.texture.id),r.isSome(m)&&(D.textureId=m.id),r.isSome(s.verticalOffset)){const{screenLength:e,minWorldLength:t,maxWorldLength:n}=s.verticalOffset;D.verticalOffset={screenLength:o.pt2px(e),minWorldLength:t||0,maxWorldLength:null!=n?n:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources;D.screenSizePerspective=t.overridePadding(this._textRenderParameters.haloSize+this._textRenderParameters.definition.background.padding[0]),D.screenSizePerspectiveAlignment=e}let w;if(P&&(D.shaderPolygonOffset=1e-4),D.slicePlaneEnabled=this._context.slicePlaneEnabled,r.isSome(d)){const e=JSON.stringify(D);w=d.get(e),r.isNone(w)&&(w=new b.HUDMaterial(D),d.add(e,w))}else w=new b.HUDMaterial(D);const G=[w],U=s.translation,z=r.isSome(L)?[L.displayWidth,L.displayHeight]:[0,0],C=s.centerOffset,A=x,T=[0,0],R=[y.createPointGeometry(A,U,null,z,C,T,null)],H=this._context.layer.uid,N=p.createStageObjectForHUD(this._context,t,R,G,g,H,S);if(null===N)return null;const j=new u.Graphics3DObject3DGraphicLayer(this,N.object,R,r.isNone(d)?G:null,E,l.perObjectElevationAligner,g);j.alignedSampledElevation=N.sampledElevation,j.needsElevationUpdates=c.needsElevationUpdates2D(g.mode)||"absolute-height"===g.mode;const{displayWidth:W,displayHeight:k}=r.isSome(L)?L:s;j.getScreenSize=(e=a.create())=>(e[0]=W,e[1]=k,e);const F={labelText:n,elevationOffset:s.elevationOffset};return j.metadata=F,p.extendPointGraphicElevationContext(j,t,this._context.elevationProvider),j},d}(d.Graphics3DSymbolLayer);function S(e,t,n){e&&e.forEach((e=>{const i=t(e);r.isSome(i)&&n(i,e.graphic)}))}function O(e,t){if("baseline"===t.verticalPlacement){const n=f.horizontalPlacementToAnchorX[t.horizontalPlacement],i=r.isSome(e)?e.baselineAnchorY:0;return a.fromValues(n,i)}const n=f.anchorFromPlacements(t.horizontalPlacement,t.verticalPlacement);return f.namedAnchorToHUDMaterialAnchorPos[n]}const L={mode:"relative-to-ground",offset:0},E={text:null,translation:[0,0,0],elevationOffset:0,centerOffset:[0,0,0,1],screenOffset:[0,0],horizontalPlacement:"center",verticalPlacement:"center",verticalOffset:null,centerOffsetUnits:null,debugDrawLabelBorder:!1,displayWidth:0,displayHeight:0};e.Graphics3DTextSymbolLayer=P,e.default=P,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
