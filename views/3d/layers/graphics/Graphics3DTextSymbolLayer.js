/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import{isNone as t,isSome as r,get as n,unwrap as s}from"../../../../core/maybe.js";import{isPromiseLike as i}from"../../../../core/promiseUtils.js";import{pt2px as o}from"../../../../core/screenUtils.js";import{a,f as l}from"../../../../chunks/vec2f64.js";import{hasCalloutSupport as c,textSymbolLayerSupportsVerticalOffset as m}from"../../../../symbols/callouts/calloutUtils.js";import{perObjectElevationAligner as h}from"./ElevationAligners.js";import{SymbolUpdateType as f,needsElevationUpdates2D as d}from"./elevationAlignmentUtils.js";import{ElevationContext as p}from"./ElevationContext.js";import{Graphics3DObject3DGraphicLayer as u}from"./Graphics3DObject3DGraphicLayer.js";import{Graphics3DSymbolLayer as g}from"./Graphics3DSymbolLayer.js";import{validateSymbolLayerSize as y}from"./graphicUtils.js";import{verticalPlacementFromAlignment as v,textRenderAlignmentFromHorizontalPlacement as x,horizontalPlacementToAnchorX as b,anchorFromPlacements as P,namedAnchorToHUDMaterialAnchorPos as O}from"./placementUtils.js";import{placePointOnGeometry as w,createStageObjectForHUD as S,extendPointGraphicElevationContext as j}from"./pointUtils.js";import L from"../../webgl-engine/lib/GeometryUtil.js";import{TextRenderParameters as _}from"../../webgl-engine/lib/TextRenderParameters.js";import E from"../../webgl-engine/lib/TextTextureFactory.js";import{HUDMaterial as z}from"../../webgl-engine/materials/HUDMaterial.js";const C=[0,0,1];class U extends g{constructor(e,t,r,n){super(e,t,r,n),this._elevationOptions={supportsOffsetAdjustment:!0,supportsOnTheGround:!1},this.ensureDrapedStatus(!1)}async doLoad(){if(!this._drivenProperties.size){const t=y(this.symbolLayer.size);if(t)throw new e("graphics3dtextsymbollayer:invalid-size",t)}await this._createTextRenderParameters()}async _createTextRenderParameters(){const e=this._context.graphicsCoreOwner.view.state.pixelRatio;this._textRenderParameters=await _.fromSymbol(this.symbolLayer,e)}destroy(){super.destroy()}createGraphics3DGraphic(e){const n=e.graphic,s=w(n.geometry);if(t(s))return this.logger.warn(`unsupported geometry type for text symbol: ${n.geometry.type}`),null;const i=this.symbolLayer.text;if(t(i)||""===i)return null;const o=c(this.symbol)&&this.symbol.hasVisibleVerticalOffset()?this.symbol.verticalOffset:null;if(r(o)&&!m(this.symbolLayer))return this.logger.errorOncePerTick(`Callouts and vertical offset on text symbols are currently only supported with 'center' horizontal alignment (not with '${this.symbolLayer.horizontalAlignment}' alignment)`),null;const a={...A,verticalOffset:o,horizontalPlacement:this.symbolLayer.horizontalAlignment,verticalPlacement:v(this.symbolLayer.verticalAlignment)};return this._createAs3DShape(n,s,i,a)}createLabel(e,r,n,s){const i=e.graphic,o=w(i.geometry);if(t(o))return this.logger.warn(`unsupported geometry type for label: ${i.geometry.type}`),null;const a=r.text;return!a||/^\s+$/.test(a)?null:this._createAs3DShape(i,o,a,r,n,s)}setGraphicElevationContext(e,t,r=0){const n=super.setGraphicElevationContext(e,t);return n.addOffsetRenderUnits(r),n}layerOpacityChanged(){return this.logger.warn("layer opacity change not yet implemented in Graphics3DTextSymbolLayer"),!1}layerElevationInfoChanged(e,t){return D(e,t,((e,t)=>{this.updateGraphicElevationContext(t,e)})),f.UPDATE}slicePlaneEnabledChanged(e,t){return D(e,t,(e=>{for(const t of e.stageObject.geometryRecords)t.material.setParameters({hasSlicePlane:this._context.slicePlaneEnabled})})),!0}physicalBasedRenderingChanged(){return!0}pixelRatioChanged(){return!1}updateGraphicElevationContext(e,t){this.setGraphicElevationContext(e,t.elevationContext,t.metadata.elevationOffset),t.needsElevationUpdates=d(t.elevationContext.mode)||"absolute-height"===t.elevationContext.mode}_defaultElevationInfoNoZ(){return R}_createAs3DShape(e,l,c,m,f,g){const y=this.setGraphicElevationContext(e,new p,m.elevationOffset),v="polyline"===n(e.geometry,"type"),b=e.uid;let P=null,O=null;if(t(g)){const e=x(m.horizontalPlacement);P=new E(c,e,this._textRenderParameters);let n=null;O=this._context.sharedResources.textures.fromData(P.key,(()=>s(P).create()),(()=>{r(n)&&n.release()}));const o=this._context.stage.renderView.textureRepository.acquire(O.texture.id);if(t(o)||i(o))return O.release(),null;n=o}const w=G(P,m),_={occlusionTest:!0,screenOffset:m.screenOffset,anchorPosition:w,polygonOffset:!0,color:[1,1,1,1],centerOffsetUnits:m.centerOffsetUnits,debugDrawLabelBorder:m.debugDrawLabelBorder,drawInSecondSlot:!0};if(r(O)&&(_.textureId=O.texture.id),r(g)&&(_.textureId=g.id),r(m.verticalOffset)){const{screenLength:e,minWorldLength:t,maxWorldLength:r}=m.verticalOffset;_.verticalOffset={screenLength:o(e),minWorldLength:t||0,maxWorldLength:null!=r?r:1/0}}if(this._context.screenSizePerspectiveEnabled){const{screenSizePerspectiveSettings:e,screenSizePerspectiveSettingsLabels:t}=this._context.sharedResources;_.screenSizePerspective=t.overridePadding(this._textRenderParameters.haloSize+this._textRenderParameters.definition.background.padding[0]),_.screenSizePerspectiveAlignment=e}let U;if(v&&(_.shaderPolygonOffset=1e-4),_.hasSlicePlane=this._context.slicePlaneEnabled,r(f)){const e=JSON.stringify(_);U=f.get(e),t(U)&&(U=new z(_),f.add(e,U))}else U=new z(_);const D=[U],R=m.translation,A=r(P)?[P.displayWidth,P.displayHeight]:[0,0],T=m.centerOffset,W=C,I=[0,0],k=[L.createPointGeometry(W,R,null,A,T,I,null)],B=this._context.layer.uid,H=S(this._context,l,k,D,y,B,b);if(null===H)return null;const $=new u(this,H.object,k,t(f)?D:null,O,h,y);$.alignedSampledElevation=H.sampledElevation,$.needsElevationUpdates=d(y.mode)||"absolute-height"===y.mode;const{displayWidth:V,displayHeight:N}=r(P)?P:m;$.getScreenSize=(e=a())=>(e[0]=V,e[1]=N,e);const q={labelText:c,elevationOffset:m.elevationOffset};return $.metadata=q,j($,l,this._context.elevationProvider),$}}function D(e,t,n){e&&e.forEach((e=>{const s=t(e);r(s)&&n(s,e.graphic)}))}function G(e,t){if("baseline"===t.verticalPlacement){const n=b[t.horizontalPlacement],s=r(e)?e.baselineAnchorY:0;return l(n,s)}const n=P(t.horizontalPlacement,t.verticalPlacement);return O[n]}const R={mode:"relative-to-ground",offset:0},A={text:null,translation:[0,0,0],elevationOffset:0,centerOffset:[0,0,0,1],screenOffset:[0,0],horizontalPlacement:"center",verticalPlacement:"center",verticalOffset:null,centerOffsetUnits:null,debugDrawLabelBorder:!1,displayWidth:0,displayHeight:0};export{U as Graphics3DTextSymbolLayer};
