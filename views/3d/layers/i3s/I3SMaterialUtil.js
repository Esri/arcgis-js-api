/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../../../core/maybe","../../../../core/mathUtils","../../webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl","../../webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl","../../webgl-engine/lib/Texture"],(function(e,a,t,r,l,o){"use strict";function s(e,t){const r=new Map,o=(e,t)=>{if(a.isNone(e))return-1;if(r.has(e.id)){const a=r.get(e.id);return a.usage|=t,a.id}const l=r.size;return r.set(e.id,{id:l,usage:t}),l},s=t.pbrMetallicRoughness,c=s&&s.baseColorFactor,u=t.emissiveFactor,d=null==t.normalTexture&&null==t.emissiveTexture&&null==t.occlusionTexture&&(!s||null==s.metallicRoughnessTexture&&1===s.roughnessFactor&&(1===s.metallicFactor||0===s.metallicFactor)),m=d?l.PBRSchematicMRRValues[0]:s?s.metallicFactor:1,g=d?l.PBRSchematicMRRValues[1]:s?s.roughnessFactor:1,h="mask"===t.alphaMode?33:1,p={baseColorFactor:c?[c[0],c[1],c[2],c[3]]:[1,1,1,1],baseColorTextureId:o(s&&s.baseColorTexture,h),metallicRoughnessTextureId:o(s&&s.metallicRoughnessTexture,2),metallicFactor:m,roughnessFactor:g},f={alphaMode:t.alphaMode,alphaCutoff:t.alphaCutoff,doubleSided:t.doubleSided,cullFace:"none"===t.cullFace?0:"back"===t.cullFace?2:"front"===t.cullFace?1:void 0,normalTextureId:o(t.normalTexture,4),emissiveTextureId:o(t.emissiveTexture,16),occlusionTextureId:o(t.occlusionTexture,8),emissiveFactor:u?[u[0],u[1],u[2]]:[0,0,0],metallicRoughness:p,wrapTextures:!1,hasParametersFromSource:d},x=[];return r.forEach((({usage:t},r)=>{const l=a.isSome(e)&&e[r]&&e[r].formats,o=l?n(l.map((({name:e,format:a})=>({name:e,encoding:i[a]})))):[];x.push({id:r,usage:t,encodings:o})})),{material:f,textures:x}}function n(e){return e.sort(((e,a)=>e.encoding-a.encoding))}const i={basis:1,dds:2,png:4,jpg:8,"ktx-etc2":16},c={[o.Texture.BASIS_ENCODING]:1,[o.Texture.DDS_ENCODING]:2,"image/png":4,"image/jpg":8,"image/jpeg":8,"image/ktx":16};function u(e){const a=e&&e.materialDefinitions?Object.keys(e.materialDefinitions)[0]:null,r=e&&e.textureDefinitions?Object.keys(e.textureDefinitions)[0]:null,l=a&&e.materialDefinitions[a],o=r&&e.textureDefinitions[r],s=d();if(null!=l){const e=l.params;e.diffuse&&(s.metallicRoughness.baseColorFactor=[e.diffuse[0],e.diffuse[1],e.diffuse[2],1]),null!=e.doubleSided&&(s.doubleSided=e.doubleSided,s.cullFace=e.doubleSided?0:2),"none"!==e.cullFace&&"front"!==e.cullFace&&"back"!==e.cullFace||(s.cullFace="none"===e.cullFace?0:"back"===e.cullFace?2:1),e.transparency&&(s.metallicRoughness.baseColorFactor[3]=t.clamp(1-e.transparency,0,1)),(e.useVertexColorAlpha||s.metallicRoughness.baseColorFactor[3]<1)&&(s.alphaMode="blend")}const i=[];if(null!=o){const e=0;!o.wrap||"repeat"!==o.wrap[0]&&"repeat"!==o.wrap[1]||(s.wrapTextures=!0);let a=1;"rgba"===o.channels&&(s.alphaMode="blend",a|=32);const t=o.images.length-1,r=o.images[t],l=e=>e&&e.split("/").pop(),u=Array.isArray(o.encoding)?n(o.encoding.map(((e,a)=>({name:l(r.href[a]),encoding:c[e]||0})))):[{name:l(r.href),encoding:c[o.encoding]||0}];i.push({id:e,usage:a,encodings:u}),s.metallicRoughness.baseColorTextureId=e}return{material:s,textures:i}}const d=()=>({alphaMode:"opaque",alphaCutoff:r.defaultMaskAlphaCutoff,doubleSided:!0,cullFace:0,normalTextureId:-1,emissiveTextureId:-1,occlusionTextureId:-1,emissiveFactor:[0,0,0],metallicRoughness:{baseColorFactor:[.8,.8,.8,1],baseColorTextureId:-1,metallicRoughnessTextureId:-1,metallicFactor:0,roughnessFactor:.6},wrapTextures:!1,hasParametersFromSource:!0});e.getMaterialAndTextures=s,e.getMaterialAndTexturesFromShared=u,Object.defineProperty(e,"__esModule",{value:!0})}));
