/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../core/maybe","../../../../core/mathUtils","../../webgl-engine/core/shaderLibrary/util/AlphaDiscard.glsl","../../webgl-engine/core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl"],(function(e,a,l,t,s){"use strict";const o={jpg:"image/jpeg",png:"image/png",dds:"image/vnd-ms.dds","ktx-etc2":"image/ktx"};const r=()=>({alphaMode:"opaque",alphaCutoff:t.defaultMaskAlphaCutoff,doubleSided:!0,cullFace:0,normalTextureId:-1,emissiveTextureId:-1,occlusionTextureId:-1,emissiveFactor:[0,0,0],metallicRoughness:{baseColorFactor:[.8,.8,.8,1],baseColorTextureId:-1,metallicRoughnessTextureId:-1,metallicFactor:0,roughnessFactor:.6},wrapTextures:!1,isSchematic:!0});e.getMaterialAndTextures=function(e,l){const t=new Map,r=(e,l)=>{if(a.isNone(e))return-1;if(t.has(e.id)){const a=t.get(e.id);return a.usage|=l,a.id}const s=t.size;return t.set(e.id,{id:s,usage:l}),s},i=l.pbrMetallicRoughness,n=i&&i.baseColorFactor,c=l.emissiveFactor,u=null==l.normalTexture&&null==l.emissiveTexture&&null==l.occlusionTexture&&(!i||null==i.metallicRoughnessTexture&&1===i.roughnessFactor&&(1===i.metallicFactor||0===i.metallicFactor)),d=u?s.PBRSchematicMRRValues[0]:i?i.metallicFactor:1,m=u?s.PBRSchematicMRRValues[1]:i?i.roughnessFactor:1,g="mask"===l.alphaMode?33:1,h={baseColorFactor:n?[n[0],n[1],n[2],n[3]]:[1,1,1,1],baseColorTextureId:r(i&&i.baseColorTexture,g),metallicRoughnessTextureId:r(i&&i.metallicRoughnessTexture,2),metallicFactor:d,roughnessFactor:m},p={alphaMode:l.alphaMode,alphaCutoff:l.alphaCutoff,doubleSided:l.doubleSided,cullFace:"none"===l.cullFace?0:"back"===l.cullFace?2:"front"===l.cullFace?1:void 0,normalTextureId:r(l.normalTexture,4),emissiveTextureId:r(l.emissiveTexture,16),occlusionTextureId:r(l.occlusionTexture,8),emissiveFactor:c?[c[0],c[1],c[2]]:[0,0,0],metallicRoughness:h,wrapTextures:!1,isSchematic:u},f=[];return t.forEach((({usage:l},t)=>{const s=a.isSome(e)&&e[t]&&e[t].formats,r=s?s.map((({name:e,format:a})=>({name:e,encoding:o[a]}))):[];f.push({id:t,usage:l,encodings:r})})),{material:p,textures:f}},e.getMaterialAndTexturesFromShared=function(e){const a=e&&e.materialDefinitions?Object.keys(e.materialDefinitions)[0]:null,t=e&&e.textureDefinitions?Object.keys(e.textureDefinitions)[0]:null,s=a&&e.materialDefinitions[a],o=t&&e.textureDefinitions[t],i=r();if(null!=s){const e=s.params;e.diffuse&&(i.metallicRoughness.baseColorFactor=[e.diffuse[0],e.diffuse[1],e.diffuse[2],1]),null!=e.doubleSided&&(i.doubleSided=e.doubleSided,i.cullFace=e.doubleSided?0:2),"none"!==e.cullFace&&"front"!==e.cullFace&&"back"!==e.cullFace||(i.cullFace="none"===e.cullFace?0:"back"===e.cullFace?2:1),e.transparency&&(i.metallicRoughness.baseColorFactor[3]=l.clamp(1-e.transparency,0,1)),(e.useVertexColorAlpha||i.metallicRoughness.baseColorFactor[3]<1)&&(i.alphaMode="blend")}const n=[];if(null!=o){const e=0;!o.wrap||"repeat"!==o.wrap[0]&&"repeat"!==o.wrap[1]||(i.wrapTextures=!0);let a=1;"rgba"===o.channels&&(i.alphaMode="blend",a|=32);const l=o.images.length-1,t=o.images[l],s=e=>e&&e.split("/").pop(),r=Array.isArray(o.encoding)?o.encoding.map(((e,a)=>({name:s(t.href[a]),encoding:e}))):[{name:s(t.href),encoding:o.encoding}];n.push({id:e,usage:a,encodings:r}),i.metallicRoughness.baseColorTextureId=e}return{material:i,textures:n}},Object.defineProperty(e,"__esModule",{value:!0})}));
