/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import s from"../../../../core/Accessor.js";import{property as r}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as t}from"../../../../core/accessorSupport/decorators/subclass.js";import{TaskPriority as o}from"../../../support/Scheduler.js";let i=class extends s{constructor(e,s){super({}),this._updateElevation=s,this.running=!1,this._nodeSet=new Set,this.own(e.registerTask(o.ELEVATION_ALIGNMENT,this))}normalizeCtorArgs(){return{}}schedule(e){this._nodeSet.add(e),this.running=!0}remove(e){this._nodeSet.delete(e),this._updateRunning()}runTask(e){const s=this._nodeSet;for(const r of s)if(s.delete(r),this._updateElevation(r),e.madeProgress(),e.done)break;this._updateRunning()}_updateRunning(){this.running=this._nodeSet.size>0}};e([r()],i.prototype,"running",void 0),i=e([t("esri.views.3d.layers.i3s.I3SAsyncElevationUpdater.ts")],i);export{i as I3SAsyncElevationUpdater};
