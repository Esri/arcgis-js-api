/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../core/screenUtils","../../../../chunks/vec3f64","../../../../chunks/vec3","../../../../geometry/support/aaBoundingRect","../../support/geometryUtils","../../webgl-engine/lib/Camera","./FeatureTileVisibility3D"],(function(e,t,i,r,s,n,a,c){"use strict";let o=function(){function e(e){this.camera=new a,this.focusOnMap=[0,0],this.screenRect=s.create(),this.tileSize=e.tileSize,this.maxVerticalScreenSize=e.maxVerticalScreenSize,this.renderCoordsHelper=e.renderCoordsHelper,this.tilingScheme=e.tilingScheme,this.visibility=new c({renderCoordsHelper:e.renderCoordsHelper})}var t=e.prototype;return t.begin=function(e,t,i){this.camera.copyFrom(e),this.surfaceElevation=i,this.focusOnMap[0]=t.x,this.focusOnMap[1]=t.y,s.fromValues(0,0,e.fullWidth,e.fullHeight,this.screenRect),this.visibility.begin(this.camera,i)},t.end=function(){this.visibility.end()},t.updateTile=function(e){e.measures.visibility=this.visibility.calculate(e),0!==e.measures.visibility&&this.updateScreenMeasure(e),this.updateDistanceMeasure(e)},t.updateDistanceMeasure=function(e){e.measures.distance=s.distance(e.extent,this.focusOnMap)},t.updateScreenMeasure=function(e){const t=h,i=1<<t,r=e.measures.screenRect;s.empty(r);let n=0;const a=e.lij[0]+t,c=e.lij[1]<<t,o=e.lij[2]<<t,l=this.tileSizeWithBias(e),u=l*l;let d=!1;for(let t=0;t<i;t++){for(let l=0;l<i;l++){if(n+=this.computeScreenArea(e,a,c+t,o+l,r).area,d=n>u&&s.height(r)>this.maxVerticalScreenSize,d)break}if(d)break}e.measures.shouldSplit=n>u},t.tileSizeWithBias=function(e){return 1===e.measures.visibility?this.tileSize*d:this.tileSize},t.computeScreenArea=function(e,t,i,r,a){const c=1===e.measures.visibility,o=p.points;this.projectToScreen(t,i,r,c,o),s.empty(l);for(let e=0;e<4;e++)s.expandPointInPlace(l,o[e]);return s.expand(a,l),s.intersection(l,this.screenRect,u),p.screenOverlap=s.area(u)/s.area(l),p.area=n.triangle.areaPoints2d(o[0],o[1],o[2])+n.triangle.areaPoints2d(o[0],o[2],o[3]),p},t.projectToScreen=function(e,t,i,r,s){this.tilingScheme.ensureMaxLod(e),this.tilingScheme.getExtent(e,t,i,f),this.toRenderCoords(f,0,3,S[0]),this.toRenderCoords(f,2,3,S[1]),this.toRenderCoords(f,2,1,S[2]),this.toRenderCoords(f,0,1,S[3]),r&&(this.projectToPlane(S,this.camera.frustum.planes[4]),this.projectToPlane(S,this.camera.frustum.planes[3]),this.projectToPlane(S,this.camera.frustum.planes[2]));for(let e=0;e<4;e++)this.camera.projectToRenderScreen(S[e],g),this.camera.renderToScreen(g,s[e])},t.projectToPlane=function(e,t){for(let i=0;i<4;i++)y[i]=n.plane.signedDistance(t,e[i]);const i=Math.max(y[0],y[1],y[2],y[3]);if(i>0){const s=r.scale(m,n.plane.normal(t),-i);for(let t=0;t<4;t++)r.add(e[t],e[t],s)}},t.toRenderCoords=function(e,t,i,r){return m[0]=e[t],m[1]=e[i],m[2]=this.surfaceElevation,this.renderCoordsHelper.toRenderCoords(m,this.tilingScheme.spatialReference,r),r},e}();const l=s.create(),u=s.create(),h=2,d=5,p={points:[t.createScreenPointArray(),t.createScreenPointArray(),t.createScreenPointArray(),t.createScreenPointArray()],area:0,screenOverlap:0},f=s.create(),m=i.create(),S=[i.create(),i.create(),i.create(),i.create()],y=[0,0,0,0],g=t.createRenderScreenPointArray3();e.FeatureTileMeasurements3D=o,e.default=o,Object.defineProperty(e,"__esModule",{value:!0})}));
