/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/Accessor","../../../../../core/Handles","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/Quantity","../../../../../core/watchUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/has","../../../../../core/accessorSupport/ensureType","../../../../../core/Logger","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/accessorSupport/trackingUtils","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/geometryEngine","../../../../../geometry/Polyline","../../../../../geometry/projection","../../../../../geometry/projectionEllipsoid","../../../../../geometry/support/geodesicUtils","../support/UnitNormalizer"],(function(e,t,r,i,n,o,s,a,c,l,d,p,u,h,_,g,m,f,y,P,D,v,w){"use strict";e.DirectLineMeasurementController=function(e){function r(t){var r;return(r=e.call(this,t)||this)._unitNormalizer=new w.UnitNormalizer,r._handles=new n,r._tempStartPosition=m.create(),r._tempEndPosition=m.create(),r._tempCornerPosition=m.create(),r}t._inheritsLoose(r,e);var i=r.prototype;return i.initialize=function(){this._handles.add(c.whenOnce(this.view,"ready",(()=>this._initialize()),!0))},i.destroy=function(){this._handles=s.destroyMaybe(this._handles)},i._initialize=function(){const e=this.view.spatialReference,t=D.getSphericalPCPF(e),r=t===D.SphericalECEFSpatialReference?D.WGS84ECEFSpatialReference:t;this._sphericalPCPF=r;const i=P.canProjectWithoutEngine(e,r);this._unitNormalizer.spatialReference=i?r:e,this._handles.add(_.reactionInit((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e})))},i._euclideanDistances=function(e,t){const r=e.clone();r.z=t.z;const i=this._tempStartPosition,n=this._tempEndPosition,o=this._tempCornerPosition,s=this.view.spatialReference,c=this._sphericalPCPF,l=P.canProjectWithoutEngine(s,c)?c:s;P.projectPointToVector(e,i,l),P.projectPointToVector(t,n,l),P.projectPointToVector(r,o,l);const d=g.distance(i,n),p=g.distance(o,n),u=Math.abs(t.z-e.z),h=e=>this._unitNormalizer.normalizeDistance(e),_=h(d),m=h(p),f=h(u);return{direct:new a(_,"meters"),horizontal:new a(m,"meters"),vertical:new a(f,"meters")}},i._exactGeodesicDistanceAndAngle=function(e,t,r){const i=e.spatialReference,n=new y({spatialReference:i});n.addPath([e,t]);const o=i.isGeographic&&v.isSupported(i)?v.geodesicLengths([n],"meters")[0]:i.isWebMercator?f.geodesicLength(n,"meters"):void 0,{distance:s,angle:c}=o?{distance:o,angle:this._fallbackGeodesicAngle(o,i)}:this._fallbackGeodesicDistance(e,t,r);return{distance:new a(s,"meters"),angle:new a(c,"degrees")}},i._fallbackGeodesicAngle=function(e,t){return e/D.getReferenceEllipsoid(t).metersPerDegree},i._fallbackGeodesicDistance=function(e,t,r){if(P.projectPointToWGS84ComparableLonLat(e,C)){P.projectPointToWGS84ComparableLonLat(t,M);const e=o.deg2rad(C[0]),r=o.deg2rad(C[1]),i=o.deg2rad(M[0]),n=o.deg2rad(M[1]),s=Math.abs(i-e),a=o.acosClamped(Math.sin(r)*Math.sin(n)+Math.cos(r)*Math.cos(n)*Math.cos(s)),c=o.rad2deg(a),l={distance:0};return v.inverseGeodeticSolver(l,[C[0],C[1]],[M[0],M[1]]),{distance:l.distance,angle:c}}const i=e.spatialReference,n=r;return{distance:n,angle:this._fallbackGeodesicAngle(n,i)}},t._createClass(r,[{key:"_computedResult",get:function(){const{startPoint:e,endPoint:t}=this.layer;if(s.isNone(e)||s.isNone(t))return null;const r=this._euclideanDistances(e,t),i=this._exactGeodesicDistanceAndAngle(e,t,r.horizontal.value);return{directDistance:r.direct,horizontalDistance:r.horizontal,verticalDistance:r.vertical,geodesicDistance:i.distance,geodesicAngle:i.angle}}}]),r}(i),r.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"view",void 0),r.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"layer",void 0),r.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"viewData",void 0),r.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"_computedResult",null),e.DirectLineMeasurementController=r.__decorate([h.subclass("esri.views.3d.layers.analysis.DirectLineMeasurement/DirectLineMeasurementController")],e.DirectLineMeasurementController);const C=m.create(),M=m.create();Object.defineProperty(e,"__esModule",{value:!0})}));
