/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/Accessor","../../../../../core/Handles","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/Quantity","../../../../../core/watchUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/has","../../../../../core/accessorSupport/ensureType","../../../../../core/Logger","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/accessorSupport/trackingUtils","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../../../geometry/geometryEngine","../../../../../geometry/Polyline","../../../../../geometry/projection","../../../../../geometry/projectionEllipsoid","../../../../../geometry/support/geodesicUtils","../support/UnitNormalizer","../../../support/ElevationProvider"],(function(e,t,i,n,r,o,a,s,c,l,d,p,u,h,g,_,m,v,P,y,f,D,w,C){"use strict";e.DirectLineMeasurementController=function(e){function i(t){var i;return(i=e.call(this,t)||this)._unitNormalizer=new w.UnitNormalizer,i._handles=new r,i._tempStartPosition=m.create(),i._tempEndPosition=m.create(),i._tempCornerPosition=m.create(),i}t._inheritsLoose(i,e);var n=i.prototype;return n.initialize=function(){this._handles.add(c.whenOnce(this.view,"ready",(()=>this._initialize()),!0))},n.destroy=function(){this._handles=a.destroyMaybe(this._handles)},n._initialize=function(){const e=this.view.spatialReference,t=f.getSphericalPCPF(e),i=t===f.SphericalECEFSpatialReference?f.WGS84ECEFSpatialReference:t;this._sphericalPCPF=i;const n=y.canProjectWithoutEngine(e,i);this._unitNormalizer.spatialReference=n?i:e,this._handles.add([g.reactionInit((()=>({viewData:this.viewData,startPoint:this.layer.startPoint})),(({viewData:e,startPoint:t})=>{e.elevationAlignedStartPoint=this._applyElevationAlignment(t)})),g.reactionInit((()=>({viewData:this.viewData,endPoint:this.layer.endPoint})),(({viewData:e,endPoint:t})=>{e.elevationAlignedEndPoint=this._applyElevationAlignment(t)})),g.reactionInit((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e}))])},n._applyElevationAlignment=function(e){if(a.isNone(e)||e.hasZ)return e;const t=e.clone();return t.z=a.unwrapOr(C.getElevationAtPoint(this.view.elevationProvider,t),0),t},n._euclideanDistances=function(e,t){const i=e.clone();i.z=t.z;const n=this._tempStartPosition,r=this._tempEndPosition,o=this._tempCornerPosition,a=this.view.spatialReference,c=this._sphericalPCPF,l=y.canProjectWithoutEngine(a,c)?c:a;y.projectPointToVector(e,n,l),y.projectPointToVector(t,r,l),y.projectPointToVector(i,o,l);const d=_.distance(n,r),p=_.distance(o,r),u=Math.abs(t.z-e.z),h=e=>this._unitNormalizer.normalizeDistance(e),g=h(d),m=h(p),v=h(u);return{direct:new s(g,"meters"),horizontal:new s(m,"meters"),vertical:new s(v,"meters")}},n._exactGeodesicDistanceAndAngle=function(e,t,i){const n=e.spatialReference,r=new P({spatialReference:n});r.addPath([e,t]);const o=n.isGeographic&&D.isSupported(n)?D.geodesicLengths([r],"meters")[0]:n.isWebMercator?v.geodesicLength(r,"meters"):void 0,{distance:a,angle:c}=o?{distance:o,angle:this._fallbackGeodesicAngle(o,n)}:this._fallbackGeodesicDistance(e,t,i);return{distance:new s(a,"meters"),angle:new s(c,"degrees")}},n._fallbackGeodesicAngle=function(e,t){return e/f.getReferenceEllipsoid(t).metersPerDegree},n._fallbackGeodesicDistance=function(e,t,i){if(y.projectPointToWGS84ComparableLonLat(e,M)){y.projectPointToWGS84ComparableLonLat(t,z);const e=o.deg2rad(M[0]),i=o.deg2rad(M[1]),n=o.deg2rad(z[0]),r=o.deg2rad(z[1]),a=Math.abs(n-e),s=o.acosClamped(Math.sin(i)*Math.sin(r)+Math.cos(i)*Math.cos(r)*Math.cos(a)),c=o.rad2deg(s),l={distance:0};return D.inverseGeodeticSolver(l,[M[0],M[1]],[z[0],z[1]]),{distance:l.distance,angle:c}}const n=e.spatialReference,r=i;return{distance:r,angle:this._fallbackGeodesicAngle(r,n)}},t._createClass(i,[{key:"_computedResult",get:function(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t}=this.viewData;if(a.isNone(e)||a.isNone(t))return null;const i=this._euclideanDistances(e,t),n=this._exactGeodesicDistanceAndAngle(e,t,i.horizontal.value);return{directDistance:i.direct,horizontalDistance:i.horizontal,verticalDistance:i.vertical,geodesicDistance:n.distance,geodesicAngle:n.angle}}}]),i}(n),i.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"view",void 0),i.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"layer",void 0),i.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"viewData",void 0),i.__decorate([l.property()],e.DirectLineMeasurementController.prototype,"_computedResult",null),e.DirectLineMeasurementController=i.__decorate([h.subclass("esri.views.3d.layers.analysis.DirectLineMeasurement/DirectLineMeasurementController")],e.DirectLineMeasurementController);const M=m.create(),z=m.create();Object.defineProperty(e,"__esModule",{value:!0})}));
