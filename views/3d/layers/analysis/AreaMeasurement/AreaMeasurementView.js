/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../intl","../../../../../core/Accessor","../../../../../core/has","../../../../../core/Handles","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/Quantity","../../../../../core/quantityFormatUtils","../../../../../core/unitUtils","../../../../../core/watchUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/accessorSupport/ensureType","../../../../../core/Logger","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/accessorSupport/trackingUtils","../../../../../chunks/mat4","../../../../../chunks/mat4f64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../../interactive/measurementTools/support/measurementUtils","../../../interactive/measurementTools/support/viewUtils","../../../interactive/visualElements/LabelVisualElement","../../../interactive/visualElements/LineVisualElement","../../../interactive/visualElements/MeasurementAreaVisualElement","../../../interactive/visualElements/support/Segment","../../../webgl-engine/materials/lineStippleUtils","../../../../../intl/locale","../../../../../intl/messages"],(function(e,t,i,r,s,n,a,o,l,h,c,u,m,d,p,g,_,L,b,v,f,w,S,y,V,A,C,P,M,D,I){"use strict";e.AreaMeasurementView=function(e){function i(t){var i;return(i=e.call(this,t)||this)._handles=new a,i._params={...R},i._path=null,i._intersectedPath=null,i._perimeter=null,i._intersectedPerimeter=null,i._projectionLines=null,i._measurementArea=null,i._areaLabel=null,i._pathLengthLabel=null,i._cursorSegmentLengthLabel=null,i._perimeterLengthLabel=null,i._pathSegments=[],i._perimeterSegments=[],i._cursorSegment=null,i._origin=w.create(),i._originTransform=v.create(),i._cursorPositionRenderSpace=w.create(),i.messages=null,i.viewData=U,i.areaLabel=null,i.perimeterLengthLabel=null,i.mode="auto",i.geodesicMeasurementDistanceThreshold=1e5,i}t._inheritsLoose(i,e);var r=i.prototype;return r.initialize=function(){var e=this;const i=this.view;this._path=new A.LineVisualElement({view:i,attached:!0,width:this._params.pathLineWidth,color:this._params.pathLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPath=new A.LineVisualElement({view:i,attached:!0,width:this._params.pathLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._perimeter=new A.LineVisualElement({view:i,attached:!0,width:this._params.perimeterLineWidth,color:this._params.perimeterLineColor,polygonOffset:!0,renderOccluded:4}),this._intersectedPerimeter=new A.LineVisualElement({view:i,attached:!0,width:this._params.perimeterLineWidth,color:this._params.intersectingLineColor,polygonOffset:!0,renderOccluded:4}),this._projectionLines=new A.LineVisualElement({view:i,attached:!0,width:this._params.projectionLineWidth,color:this._params.projectionLineColor,stipplePattern:M.createStipplePatternSimple(this._params.projectionLineStippleSize),stippleIntegerRepeats:!1,polygonOffset:!0,renderOccluded:4}),this._measurementArea=new C.MeasurementAreaVisualElement({view:i,attached:!0,color1:this._params.areaColor1,color2:this._params.areaColor2}),this._areaLabel=new V.LabelVisualElement({view:this.view,attached:!0,fontSize:16}),this._pathLengthLabel=new V.LabelVisualElement({view:i,attached:!0,fontSize:12}),this._cursorSegmentLengthLabel=new V.LabelVisualElement({view:i,attached:!0,fontSize:12}),this._perimeterLengthLabel=new V.LabelVisualElement({view:i,attached:!0,fontSize:12});const r=this.layerView,s=r.layerViewData;this._handles.add([L.reactionInit((()=>[this.mode,this.visible,r.unit,s.measurementData,s.cursorPoint]),(()=>this._update())),L.reactionInit((()=>{var e;return null==(e=i.state)?void 0:e.camera}),(()=>this._updateLabels())),D.onLocaleChange(t._asyncToGenerator((function*(){return e._updateMessageBundle()})))]),this._updateMessageBundle()},r.destroy=function(){this._measurementArea.destroy(),this._measurementArea=null,this._path.destroy(),this._path=null,this._intersectedPath.destroy(),this._intersectedPath=null,this._perimeter.destroy(),this._perimeter=null,this._intersectedPerimeter.destroy(),this._intersectedPerimeter=null,this._areaLabel.destroy(),this._areaLabel=null,this._pathLengthLabel.destroy(),this._pathLengthLabel=null,this._cursorSegmentLengthLabel.destroy(),this._cursorSegmentLengthLabel=null,this._perimeterLengthLabel.destroy(),this._perimeterLengthLabel=null,this.set("view",null)},r.whenMessages=function(){var e=t._asyncToGenerator((function*(){yield m.whenOnce(this,"messages")}));function i(){return e.apply(this,arguments)}return i}(),r._update=function(){if(this.destroyed)return;const e=this.layerView.layerViewData.measurementData;l.isNone(e)||(this._updateViewData(e,this.layerView.layerViewData.path,this.layerView.layerViewData.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())},r._updateViewData=function(e,t,i){const r=t.isValidPolygon,s=t.lastPoint,n=l.isSome(s)&&l.isSome(i)?new h(S.segmentLengthGeodesic(s,i),"meters"):null,a=l.isSome(s)&&l.isSome(i)?new h(e.unitNormalizer.normalizeDistance(S.segmentLengthEuclidean(s,i,e.unitNormalizer.spatialReference)),"meters"):null;let c;if("auto"===this.mode){c="euclidean";(e.geodesicPathLength?e.geodesicPathLength.value:0)+(!r&&l.isSome(n)?n.value:0)>this.geodesicMeasurementDistanceThreshold&&(c="geodesic")}else c=this.mode;null==e.geodesicPathLength&&(c="euclidean");const m="geodesic"===c,d=m?e.geodesicArea:e.area;let p=1;if(d){const t=this._toPreferredAreaUnit(d,this.layerView.unit);p=o.nextHighestPowerOfTen(Math.sqrt(t.value)/Math.sqrt(300)),p*=Math.sqrt(u.convertUnit(1,t.unit,"square-meters")),p/=e.unitNormalizer.normalizeDistance(1)}const g={validMeasurement:r,path:t,pathVersion:t.version,cursorPoint:i,measurementData:e,mode:c,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:m?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:m?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:m?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:r?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:p,geodesicCursorSegmentLength:n,cursorSegmentLength:a};this._set("viewData",g)},r._updateOrigin=function(){const e=this.viewData;y.midpoint(e.positionsRenderCoords,this._origin),b.identity(this._originTransform),b.translate(this._originTransform,this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform},r._createSegments=function(e){const t=this.viewData,i=t.path,r=this.view.renderCoordsHelper.spatialReference,s=t.mode,n=[],a=[],o=[],l=t.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<l;++h){const l=t[e][h],c=t[e][(h+1)%i.numVertices];let u=null;switch(s){case"euclidean":u=new P.EuclideanSegment(l,c);break;case"geodesic":u=new P.GeodesicSegment(l,c,r)}t.intersectingSegments.has(h)?o.push(u):a.push(u),n.push(u)}return{all:n,nonIntersecting:a,intersecting:o}},r._updatePathSegments=function(){const e=this.visible,t=this.viewData,i=this._createSegments("positionsRenderCoords"),r=t.path,s=!r.isValidPolygon,n=t.cursorPoint,a=this.view.renderCoordsHelper,o=a.spatialReference,h=t.mode;if(this._cursorSegment=null,r.numVertices>0&&s&&l.isSome(n)){if(a.toRenderCoords(n,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[r.numVertices-1],s=this._cursorPositionRenderSpace;let n=null;switch(h){case"euclidean":n=new P.EuclideanSegment(e,s);break;case"geodesic":n=new P.GeodesicSegment(e,s,o)}i.nonIntersecting.push(n),this._cursorSegment=n}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=i.all},r._updatePerimeterSegments=function(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all},r._updateArea=function(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}},r._updateAreaEuclidean=function(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1},r._updateAreaGeodesic=function(){this._measurementArea.visible=!1},r._updateProjectionLines=function(){const e=this.viewData,t=this.visible,i=e.path,r=e.mode;if(i.numVertices>0&&e.validMeasurement&&"euclidean"===r){const r=[];for(let t=0;t<i.numVertices;++t){const i=w.create();f.subtract(i,e.positionsRenderCoords[t],this._origin);const s=w.create();f.subtract(s,e.positionsFittedRenderCoords[t],this._origin),r.push([i,s])}this._projectionLines.geometry=r,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1},r._updateLabels=function(){if(this.destroyed)return;const e=this.viewData,t=e.path;if(!t)return;const i=e.measurementData,r=e.mode,s=!t.isValidPolygon,n=this.visible,a=this._formatAreaLabel(this.messages,"geodesic"===r?i.geodesicArea:i.area,this.layerView.unit);l.isSome(a)?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=a,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&n):this._areaLabel.visible=!1,this._set("areaLabel",l.unwrap(a));const o=this._formatLengthLabel(this.messages,"geodesic"===r?i.geodesicPathLength:i.pathLength,this.layerView.unit);if(l.isSome(o)&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const i=this._pathSegments[e.pathLengthLabelSegmentIndex],r=l.isSome(this._cursorSegment)?this._cursorSegment:E;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:i,right:r},this._pathLengthLabel.text=o,this._pathLengthLabel.visible=s&&t.numVertices>0&&n}else this._pathLengthLabel.visible=!1;const h="geodesic"===r?e.geodesicCursorSegmentLength:e.cursorSegmentLength;if(l.isSome(h)){const e=this._formatLengthLabel(this.messages,h,this.layerView.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=l.isSome(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=l.unwrap(e),this._cursorSegmentLengthLabel.visible=s&&0!==h.value&&n}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const c="geodesic"===e.mode,u=c?i.geodesicPathLength:i.perimeterLength,m=l.unwrap(null!=u?this._formatLengthLabel(this.messages,u,this.layerView.unit):null);if(this._set("perimeterLengthLabel",l.unwrap(m)),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=m,this._perimeterLengthLabel.visible=!0;let t=!0;for(let i=0;i<e.path.numVertices;++i){const r=(e.perimeterLengthLabelSegmentIndex+i)%e.path.numVertices,s=c?this._pathSegments[r]:this._perimeterSegments[r];if(t=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:s,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&n}else this._perimeterLengthLabel.visible=!1},r._toPreferredAreaUnit=function(e,t){return e.toUnit(this._preferredAreaUnit(e,t))},r._preferredAreaUnit=function(e,t){switch(t){case"metric":return u.preferredMetricAreaUnit(e.value,e.unit);case"imperial":return u.preferredImperialAreaUnit(e.value,e.unit);default:return t}},r._preferredLengthUnit=function(e,t){const i=this._deriveLengthUnitFromAreaUnit(t);switch(i){case"metric":return u.preferredMetricLengthUnit(e.value,e.unit);case"imperial":return u.preferredImperialLengthUnit(e.value,e.unit);default:return i}},r._deriveLengthUnitFromAreaUnit=function(e){switch(e){case"metric":return"metric";case"imperial":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers";case"acres":return"imperial";case"ares":case"hectares":return"metric"}throw new Error("unhandled area unit")},r._formatAreaLabel=function(e,t,i){return e&&t&&c.formatDecimal(e,t,this._preferredAreaUnit(t,i))},r._formatLengthLabel=function(e,t,i){return e&&t&&c.formatDecimal(e,t,this._preferredLengthUnit(t,i))},r._updateMessageBundle=function(){I.fetchMessageBundle("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()}))},t._createClass(i,[{key:"visible",get:function(){return this.layerView.visible&&!this.layerView.suspended}},{key:"testData",get:function(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}}]),i}(s),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"view",void 0),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"messages",void 0),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"analysis",void 0),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"viewData",void 0),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"layerView",void 0),i.__decorate([d.property({readOnly:!0})],e.AreaMeasurementView.prototype,"areaLabel",void 0),i.__decorate([d.property({readOnly:!0})],e.AreaMeasurementView.prototype,"perimeterLengthLabel",void 0),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"mode",void 0),i.__decorate([d.property({readOnly:!0})],e.AreaMeasurementView.prototype,"visible",null),i.__decorate([d.property()],e.AreaMeasurementView.prototype,"geodesicMeasurementDistanceThreshold",void 0),e.AreaMeasurementView=i.__decorate([_.subclass("esri.views.3d.layers.analysis.AreaMeasurement.AreaMeasurementView")],e.AreaMeasurementView);const R={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25},U={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,geodesicCursorSegmentLength:null,cursorSegmentLength:null},E=new P.EuclideanSegment(w.create(),w.create());Object.defineProperty(e,"__esModule",{value:!0})}));
