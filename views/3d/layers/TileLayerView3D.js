/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import r from"../../../core/Error.js";import{isNone as t}from"../../../core/maybe.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import{canProjectWithoutEngine as s}from"../../../geometry/projection.js";import{LayerView3D as a}from"./LayerView3D.js";import{TiledLayerView3D as l}from"./TiledLayerView3D.js";import n from"../../layers/LayerView.js";import p from"../../layers/RefreshableLayerView.js";import m from"../../layers/TileLayerView.js";import{createQueryGeometry as c}from"../../support/drapedUtils.js";let f=class extends(p(l(m(a(n))))){constructor(){super(...arguments),this.type="tile-3d"}get imageFormatIsOpaque(){return"jpg"===this.layer.tileInfo.format}get hasMixedImageFormats(){return"mixed"===this.layer.tileInfo.format}get dataLevelRange(){if(this.tileInfo){const e=this.tileInfo.lods,r=e[0].scale,t=e[e.length-1].scale;return this.levelRangeFromScaleRange(r,t)}return{minLevel:0,maxLevel:0}}initialize(){if("web-tile"===this.layer.type){const e=this.layer.get("fullExtent.spatialReference"),i=this.layer.get("tileInfo.spatialReference");if(t(e)||t(i)||!s(e,i)){const e="defaults"===this.layer.originOf("fullExtent")||t(this.layer.fullExtent)?"SceneView requires fullExtent to be specified by the user on WebTileLayer":"SceneView requires fullExtent to be specified in the same spatial reference as tileInfo on WebTileLayer";this.addResolvingPromise(Promise.reject(new r("layerview:incompatible-fullextent",e)))}}this._addTilingSchemeMatchPromise()}createFetchPopupFeaturesQueryGeometry(e,r){return c(e,r,this.view)}async doRefresh(){this.suspended||this.emit("data-changed")}};e([i({readOnly:!0})],f.prototype,"imageFormatIsOpaque",null),e([i({readOnly:!0})],f.prototype,"hasMixedImageFormats",null),e([i()],f.prototype,"layer",void 0),e([i({readOnly:!0,aliasOf:"layer.tileInfo"})],f.prototype,"tileInfo",void 0),e([i({readOnly:!0})],f.prototype,"dataLevelRange",null),f=e([o("esri.views.3d.layers.TileLayerView3D")],f);const y=f;export{y as default};
