/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/has","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass","../../../core/urlUtils","../../../core/uuid","../../../portal/support/resourceExtension","../../../core/promiseUtils","../../../core/watchUtils","../../layers/ImageryLayerView","./DynamicLayerView3D"],(function(e,t,a,i,r,s,n,o,l,c,u,d,h,p){"use strict";let m=function(t){function a(){var e;return(e=t.apply(this,arguments)||this).updateWhenStationary=!0,e.redrawDebounced=u.debounce((async t=>{e.redraw(((t,a)=>e.redrawImage(t,{signal:a})),t)}),2e3),e}e._inheritsLoose(a,t);var i=a.prototype;return i.initialize=function(){this.handles.add([d.whenOnce(this.view.basemapTerrain,"ready",(()=>this.initializeMaximumDataResolution())),this.layer.on("redraw",(()=>this.redrawDebounced()))]),this.updatingHandles.add(this.layer,"exportImageServiceParameters.version",(()=>{this.updatingHandles.addPromise(this.refreshDebounced())})),this.updatingHandles.add(this,"timeExtent",(()=>this.updatingHandles.addPromise(this.refreshDebounced())))},i.initializeMaximumDataResolution=function(){const e=this.view.basemapTerrain.spatialReference,t=this.layer.fullExtent;t&&e.equals(t.spatialReference)&&(this.maximumDataResolution={x:this.layer.pixelSizeX,y:this.layer.pixelSizeY})},i.getFetchOptions=function(){return{timeExtent:this.timeExtent}},i.processResult=async function(e,t,a){t.imageElement?e.image=t.imageElement:(e.image=document.createElement("canvas"),e.pixelData=t.pixelData,await this.redrawImage(e,{signal:a}))},i.redrawImage=async function(e,t){if(!(e.image instanceof HTMLCanvasElement&&e.pixelData))return Promise.reject();const a=e.image,i=a.getContext("2d"),r=await this.layer.applyRenderer(e.pixelData,t),s=this.layer.applyFilter(r),n=s.pixelBlock;a.width=n.width,a.height=n.height;const o=i.createImageData(n.width,n.height);o.data.set(s.pixelBlock.getAsRGBA()),i.putImageData(o,0,0)},a}(h.ImageryLayerView(p));return m=t.__decorate([n.subclass("esri.views.3d.layers.ImageryLayerView3D")],m),m}));
