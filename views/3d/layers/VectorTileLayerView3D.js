/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Error.js";import{isNone as i,isSome as r,disposeMaybe as l,destroyMaybe as s}from"../../../core/maybe.js";import{isAborted as o}from"../../../core/promiseUtils.js";import{whenOnce as a}from"../../../core/reactiveUtils.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as h}from"../../../core/accessorSupport/decorators/subclass.js";import{SchemaHelper as c}from"../../2d/engine/vectorTiles/SchemaHelper.js";import p from"../../2d/engine/vectorTiles/TileHandler3D.js";import m from"../../2d/engine/vectorTiles/VTLPainter3D.js";import d from"../../2d/engine/vectorTiles/style/StyleRepository.js";import{LayerView3D as y}from"./LayerView3D.js";import{TiledLayerView3D as f}from"./TiledLayerView3D.js";import{vtlAssumes256PixelSizeAsDefault as g,test as u}from"../terrain/terrainUtils.js";import _ from"../../layers/LayerView.js";let C=class extends(f(y(_))){constructor(){super(...arguments),this.type="vector-tile-3d"}initialize(){if(i(this.layer.fullExtent))return void this.addResolvingPromise(Promise.reject(new t("vectortilelayerview:full-extent-undefined","This layer view's layer does not define a fullExtent.")));const{basemapTerrain:e,spatialReference:l,state:s,viewingMode:n}=this.view,{pixelRatio:h}=s,y="local"===n&&!g(l)||u.force512VTL,f=this.layer.tileInfo.spatialReference.isGeographic,_=y?this.layer.tileInfo:this.layer.tileInfo.getOrCreateCompatible(256,f?1:2),C=this._getTileInfoSupportError(_,this.layer.fullExtent);if(r(C))return this.addResolvingPromise(Promise.reject(C));const v=a((()=>this.view?.basemapTerrain?.tilingSchemeLocked)).then((()=>{const t=e.tilingScheme,i=t.pixelSize;let r;if(this.schemaHelper=new c(i,e.spatialReference.isGeographic),256===i){const e=this.layer.tileInfo.spatialReference.isGeographic;r=this.layer.tileInfo.getOrCreateCompatible(256,e?1:2)}else r=this.view.spatialReference.isGeographic?this.layer.tileInfo.getOrCreateCompatible(512,.5):this.layer.tileInfo;const l=this._getTileInfoCompatibilityError(r,t);if(l)throw l;this.tileInfo=r}));this._tileHandlerController=new AbortController;const w=this.view.resourceController;this._memCache=w.memoryController.newCache(this.layer.uid,(e=>{e.release()}));const H=new d(this.layer.currentStyleInfo.style),j=e.mapTileRequester;this._tileHandler=new p(this.layer,H,h,this._memCache,j);const T=this._tileHandlerController.signal,R=e=>w.schedule(e),I=this._tileHandler.start({signal:T,schedule:R}),b=this._tileHandler.spriteMosaic;b.then((e=>{!o(T)&&this._tileHandler&&(this.painter=new m(e,this._tileHandler.glyphMosaic))})),I.then((()=>this._tileHandlerController=null)),this.updatingHandles.add((()=>({style:this.layer.currentStyleInfo.style,newPixelRatio:this.view.state?.pixelRatio})),(({style:e})=>{this._tileHandlerController&&this._tileHandlerController.abort(),this._tileHandlerController=new AbortController,this._memCache.clear();const t=new d(e),i=new p(this.layer,t,h,this._memCache,j),r=i.start({signal:this._tileHandlerController.signal,schedule:R}),l=i.spriteMosaic;r.then((()=>this._tileHandlerController=null)),this.updatingHandles.addPromise(Promise.all([r,l]).then((([,e])=>{const t=this._tileHandler,r=this.painter;this.painter=new m(e,i.glyphMosaic),this._tileHandler=i,this.emit("data-changed"),t.destroy(),r&&r.dispose()})))}));const S=Promise.all([v,I,b]);this.addResolvingPromise(S)}destroy(){this.painter=l(this.painter),this._tileHandlerController&&(this._tileHandlerController.abort(),this._tileHandlerController=null),s(this._tileHandler),this._memCache=s(this._memCache),this._tileHandler=null}get dataLevelRange(){const e=this.tileInfo.lods,t=e[0].scale,i=e[e.length-1].scale,r=this.levelRangeFromScaleRange(t,i);return 1===r.minLevel&&256===this.tileInfo.size[0]&&(r.minLevel=0),r}async fetchTile(e,t,i,r){return this._tileHandler.getVectorTile(e,t,i,r)}};e([n()],C.prototype,"layer",void 0),e([n()],C.prototype,"dataLevelRange",null),e([n()],C.prototype,"updatingProgressValue",void 0),C=e([h("esri.views.3d.layers.VectorTileLayerView3D")],C);const v=C;export{v as default};
