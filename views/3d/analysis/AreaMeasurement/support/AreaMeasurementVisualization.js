/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../intl","../../../../../core/Accessor","../../../../../core/has","../../../../../core/Handles","../../../../../core/mathUtils","../../../../../core/maybe","../../../../../core/quantityFormatUtils","../../../../../core/quantityUtils","../../../../../core/reactiveUtils","../../../../../core/unitUtils","../../../../../core/accessorSupport/decorators/property","../../../../../core/arrayUtils","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/mat4","../../../../../chunks/mat4f64","../../../../../chunks/vec3","../../../../../chunks/vec3f64","../../support/viewUtils","../../../interactive/visualElements/LabelVisualElement","../../../interactive/visualElements/LineVisualElement","../../../interactive/visualElements/MeasurementAreaVisualElement","../../../interactive/visualElements/support/Segment","../../../webgl-engine/lib/Material","../../../webgl-engine/materials/lineStippleUtils","../../../../../intl/locale","../../../../../intl/messages"],(function(e,t,i,s,r,n,a,o,l,h,c,u,d,m,p,g,_,L,b,v,f,S,y,w,M,A,V,C,P,D){"use strict";var z;e.AreaMeasurementVisualization=function(e){function i(t){var i;return(i=e.call(this,t)||this)._handles=new a,i._params={...R},i._path=null,i._intersectedPath=null,i._perimeter=null,i._intersectedPerimeter=null,i._projectionLines=null,i._measurementArea=null,i._areaLabel=null,i._pathLengthLabel=null,i._cursorSegmentLengthLabel=null,i._perimeterLengthLabel=null,i._pathSegments=[],i._perimeterSegments=[],i._cursorSegment=null,i._origin=f.create(),i._originTransform=b.create(),i._cursorPositionRenderSpace=f.create(),i.messages=null,i.viewData=O,i.areaLabel=null,i.perimeterLengthLabel=null,i.loadingMessages=!0,i}t._inheritsLoose(i,e);var s=i.prototype;return s.initialize=function(){var e=this;const i=this.view,s=this._params;this._path=new w.LineVisualElement({view:i,attached:!0,width:s.pathLineWidth,color:s.pathLineColor,polygonOffset:!0,renderOccluded:V.RenderOccludedFlag.OccludeAndTransparent}),this._intersectedPath=new w.LineVisualElement({view:i,attached:!0,width:s.pathLineWidth,color:s.intersectingLineColor,polygonOffset:!0,renderOccluded:V.RenderOccludedFlag.OccludeAndTransparent}),this._perimeter=new w.LineVisualElement({view:i,attached:!0,width:s.perimeterLineWidth,color:s.perimeterLineColor,polygonOffset:!0,renderOccluded:V.RenderOccludedFlag.OccludeAndTransparent}),this._intersectedPerimeter=new w.LineVisualElement({view:i,attached:!0,width:s.perimeterLineWidth,color:s.intersectingLineColor,polygonOffset:!0,renderOccluded:V.RenderOccludedFlag.OccludeAndTransparent}),this._projectionLines=new w.LineVisualElement({view:i,attached:!0,width:s.projectionLineWidth,color:s.projectionLineColor,stipplePattern:C.createStipplePatternSimple(s.projectionLineStippleSize),polygonOffset:!0,renderOccluded:V.RenderOccludedFlag.OccludeAndTransparent}),this._measurementArea=new M.MeasurementAreaVisualElement({view:i,attached:!0,color1:s.areaColor1,color2:s.areaColor2}),this._areaLabel=new y.LabelVisualElement({view:this.view,attached:!0,fontSize:z.Large}),this._pathLengthLabel=new y.LabelVisualElement({view:i,attached:!0,fontSize:z.Small}),this._cursorSegmentLengthLabel=new y.LabelVisualElement({view:i,attached:!0,fontSize:z.Small}),this._perimeterLengthLabel=new y.LabelVisualElement({view:i,attached:!0,fontSize:z.Small});const r=this.analysisViewData;this._handles.add([u.watch((()=>[r.mode,this.visible,r.unit,r.measurementData,r.cursorPoint]),(()=>this._update()),u.syncAndInitial),u.watch((()=>{var e;return null==(e=i.state)?void 0:e.camera}),(()=>this._updateLabels()),u.syncAndInitial),P.onLocaleChange(t._asyncToGenerator((function*(){return e._updateMessageBundle()})))]),this._updateMessageBundle()},s.destroy=function(){this._measurementArea=l.destroyMaybe(this._measurementArea),this._path=l.destroyMaybe(this._path),this._intersectedPath=l.destroyMaybe(this._intersectedPath),this._perimeter=l.destroyMaybe(this._perimeter),this._intersectedPerimeter=l.destroyMaybe(this._intersectedPerimeter),this._areaLabel=l.destroyMaybe(this._areaLabel),this._pathLengthLabel=l.destroyMaybe(this._pathLengthLabel),this._cursorSegmentLengthLabel=l.destroyMaybe(this._cursorSegmentLengthLabel),this._perimeterLengthLabel=l.destroyMaybe(this._perimeterLengthLabel),this._projectionLines=l.destroyMaybe(this._projectionLines),this._handles=l.destroyMaybe(this._handles),this.set("view",null)},s._update=function(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const e=this.analysisViewData,t=e.measurementData;l.isNone(t)||(this._updateViewData(t,e.path,e.cursorPoint),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())},s._updateViewData=function(e,t,i){const s=t.isValidPolygon,r="geodesic"===e.actualMeasurementMode,n=r?e.geodesicArea:e.area;let a=1;if(n){const t=this._toPreferredAreaUnit(n,this.analysisViewData.unit);a=o.nextHighestPowerOfTen(Math.sqrt(t.value)/Math.sqrt(300)),a*=Math.sqrt(d.convertUnit(1,t.unit,"square-meters")),a/=e.unitNormalizer.normalizeDistance(1)}const l={validMeasurement:s,path:t,pathVersion:t.version,cursorPoint:i,measurementData:e,mode:e.actualMeasurementMode,positionsGeographic:e.positionsGeographic,positionsRenderCoords:e.positionsRenderCoords,positionsProjected:e.positionsProjectedWorldCoords,positionsFittedRenderCoords:e.positionsFittedRenderCoords,intersectingSegments:r?e.geodesicIntersectingSegments:e.intersectingSegments,triangleIndices:r?e.geodesicTriangleIndices:e.triangleIndices,fittingMode:e.fittingMode,areaCentroid:r?e.geodesicAreaCentroidRenderCoords:e.areaCentroidRenderCoords,pathLengthLabelSegmentIndex:s?0:t.numVertices-2,perimeterLengthLabelSegmentIndex:0,checkerSize:a};this._set("viewData",l)},s._updateOrigin=function(){const e=this.viewData;S.midpoint(e.positionsRenderCoords,this._origin),L.fromTranslation(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform},s._createSegments=function(e){const t=this.viewData,i=t.path,s=this.view.renderCoordsHelper.spatialReference,r=t.mode,n=[],a=[],o=[],l=t.validMeasurement?i.numVertices:i.numVertices-1;for(let h=0;h<l;++h){const l=t[e][h],c=t[e][(h+1)%i.numVertices];let u=null;switch(r){case"euclidean":u=new A.EuclideanSegment(l,c);break;case"geodesic":u=new A.GeodesicSegment(l,c,s)}t.intersectingSegments.has(h)?o.push(u):a.push(u),n.push(u)}return{all:n,nonIntersecting:a,intersecting:o}},s._updatePathSegments=function(){const e=this.visible,t=this.viewData,i=this._createSegments("positionsRenderCoords"),s=t.path,r=!s.isValidPolygon,n=t.cursorPoint,a=this.view.renderCoordsHelper,o=a.spatialReference,h=t.mode;if(this._cursorSegment=null,s.numVertices>0&&r&&l.isSome(n)){if(a.toRenderCoords(n,this._cursorPositionRenderSpace)){const e=t.positionsRenderCoords[s.numVertices-1],r=this._cursorPositionRenderSpace;let n=null;switch(h){case"euclidean":n=new A.EuclideanSegment(e,r);break;case"geodesic":n=new A.GeodesicSegment(e,r,o)}i.nonIntersecting.push(n),this._cursorSegment=n}}this._path.setGeometryFromSegments(i.nonIntersecting,this._origin),this._path.visible=e,this._intersectedPath.setGeometryFromSegments(i.intersecting,this._origin),this._intersectedPath.visible=e,this._pathSegments=i.all},s._updatePerimeterSegments=function(){const e=this.visible&&"euclidean"===this.viewData.mode,t=this._createSegments("positionsFittedRenderCoords");this._perimeter.setGeometryFromSegments(t.nonIntersecting,this._origin),this._perimeter.visible=e,this._intersectedPerimeter.setGeometryFromSegments(t.intersecting,this._origin),this._intersectedPerimeter.visible=e,this._perimeterSegments=t.all},s._updateArea=function(){const e=this.viewData;switch(e.mode){case"euclidean":this._updateAreaEuclidean(e);break;case"geodesic":this._updateAreaGeodesic()}},s._updateAreaEuclidean=function(e){const t=this.visible;e.validMeasurement&&0===e.intersectingSegments.size&&e.triangleIndices?(this._measurementArea.geometry={uv:e.positionsProjected,position:e.positionsFittedRenderCoords,triangleIndices:e.triangleIndices},this._measurementArea.size=[e.checkerSize,e.checkerSize],this._measurementArea.visible=t):this._measurementArea.visible=!1},s._updateAreaGeodesic=function(){this._measurementArea.visible=!1},s._updateProjectionLines=function(){const e=this.viewData,t=this.visible,i=e.path,s=e.mode;if(i.numVertices>0&&e.validMeasurement&&"euclidean"===s){const s=[];for(let t=0;t<i.numVertices;++t){const i=f.create();v.subtract(i,e.positionsRenderCoords[t],this._origin);const r=f.create();v.subtract(r,e.positionsFittedRenderCoords[t],this._origin),s.push([i,r])}this._projectionLines.geometry=s,this._projectionLines.visible=t}else this._projectionLines.geometry=null,this._projectionLines.visible=!1},s._updateLabels=function(){if(this.destroyed)return;const e=this.viewData,t=e.path;if(!t)return;const i=e.measurementData,s=e.mode,r=!t.isValidPolygon,n=this.visible,a=this._formatAreaLabel(this.messages,"geodesic"===s?i.geodesicArea:i.area,this.analysisViewData.unit);l.isSome(a)?(this._areaLabel.geometry={type:"point",point:e.areaCentroid},this._areaLabel.text=a,this._areaLabel.visible=e.validMeasurement&&0===e.intersectingSegments.size&&n):this._areaLabel.visible=!1,this._set("areaLabel",l.unwrap(a));const o=this._formatLengthLabel(this.messages,"geodesic"===s?i.geodesicPathLength:i.pathLength,this.analysisViewData.unit);if(l.isSome(o)&&e.pathLengthLabelSegmentIndex>=0&&e.pathLengthLabelSegmentIndex<this._pathSegments.length){const i=this._pathSegments[e.pathLengthLabelSegmentIndex],s=l.isSome(this._cursorSegment)?this._cursorSegment:I;this._pathLengthLabel.distance=this._params.labelDistance,this._pathLengthLabel.geometry={type:"corner",left:i,right:s},this._pathLengthLabel.text=o,this._pathLengthLabel.visible=r&&t.numVertices>0&&n}else this._pathLengthLabel.visible=!1;const h="geodesic"===s?e.measurementData.geodesicCursorSegmentLength:e.measurementData.cursorSegmentLength;if(l.isSome(h)){const e=this._formatLengthLabel(this.messages,h,this.analysisViewData.unit);this._cursorSegmentLengthLabel.distance=this._params.labelDistance,this._cursorSegmentLengthLabel.geometry=l.isSome(this._cursorSegment)?{type:"segment",segment:this._cursorSegment,sampleLocation:"end"}:null,this._cursorSegmentLengthLabel.anchor="bottom",this._cursorSegmentLengthLabel.text=l.unwrap(e),this._cursorSegmentLengthLabel.visible=r&&0!==h.value&&n}else this._cursorSegmentLengthLabel.visible=!1;this._cursorSegmentLengthLabel.overlaps(this._pathLengthLabel)&&(this._cursorSegmentLengthLabel.visible=!1),this._pathLengthLabel.overlaps(this._areaLabel)&&(this._pathLengthLabel.visible=!1);const c="geodesic"===e.mode,u=c?i.geodesicPathLength:i.perimeterLength,d=this._formatLengthLabel(this.messages,u,this.analysisViewData.unit);if(this._set("perimeterLengthLabel",l.unwrap(d)),e.validMeasurement&&0===e.intersectingSegments.size){this._perimeterLengthLabel.distance=this._params.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=l.unwrap(d),this._perimeterLengthLabel.visible=!0;let t=!0;for(let i=0;i<e.path.numVertices;++i){const s=(e.perimeterLengthLabelSegmentIndex+i)%e.path.numVertices,r=c?this._pathSegments[s]:this._perimeterSegments[s];if(t=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:r,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;t=!1}this._perimeterLengthLabel.visible=t&&n}else this._perimeterLengthLabel.visible=!1},s._toPreferredAreaUnit=function(e,t){return c.toUnit(e,this._preferredAreaUnit(e,t))},s._preferredAreaUnit=function(e,t){switch(t){case"metric":return d.preferredMetricAreaUnit(e.value,e.unit);case"imperial":return d.preferredImperialAreaUnit(e.value,e.unit);default:return t}},s._preferredLengthUnit=function(e,t){const i=this._deriveLengthUnitFromAreaUnit(t);switch(i){case"metric":return d.preferredMetricLengthUnit(e.value,e.unit);case"imperial":return d.preferredImperialLengthUnit(e.value,e.unit);default:return i}},s._deriveLengthUnitFromAreaUnit=function(e){switch(e){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")},s._formatAreaLabel=function(e,t,i){return e&&t&&h.formatDecimal(e,t,this._preferredAreaUnit(t,i))},s._formatLengthLabel=function(e,t,i){return e&&t&&h.formatDecimal(e,t,this._preferredLengthUnit(t,i))},s._updateMessageBundle=function(){this.loadingMessages=!0,D.fetchMessageBundle("esri/core/t9n/Units").then((e=>{this.messages=e,this.view&&this._update()})).finally((()=>{this.loadingMessages=!1}))},t._createClass(i,[{key:"visible",get:function(){return this.analysisViewData.visible}},{key:"testData",get:function(){return{labels:{area:this._areaLabel,pathLength:this._pathLengthLabel,cursorSegmentLength:this._cursorSegmentLengthLabel,perimeterLength:this._perimeterLengthLabel}}}}]),i}(r),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"view",void 0),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"messages",void 0),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"analysis",void 0),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"viewData",void 0),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"analysisViewData",void 0),i.__decorate([m.property({readOnly:!0})],e.AreaMeasurementVisualization.prototype,"areaLabel",void 0),i.__decorate([m.property({readOnly:!0})],e.AreaMeasurementVisualization.prototype,"perimeterLengthLabel",void 0),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"loadingMessages",void 0),i.__decorate([m.property()],e.AreaMeasurementVisualization.prototype,"visible",null),e.AreaMeasurementVisualization=i.__decorate([_.subclass("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],e.AreaMeasurementVisualization),function(e){e[e.Small=12]="Small",e[e.Large=16]="Large"}(z||(z={}));const R={laserLineGlowColor:[1,.5,0],laserLineGlowWidth:8,laserLineGlowFalloff:8,laserLineInnerColor:[1,1,1],laserLineInnerWidth:1,laserLineGlobalAlpha:.75,laserLineEnabled:!0,handleColor:[1,.5,0],handleOpacity:.5,handleRadius:5,handleRadiusHovered:10,handleRadiusMouse:10,handleRadiusTouch:25,pathLineColor:[1,.5,0,1],pathLineWidth:3,intersectingLineColor:[1,.2,0,1],perimeterLineColor:[1,.5,0,1],perimeterLineWidth:2,projectionLineColor:[1,.5,0,1],projectionLineWidth:2,projectionLineStippleSize:5,areaColor1:[1,.5,0,.5],areaColor2:[1,1,1,.5],fillColor:[1,.5,0,.5],lineSubdivisions:64,labelDistance:25},O={validMeasurement:!1,path:null,pathVersion:-1,cursorPoint:null,measurementData:null,mode:null,positionsGeographic:null,positionsRenderCoords:null,positionsProjected:null,positionsFittedRenderCoords:null,intersectingSegments:null,triangleIndices:null,fittingMode:null,areaCentroid:null,pathLengthLabelSegmentIndex:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null},I=new A.EuclideanSegment(f.create(),f.create());Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
