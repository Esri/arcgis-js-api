/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/maybe","../../../../core/screenUtils","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/accessorSupport/decorators/subclass","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../geometry/support/ray","../../../../geometry/support/vectorStacks","../../../../layers/graphics/dehydratedFeatures","./LineOfSightIntersectionResult","../../layers/i3s/Intersector","../../support/geometryUtils/ray","../../terrain/Intersector","../../webgl-engine/lib/Intersector","../../webgl-engine/lib/IntersectorInterfaces","../../webgl-engine/lib/intersectorUtilsConversions"],(function(e,t,r,n,i,s,o,c,a,l,p,u,d,y,h,I,g,f,m,v,S,R){"use strict";e.LineOfSightRayIntersector=function(e){function r(t){var r;return(r=e.call(this,t)||this)._terrainIntersectionOptionsLayerUids=new Set(["terrain"]),r}t._inheritsLoose(r,e);var n=r.prototype;return n.initialize=function(){this.intersector=v.newIntersector(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=S.StoreResults.MIN},n.getScreenPointIntersection=function(e){const t=s.screenPointObjectToArray(e,y.sv2d.get()),r=f.fromScreen(this.view.state.camera,t,P);return this._getRayIntersection(r)},n._getRayIntersection=function(e,t){if(i.isNone(e)||i.isNone(this.view.sceneIntersectionHelper))return null;this.intersector.options.store=S.StoreResults.MIN,this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,this.intersector,t);const r=this.intersector.results.min,n=u.create();if(!r.getIntersectionPoint(n))return null;const s=this.view.renderCoordsHelper.fromRenderCoords(n,this.view.spatialReference),o=u.clone(r.normal);if(g.isI3sIntersectorResult(r))return new I.LineOfSightIntersectionResult({type:S.IntersectorType.OBJECT,id:`${r.target.layerUid}/${r.target.nodeIndex}/${r.target.componentIndex}`,mapPoint:s,renderPoint:n,normal:o,ray:d.copy(e),graphic:null});if(m.isTerrainIntersectorResult(r))return new I.LineOfSightIntersectionResult({type:S.IntersectorType.TERRAIN,id:r.target.lij.slice(),mapPoint:s,renderPoint:n,normal:o,ray:d.copy(e),graphic:null});const c=R.toGraphic(r,this.view);if(i.isSome(c)){const t=c.layer,r=c.sourceLayer;let i;if(r)if("scene"===r.type)i=h.getObjectId(c,r.objectIdField);else i=c.uid;else i=c.uid;return new I.LineOfSightIntersectionResult({type:S.IntersectorType.OBJECT,id:`${t?.uid}/${i}`,mapPoint:s,renderPoint:n,normal:o,ray:d.copy(e),graphic:c})}return null},n.updateFromGroundIntersection=function(e,t,r){const n=w,s=b,o=O,c=L;p.copy(s,e),this.view.renderCoordsHelper.worldUpAtPosition(s,o),p.normalize(o,o);const a=this.view.basemapTerrain.visibleElevationBounds,l=a?Math.abs(a.max-a.min):100,y=t>=0?1:-1;p.scale(c,o,y*(l+Math.abs(t))),p.add(n,s,c),d.fromPoints(n,s,P);const h=this._getRayIntersection(P,{include:this._terrainIntersectionOptionsLayerUids});return i.isSome(h)?(p.scale(c,o,y*t),p.add(r,h.renderPoint,c),u.clone(h.normal)):(p.copy(r,e),null)},r}(n),r.__decorate([o.property()],e.LineOfSightRayIntersector.prototype,"view",void 0),r.__decorate([o.property()],e.LineOfSightRayIntersector.prototype,"intersector",void 0),e.LineOfSightRayIntersector=r.__decorate([l.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],e.LineOfSightRayIntersector);const w=u.create(),b=u.create(),O=u.create(),L=u.create(),P=d.create();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
