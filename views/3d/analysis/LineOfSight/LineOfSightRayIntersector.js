/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import r from"../../../../core/Accessor.js";import{isNone as t,isSome as s}from"../../../../core/maybe.js";import{screenPointObjectToArray as o}from"../../../../core/screenUtils.js";import{property as i}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import{c,n as a,g as p,a as l}from"../../../../chunks/vec3.js";import{d as m,a as d,c as u}from"../../../../chunks/vec3f64.js";import{create as h,copy as f,fromPoints as y}from"../../../../geometry/support/ray.js";import{sv2d as g}from"../../../../geometry/support/vectorStacks.js";import{getObjectId as I}from"../../../../layers/graphics/dehydratedFeatures.js";import{LineOfSightIntersectionResult as j}from"./LineOfSightIntersectionResult.js";import{isI3sIntersectorResult as w}from"../../layers/i3s/Intersector.js";import{fromScreen as v}from"../../support/geometryUtils/ray.js";import{isTerrainIntersectorResult as b}from"../../terrain/Intersector.js";import{newIntersector as R}from"../../webgl-engine/lib/Intersector.js";import{StoreResults as C,IntersectorType as S}from"../../webgl-engine/lib/IntersectorInterfaces.js";import{toGraphic as U}from"../../webgl-engine/lib/intersectorUtilsConversions.js";let O=class extends r{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=R(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=C.MIN}getScreenPointIntersection(e){const r=o(e,g.get()),t=v(this.view.state.camera,r,M);return this._getRayIntersection(t)}_getRayIntersection(e,r){if(t(e)||t(this.view.sceneIntersectionHelper))return null;this.intersector.options.store=C.MIN,this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,this.intersector,r);const o=this.intersector.results.min;if(!o.getIntersectionPoint(H))return null;const i=this.view.renderCoordsHelper.fromRenderCoords(H,this.view.spatialReference),n=m(o.normal);if(w(o))return new j({type:S.OBJECT,id:`${o.target.layerUid}/${o.target.nodeIndex}/${o.target.componentIndex}`,point:i,normal:n,ray:f(e),graphic:null});if(b(o))return new j({type:S.TERRAIN,id:o.target.lij.slice(),point:i,normal:n,ray:f(e),graphic:null});const c=U(o,this.view);if(s(c)){const r=c.layer,t=c.sourceLayer;let s;if(t)if("scene"===t.type)s=I(c,t.objectIdField);else s=c.uid;else s=c.uid;return new j({type:S.OBJECT,id:`${r.uid}/${s}`,point:i,normal:n,ray:f(e),graphic:c})}return null}updateFromGroundIntersection(e,r,t){const o=H,i=L,n=T,m=_,u=x;c(i,e),this.view.renderCoordsHelper.worldUpAtPosition(i,n),a(n,n);const h=this.view.basemapTerrain.elevationBounds,f=this.view.renderCoordsHelper.getAltitude(i),g=h?Math.abs(h.max-h.min):100,I=f>0?1:-1;p(m,n,I*(g+Math.abs(r))),l(o,i,m),y(o,i,M);const j=this._getRayIntersection(M,{include:this._terrainIntersectionOptionsLayerUids});return s(j)&&s(j.point)?(this.view.renderCoordsHelper.toRenderCoords(j.point,u),p(m,n,I*r),l(t,u,m),d(j.normal)):(c(t,e),null)}};e([i()],O.prototype,"view",void 0),e([i()],O.prototype,"intersector",void 0),O=e([n("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],O);const H=u(),L=u(),T=u(),_=u(),x=u(),M=h();export{O as LineOfSightRayIntersector};
