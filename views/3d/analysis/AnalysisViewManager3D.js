/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import s from"../../../core/Collection.js";import i from"../../../core/Error.js";import{HandleOwner as t}from"../../../core/HandleOwner.js";import a from"../../../core/Logger.js";import{isNone as n,isSome as o,removeMaybe as r,destroyMaybe as l,abortMaybe as c}from"../../../core/maybe.js";import{createResolver as d,createAbortError as h,createTask as w,isAborted as u}from"../../../core/promiseUtils.js";import{schedule as m}from"../../../core/scheduling.js";import{property as y}from"../../../core/accessorSupport/decorators/property.js";import{subclass as _}from"../../../core/accessorSupport/decorators/subclass.js";const p=a.getLogger("esri.views.3d.analysis.AnalysisViewManager3D"),V="analyses-owner-handles";var A,v;!function(e){e[e.PENDING=0]="PENDING",e[e.CREATED=1]="CREATED"}(A||(A={})),function(e){e[e.ADDED=0]="ADDED",e[e.REMOVED=1]="REMOVED"}(v||(v={}));let g=class extends t{constructor(e){super(e),this._allAnalysisViews=new s,this._creatingViewCount=0,this._items=new Map,this._scheduledUpdateHandle=null,this._attachedToViewResolver=d(),this._analysisModules={"area-measurement":{module:null},dimensioning:{module:null},"direct-line-measurement":{module:null},"line-of-sight":{module:null},slice:{module:null}}}destroy(){this._disconnectOwners(),this._attachedToViewResolver.reject(h("AnalysisViewManager was destroyed"))}attach(){this._connectOwners(),this._attachedToViewResolver.resolve()}detach(){this._disconnectOwners(),this._attachedToViewResolver.reject(h()),this._attachedToViewResolver=d(),this._attachedToViewResolver.promise.catch((()=>{}))}get updating(){return!this.view.ready||0!==this._creatingViewCount||this._allAnalysisViews.some((e=>e.updating))}get testInfo(){return{allAnalysisViews:this._allAnalysisViews}}async whenAnalysisView(e){await this._attachedToViewResolver.promise;const s=this._items.get(e);if(n(s)||s.state.list===v.REMOVED){throw new i("AnalysisViewManager:no-analysisview-for-analysis","The analysis has not been added to view.analyses",{analysis:e})}return s.createAnalysisViewTask.promise}_connectOwners(){this.handles.add(this._connectAnalysesCollection(this.view.analyses),V)}_disconnectOwners(){this.handles.remove(V),this._update(),this._creatingViewCount=0}_connectAnalysesCollection(e){for(const t of e)this._addAnalysis(t);const s=e.on("after-add",(e=>this._addAnalysis(e.item))),i=e.on("after-remove",(e=>this._removeAnalysis(e.item)));return{remove:()=>{s.remove(),i.remove();for(const s of e)this._removeAnalysis(s)}}}_addAnalysis(e){const s=this._items.get(e);if(null==s){const s={state:{view:A.PENDING,list:v.ADDED},analysis:e,view:null,createAnalysisViewTask:null};this._items.set(e,s),s.createAnalysisViewTask=w((e=>this._createAnalysisViewPromise(s,e)))}else s.state.list=v.ADDED}_removeAnalysis(e){const s=this._items.get(e);null!=s?(s.state.list=v.REMOVED,this._scheduleUpdate()):p.error("Trying to remove analysis which was not added")}_scheduleUpdate(){o(this._scheduledUpdateHandle)||(this._scheduledUpdateHandle=m((()=>this._update())))}_update(){this._scheduledUpdateHandle=r(this._scheduledUpdateHandle),this._items.forEach((e=>{if(e.state.list===v.REMOVED)switch(this._items.delete(e.analysis),e.state.view){case A.PENDING:e.createAnalysisViewTask=c(e.createAnalysisViewTask);break;case A.CREATED:o(e.view)&&(this._allAnalysisViews.remove(e.view),e.view=l(e.view),e.createAnalysisViewTask=null)}}))}async _createAnalysisViewPromise(e,s){const i=e.analysis,t=i.type,a=this._analysisModules[t];if(this._creatingViewCount+=1,n(a.module))try{a.module=await this._loadAnalysisModule(t)}catch(r){throw this._creatingViewCount-=1,r}if(u(s))throw this._creatingViewCount-=1,h("AnalysisView creation aborted");const o=new a.module.default({analysis:i,view:this.view});try{await o.when()}catch(r){throw this._creatingViewCount-=1,r}if(u(s))throw this._creatingViewCount-=1,o.destroy(),h("AnalysisView creation aborted");return e.view=o,e.state.view=A.CREATED,this._allAnalysisViews.add(o),this._creatingViewCount-=1,o}_loadAnalysisModule(e){switch(e){case"area-measurement":return import("./AreaMeasurementAnalysisView3D.js");case"dimensioning":return import("./DimensioningAnalysisView3D.js");case"direct-line-measurement":return import("./DirectLineMeasurementAnalysisView3D.js");case"line-of-sight":return import("./LineOfSightAnalysisView3D.js");case"slice":return import("./SliceAnalysisView3D.js")}}};e([y()],g.prototype,"updating",null),e([y({constructOnly:!0})],g.prototype,"view",void 0),e([y()],g.prototype,"_allAnalysisViews",void 0),e([y()],g.prototype,"_creatingViewCount",void 0),g=e([_("esri.views.3d.analysis.AnalysisViewManager3D")],g);const D=g;export{D as default};
