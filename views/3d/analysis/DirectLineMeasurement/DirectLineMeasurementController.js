/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import t from"../../../../core/Accessor.js";import i from"../../../../core/Handles.js";import s from"../../../../core/Logger.js";import{destroyMaybe as o,isNone as r,isSome as n}from"../../../../core/maybe.js";import{createQuantity as a}from"../../../../core/quantityUtils.js";import{when as c,watch as l,syncAndInitial as m}from"../../../../core/reactiveUtils.js";import{property as p}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as d}from"../../../../core/accessorSupport/decorators/subclass.js";import{i as h}from"../../../../chunks/vec3.js";import{c as u}from"../../../../chunks/vec3f64.js";import{geodesicLength as v}from"../../../../geometry/geometryEngine.js";import f from"../../../../geometry/Polyline.js";import{canProjectWithoutEngine as _,projectPointToVector as j,projectPointToWGS84ComparableLonLat as y}from"../../../../geometry/projection.js";import{getSphericalPCPF as g,SphericalECEFSpatialReference as D,WGS84ECEFSpatialReference as P}from"../../../../geometry/projectionEllipsoid.js";import{isSupported as w,geodesicLengths as z,inverseGeodeticSolver as A}from"../../../../geometry/support/geodesicUtils.js";import{MeasurementMode as R}from"../interfaces.js";import{applyProjectionAndElevationAlignment as E,logFailedGeometryProjectionError as b}from"../support/projectionUtils.js";import{UnitNormalizer as M}from"../support/UnitNormalizer.js";const S=s.getLogger("esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementController"),C=1e5;let L=class extends t{constructor(e){super(e),this._unitNormalizer=new M,this._handles=new i,this._tempStartPosition=u(),this._tempEndPosition=u(),this._tempCornerPosition=u()}initialize(){this._handles.add(c((()=>this.view?.ready),(()=>this._initialize()),{once:!0,sync:!0,initial:!0}))}destroy(){this._handles=o(this._handles)}_initialize(){const e=this.view.spatialReference,t=g(e),i=t===D?P:t;this._sphericalPCPF=i;const s=_(e,i);this._unitNormalizer.spatialReference=s?i:e,this._handles.add([l((()=>({viewData:this.viewData,startPoint:this.analysis.startPoint})),(({viewData:e,startPoint:t})=>{e.elevationAlignedStartPoint=this._applyProjectionAndElevationAlignment(t)}),m),l((()=>({viewData:this.viewData,endPoint:this.analysis.endPoint})),(({viewData:e,endPoint:t})=>{e.elevationAlignedEndPoint=this._applyProjectionAndElevationAlignment(t)}),m),l((()=>({result:this._computedResult,viewData:this.viewData})),(({result:e,viewData:t})=>{t.result=e}),m)])}_applyProjectionAndElevationAlignment(e){if(r(e))return e;const t=E(e,this.view.spatialReference,this.view.elevationProvider);return r(t)?(b(this.analysis,e.spatialReference,S),null):t}get _computedResult(){const{elevationAlignedStartPoint:e,elevationAlignedEndPoint:t,measurementMode:i}=this.viewData;if(r(e)||r(t))return null;const s=this._euclideanDistances(e,t),o=this._geodesicDistance(e,t,s.horizontal.value),n=i===R.Geodesic||i===R.Auto&&s.horizontal.value>C?"geodesic":"euclidean";return{mode:n,distance:"euclidean"===n?s.direct:o,directDistance:s.direct,horizontalDistance:s.horizontal,verticalDistance:s.vertical,geodesicDistance:o}}_euclideanDistances(e,t){const i=e.clone();i.z=t.z;const s=this._tempStartPosition,o=this._tempEndPosition,r=this._tempCornerPosition,n=this.view.spatialReference,c=this._sphericalPCPF,l=_(n,c)?c:n;j(e,s,l),j(t,o,l),j(i,r,l);const m=h(s,o),p=h(r,o),d=Math.abs(t.z-e.z),u=e=>this._unitNormalizer.normalizeDistance(e),v=u(m),f=u(p),y=u(d);return{direct:a(v,"meters"),horizontal:a(f,"meters"),vertical:a(y,"meters")}}_geodesicDistance(e,t,i){const s=e.spatialReference,o=new f({spatialReference:s});o.addPath([e,t]);const r=s.isGeographic&&w(s)?z([o],"meters")[0]:s.isWebMercator?v(o,"meters"):null,c=n(r)?r:this._fallbackGeodesicDistance(e,t,i);return a(c,"meters")}_fallbackGeodesicDistance(e,t,i){if(y(e,U)&&y(t,k)){const e={distance:0};return A(e,U,k),e.distance}return i}};e([p()],L.prototype,"view",void 0),e([p()],L.prototype,"analysis",void 0),e([p()],L.prototype,"viewData",void 0),e([p()],L.prototype,"_computedResult",null),L=e([d("esri.views.3d.analysis.DirectLineMeasurement.DirectLineMeasurementController")],L);const U=u(),k=u();export{L as DirectLineMeasurementController};
