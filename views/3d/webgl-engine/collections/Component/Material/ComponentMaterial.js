/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../../../chunks/tslib.es6.js";import{releaseMaybe as t,isSome as r,isNone as s}from"../../../../../../core/maybe.js";import{e as o,t as a}from"../../../../../../chunks/mat3.js";import{a as i}from"../../../../../../chunks/mat3f32.js";import{F as n}from"../../../../../../chunks/vec3.js";import{f as l}from"../../../../../../chunks/vec3f32.js";import{v as h}from"../../../../../../chunks/vec4.js";import{f as u}from"../../../../../../chunks/vec4f32.js";import{ColorMixModeEnum as p}from"../../../../layers/support/symbolColorUtils.js";import{OverlayIndex as c,RenderTargetType as d}from"../../../../terrain/interfaces.js";import{ComponentTechnique as m}from"./ComponentTechnique.js";import{ComponentTechniqueConfiguration as g,IntegratedMeshMode as T}from"./ComponentTechniqueConfiguration.js";import{ComponentDataType as y}from"./shader/ComponentData.glsl.js";import{g as x,a as v}from"../../../../../../chunks/ComponentShader.glsl.js";import{VertexDiscardMode as f}from"./shader/VertexDiscardByOpacity.glsl.js";import{parameter as M,parameterBlock as b,MaterialBase as O,MaterialParameterBlock as C}from"../../../core/material/MaterialBase.js";import{RenderPassIdentifier as w,MaterialSubPass as S}from"../../../core/renderPasses/AllRenderPasses.js";import{ShaderOutput as P}from"../../../core/shaderLibrary/ShaderOutputOptions.js";import{NormalAttributeType as N}from"../../../core/shaderLibrary/attributes/NormalAttribute.glsl.js";import{NormalsDoubleSidedMode as A}from"../../../core/shaderLibrary/shading/Normals.glsl.js";import{PBRMode as D}from"../../../core/shaderLibrary/shading/PhysicallyBasedRenderingParameters.glsl.js";import{defaultMaskAlphaCutoff as q}from"../../../core/shaderLibrary/util/AlphaCutoff.js";import{EllipsoidMode as R}from"../../../core/shaderLibrary/util/EllipsoidMode.js";import{TwoVectorPosition as j}from"../../../core/util/TwoVectorPosition.js";import{AlphaDiscardMode as E,TransparencyPassType as I,CullFaceOptions as F}from"../../../lib/basicInterfaces.js";class _ extends O{constructor(e,t){super(),this.toMapSpace=t,this.baseColor=u(1,1,1,1),this.usePBR=!1,this.hasParametersFromSource=!1,this.mrrFactors=l(1,1,.5),this.emissiveFactor=l(0,0,0),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null,this.objectOpacity=1,this.commonMaterialParameters=new B,this.componentParameters=new L,this.textureAlphaCutoff=q,this.alphaDiscardMode=E.Opaque,this.isIntegratedMesh=!1,this.polygonOffsetEnabled=!1,this.ellipsoidMode=R.Earth,this.hasOccludees=!1,this._techniqueConfiguration=new g;const r=new j(e.position),s=i(e.rotationScale);o(s,s),this.transformNormalGlobalFromModel=a(s,s),this.transformWorldFromModelTL=r.low,this.transformWorldFromModelTH=r.high,this.transformWorldFromModelRS=e.rotationScale}dispose(){this._technique=t(this._technique),this.baseColorTexture=null,this.metallicRoughnessTexture=null,this.emissionTexture=null,this.occlusionTexture=null,this.normalTexture=null}get texture(){return r(this.baseColorTexture)?this.baseColorTexture.glTexture:null}get textureMetallicRoughness(){return r(this.metallicRoughnessTexture)?this.metallicRoughnessTexture.glTexture:null}get textureEmissive(){return r(this.emissionTexture)?this.emissionTexture.glTexture:null}get textureOcclusion(){return r(this.occlusionTexture)?this.occlusionTexture.glTexture:null}get textureNormal(){return r(this.normalTexture)?this.normalTexture.glTexture:null}prepareTechnique(e,t,o,a){const i=this._techniqueConfiguration;i.hasVertexColors=a.colors,i.hasNormals=a.normals,i.textureCoordinateType=a.textureCoordinates,i.hasMetalnessAndRoughnessTexture=r(this.metallicRoughnessTexture),i.hasEmissionTexture=r(this.emissionTexture),i.hasOcclusionTexture=r(this.occlusionTexture),i.hasNormalTexture=r(this.normalTexture),i.transparencyPassType=t.identifier===w.Material&&null!=o.transparencyPassType?o.transparencyPassType:I.NONE,i.hasMultipassTerrain=t.identifier===w.Material&&null!=o.multipassTerrain&&o.multipassTerrain.enabled,i.cullAboveGround=t.identifier===w.Material&&null!=o.multipassTerrain&&o.multipassTerrain.cullAboveGround,i.ellipsoidMode=this.ellipsoidMode,i.componentData=this.componentParameters.type,i.cullFace=this.commonMaterialParameters.cullFace,i.doubleSidedMode=this.commonMaterialParameters.doubleSided?A.View:A.None,i.hasBaseColorTexture=r(this.baseColorTexture);const n=this._computeWhichMaterialPass();i.blendingEnabled=n===V.Transparent||n===V.OpaqueAndTransparent,i.alphaDiscardMode=this.alphaDiscardMode,i.integratedMeshMode=this.isIntegratedMesh?X(o)?x(o)?T.ColorOverlayWithWater:T.ColorOverlay:T.NoOverlay:T.None,i.isGround=this.isIntegratedMesh,i.hasPolygonOffset=this.polygonOffsetEnabled;const l=this.hasParametersFromSource&&s(this.baseColorTexture);return i.pbrMode=i.integratedMeshMode===T.ColorOverlayWithWater?D.WaterOnIntegratedMesh:this.usePBR?l?D.Schematic:D.Normal:D.Disabled,i.normalType=i.integratedMeshMode===T.None?i.hasNormals?N.CompressedAttribute:N.ScreenDerivative:N.Ground,i.hasSlicePlane=r(o.slicePlane)&&this.commonMaterialParameters.hasSlicePlane,t.identifier===w.ShadowMap?(i.output=P.Shadow,i.vertexDiscardMode=f.None):t.identifier===w.Highlight?(i.output=P.Highlight,i.vertexDiscardMode=f.None):(this._computeWhichMaterialPass()===V.OpaqueAndTransparent?i.vertexDiscardMode=t.transparent?f.Opaque:f.Transparent:i.vertexDiscardMode=f.None,i.output=H(t.subPass),t.subPass===S.Alpha&&(i.hasOccludees=o.hasOccludees),t.subPass===S.Color?(i.receiveAmbientOcclusion=o.ssaoHelper.ready,i.hasOccludees=o.hasOccludees,i.receiveShadows=o.shadowMap.ready,i.hasScreenSpaceReflections=o.ssr.enabled,i.hasCloudsReflections=r(o.clouds.data)):(i.receiveAmbientOcclusion=!1,i.receiveShadows=!1),i.snowCover=this.hasSnowCover(o)),this._technique=e.releaseAndAcquire(m,i,this._technique),this._setClean(),this._technique}hasSnowCover(e){return r(e.weather)&&e.weatherVisible&&"snowy"===e.weather.type&&"enabled"===e.weather.snowCover}submit(e,t,s){if(0===this.objectOpacity)return;const o=s.renderable.geometry,a=s.components,i=s.renderable.meta.cameraDepthSquared,n=a.geometryRanges,l=a.highlightRanges,h=a.defaultShadowMapRanges;switch(this._computeWhichMaterialPass()){case V.Opaque:e.materialOpaque.submitDraw(this,o,n,i);break;case V.Transparent:e.materialTransparent.submitDraw(this,o,n,i);break;case V.OpaqueAndTransparent:e.materialOpaque.submitDraw(this,o,n,i),e.materialTransparent.submitDraw(this,o,n,i);break;case V.IntegratedMesh:e.materialIntegratedMesh.submitDraw(this,o,n,i),U(t)&&e.highlightIntegratedMesh.submitDraw(this,o,n,i)}const u=this.componentParameters.castShadows!==W.None;u&&e.shadowMap.submitDraw(this,o,n,i),r(l)&&(e.highlight.submitDraw(this,o,l,i),u&&e.highlightShadowMap.submitDraw(this,o,l,i)),u&&r(h)&&e.defaultShadowMap.submitDraw(this,o,h,i)}get attributeLocations(){return v}_computeWhichMaterialPass(){return this.isIntegratedMesh?V.IntegratedMesh:this.objectOpacity<1?V.Transparent:this.componentParameters.opaqueOverride===W.All?V.Opaque:this.baseColor[3]<1||this.alphaDiscardMode===E.Blend||this.alphaDiscardMode===E.MaskBlend?V.Transparent:this.componentParameters.transparent===W.None?V.Opaque:this.componentParameters.transparent===W.All?V.Transparent:V.OpaqueAndTransparent}}var k,V,W;e([M({vectorOps:h})],_.prototype,"baseColor",void 0),e([M()],_.prototype,"usePBR",void 0),e([M()],_.prototype,"hasParametersFromSource",void 0),e([M({vectorOps:n})],_.prototype,"mrrFactors",void 0),e([M({vectorOps:n})],_.prototype,"emissiveFactor",void 0),e([M({dispose:!0})],_.prototype,"baseColorTexture",void 0),e([M({dispose:!0})],_.prototype,"metallicRoughnessTexture",void 0),e([M({dispose:!0})],_.prototype,"emissionTexture",void 0),e([M({dispose:!0})],_.prototype,"occlusionTexture",void 0),e([M({dispose:!0})],_.prototype,"normalTexture",void 0),e([M()],_.prototype,"objectOpacity",void 0),e([b()],_.prototype,"commonMaterialParameters",void 0),e([b()],_.prototype,"componentParameters",void 0),e([M()],_.prototype,"textureAlphaCutoff",void 0),e([M()],_.prototype,"alphaDiscardMode",void 0),e([M()],_.prototype,"isIntegratedMesh",void 0),e([M()],_.prototype,"polygonOffsetEnabled",void 0),e([M()],_.prototype,"ellipsoidMode",void 0),e([M()],_.prototype,"hasOccludees",void 0),function(e){e[e.VERTEX=0]="VERTEX",e[e.GROUND=1]="GROUND",e[e.SCREEN_DERIVATIVE=2]="SCREEN_DERIVATIVE"}(k||(k={})),function(e){e[e.Opaque=0]="Opaque",e[e.Transparent=1]="Transparent",e[e.OpaqueAndTransparent=2]="OpaqueAndTransparent",e[e.IntegratedMesh=3]="IntegratedMesh"}(V||(V={}));class B extends C{constructor(){super(...arguments),this.doubleSided=!1,this.cullFace=F.Back,this.hasSlicePlane=!0}}e([M()],B.prototype,"doubleSided",void 0),e([M()],B.prototype,"cullFace",void 0),e([M()],B.prototype,"hasSlicePlane",void 0);class L extends C{constructor(){super(...arguments),this.externalColor=u(1,1,1,1),this.externalColorMixMode=p.Multiply,this.castShadows=W.All}get transparent(){return this.externalColor[3]<1?W.All:W.None}get opaqueOverride(){return this.externalColorMixMode===p.Replace&&1===this.externalColor[3]?W.All:W.None}get visible(){return this.externalColor[3]>0?W.All:W.None}get type(){return y.Uniform}}e([M({vectorOps:h})],L.prototype,"externalColor",void 0),e([M()],L.prototype,"externalColorMixMode",void 0),e([M()],L.prototype,"castShadows",void 0),function(e){e[e.All=0]="All",e[e.Some=1]="Some",e[e.None=2]="None"}(W||(W={}));class G extends C{constructor(){super(...arguments),this.texture=null,this.transparent=W.None,this.opaqueOverride=W.None,this.castShadows=W.None}get type(){return y.Varying}}function H(e){switch(e){case S.Color:return P.Color;case S.Alpha:return P.Alpha;case S.Depth:return P.Depth;case S.Normal:return P.Normal}}function U(e){return 0!==e.overlays.length&&r(e.overlays[c.INNER].getValidTexture(d.Highlight))}function X(e){return 0!==e.overlays.length&&r(e.overlays[c.INNER].getColorTextureNoRasterImage())}e([M()],G.prototype,"texture",void 0),e([M()],G.prototype,"transparent",void 0),e([M()],G.prototype,"opaqueOverride",void 0),e([M()],G.prototype,"castShadows",void 0);export{B as CommonMaterialParameters,_ as ComponentMaterial,W as ComponentParameterSummary,L as ComponentParametersUniform,G as ComponentParametersVarying,k as ShadingNormalSource};
