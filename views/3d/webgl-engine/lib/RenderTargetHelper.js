/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{generateUID as t}from"../../../../core/uid.js";import{PixelType as r,PixelFormat as i,TextureType as s,TextureSamplingMode as h,TextureWrapMode as o,RenderbufferFormat as d,TargetType as a,DepthStencilTargetType as u}from"../../../webgl/enums.js";import{FramebufferObject as p}from"../../../webgl/FramebufferObject.js";import{Renderbuffer as c}from"../../../webgl/Renderbuffer.js";import{Texture as T}from"../../../webgl/Texture.js";import{getGpuMemoryUsage as f}from"../../../webgl/Util.js";const l={dataType:r.UNSIGNED_BYTE,internalFormat:i.RGBA},g={};class n{constructor(e){this.rctx=e,this._activeTargets=new Set,this._depthTextures=new Map,this._depthBuffers=new Map,this._colorTextures=new Map,this._framebuffers=new Map,this.depthTextureSupported=e.capabilities.depthTexture}dispose(){this._depthBuffers.forEach((e=>e.dispose())),this._depthBuffers.clear(),this._depthTextures.forEach((e=>e.dispose())),this._depthTextures.clear(),this._colorTextures.forEach((e=>e.dispose())),this._colorTextures.clear(),this._framebuffers.forEach((e=>e.dispose())),this._framebuffers.clear(),this._activeTargets.clear()}disposeTargetResource(e){const t=e.id;this._activeTargets.has(t)&&(this._activeTargets.delete(t),this._disposeWithFramebuffers(this._depthTextures,t),this._disposeWithFramebuffers(this._depthBuffers,t),this._disposeWithFramebuffers(this._colorTextures,t))}_disposeWithFramebuffers(e,t){const r=e.get(t);r&&(this._framebuffers.forEach(((e,t)=>{e.colorAttachment!==r&&e.depthStencilAttachment!==r||(e.detachAll(),e.dispose(),this._framebuffers.delete(t))})),r.dispose(),e.delete(t))}getDepthTexture(e,t){if(!this.depthTextureSupported)return null;let d=this._depthTextures.get(e.id);return!d||d.descriptor.width===t.width&&d.descriptor.height===t.height||(d.dispose(),d=null),d||(d=new T(this.rctx,{target:s.TEXTURE_2D,pixelFormat:i.DEPTH_STENCIL,dataType:r.UNSIGNED_INT_24_8,samplingMode:h.NEAREST,wrapMode:o.CLAMP_TO_EDGE,width:t.width,height:t.height}),this._depthTextures.set(e.id,d),this._activeTargets.add(e.id)),d}getAllocatedDepthTexture(e){return this._depthTextures.get(e.id)}getDepthBuffer(e,t){if(this.depthTextureSupported)return null;let r=this._depthBuffers.get(e.id);return r?r.descriptor.width===t.width&&r.descriptor.height===t.height||r.resize(t.width,t.height):(r=new c(this.rctx,{internalFormat:d.DEPTH_STENCIL,...t}),this._depthBuffers.set(e.id,r),this._activeTargets.add(e.id)),r}getColorTexture(e,t){let r=this._colorTextures.get(e.id);return r&&(r.descriptor.width===t.width&&r.descriptor.height===t.height||(r.dispose(),r=null)),r||(r=new T(this.rctx,{target:s.TEXTURE_2D,pixelFormat:i.RGBA,internalFormat:e.internalFormat,dataType:e.dataType,samplingMode:null!=e.samplingMode?e.samplingMode:h.LINEAR,wrapMode:o.CLAMP_TO_EDGE,width:t.width,height:t.height}),this._colorTextures.set(e.id,r),this._activeTargets.add(e.id)),r}getAllocatedColorTexture(e){return this._colorTextures.get(e.id)}registerDepthTarget(e={}){return{id:t(),...g,...e}}registerColorTarget(e={}){return{id:t(),...l,...e}}getFramebuffer(t,r,i){const s=this._getKey(r,i);let h=this._framebuffers.get(s);const o=this.getColorTexture(r,t);if(this.depthTextureSupported){const r=i?this.getDepthTexture(i,t):void 0;if(!h)return h=e(i)?new p(this.rctx,{colorTarget:a.TEXTURE,depthStencilTarget:u.DEPTH_STENCIL_TEXTURE},o,r):new p(this.rctx,{colorTarget:a.TEXTURE,depthStencilTarget:u.NONE},o),this._framebuffers.set(s,h),h;return(h.width!==t.width||h.height!==t.height||h.colorTexture!==o||h.depthStencilTexture!==r)&&(h.detachAll(),h.resize(t.width,t.height),h.attachColorTexture(o),h.attachDepthStencilTexture(r)),h}const d=i?this.getDepthBuffer(i,t):void 0;if(!h)return h=new p(this.rctx,{colorTarget:a.TEXTURE,depthStencilTarget:i?u.DEPTH_STENCIL_RENDER_BUFFER:u.NONE},o,d),this._framebuffers.set(s,h),h;return(h.width!==t.width||h.height!==t.height||h.colorTexture!==o)&&(h.detachAll(),h.resize(t.width,t.height),h.attachColorTexture(o),h.attachDepthStencilBuffer(d)),h}_getKey(e,t){return`${e.id}_${t?t.id:"X"}_${e.name}${t?"_"+t.name:""}`}get gpuMemoryUsage(){let e=0;const t=new Set,r=r=>{t.has(r)||(t.add(r),e+=f(r))};return this._depthTextures.forEach(r),this._colorTextures.forEach(r),this._depthBuffers.forEach(r),e}}export{n as RenderTargetHelper};
