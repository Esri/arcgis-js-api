/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../core/ObjectPool","../../../../core/PooledArray","../../../../chunks/vec3f64","../../../../chunks/vec3","../../support/geometryUtils","./Util"],(function(e,t,n,i,r,o,s){"use strict";let a=function(){function t(e,t){this._objectToBoundingSphere=e,this._maximumObjectsPerNode=10,this._maximumDepth=20,this._degenerateObjects=new Set,this._objectCount=0,t&&(void 0!==t.maximumObjectsPerNode&&(this._maximumObjectsPerNode=t.maximumObjectsPerNode),void 0!==t.maximumDepth&&(this._maximumDepth=t.maximumDepth)),this._root=new c(null,i.fromValues(0,0,0),0)}var a=t.prototype;return a.destroy=function(){this._degenerateObjects.clear(),this._root=null,c.clearPool(),b[0]=null,N.prune(),V.prune(),k.prune()},a.add=function(e,t){const n=S(e);t=null==t?n.length:t,this._objectCount+=t,this._grow(n,t);const i=c.acquire();for(let e=0;e<t;e++){const t=n[e];this._isDegenerate(t)?this._degenerateObjects.add(t):(i.init(this._root),this._add(t,i))}c.release(i)},a.remove=function(e,t){const n=S(e);this._objectCount-=n.length;const i=c.acquire();for(const e of n){const n=t||this._boundingSphereFromObject(e,M);this._isValidRadius(n.radius)?(i.init(this._root),this._remove(e,n,i)):this._degenerateObjects.delete(e)}c.release(i),this._shrink()},a.update=function(e,t){!this._isValidRadius(t.radius)&&this._isDegenerate(e)||(this.remove(e,t),this.add(e))},a.forEachAlongRay=function(e,t,n){const i=o.ray.wrap(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNode(i,e))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObject(i,e)&&n(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObject(i,e)&&n(e)})),!0}))},a.forEachAlongRayWithVerticalOffset=function(e,t,n,i){const r=o.ray.wrap(e,t);this._forEachNode(this._root,(e=>{if(!this._intersectsNodeWithOffset(r,e,i))return!1;const t=e.node;return t.terminals.forAll((e=>{this._intersectsObjectWithOffset(r,e,i)&&n(e)})),null!==t.residents&&t.residents.forAll((e=>{this._intersectsObjectWithOffset(r,e,i)&&n(e)})),!0}))},a.forEach=function(e){this._forEachNode(this._root,(t=>{const n=t.node;return n.terminals.forAll(e),null!==n.residents&&n.residents.forAll(e),!0})),this._degenerateObjects.forEach(e)},a.forEachDegenerateObject=function(e){this._degenerateObjects.forEach(e)},a.findClosest=function(e,t,n,i,r){return this._findClosest(e,"front-to-back"===t?1:-1,n,i,r)},a.forEachInDepthRange=function(e,t,n,i,r,o,s,a){this._forEachInDepthRange(e,t,"front-to-back"===n?1:-1,i,r,o,s,a)},a.forEachNode=function(e){this._forEachNode(this._root,(t=>e(t.node,t.center,2*t.halfSize)))},a._intersectsNode=function(e,t){return l(t.center,2*-t.halfSize,O),l(t.center,2*t.halfSize,y),s.rayBoxTest(e.origin,e.direction,O,y)},a._intersectsNodeWithOffset=function(e,t,n){return l(t.center,2*-t.halfSize,O),l(t.center,2*t.halfSize,y),n.applyToMinMax(O,y),s.rayBoxTest(e.origin,e.direction,O,y)},a._intersectsObject=function(e,t){const n=this._objectToBoundingSphere.getRadius(t);return!(n>0)||o.sphere.intersectsRay(o.sphere.wrap(n,this._objectToBoundingSphere.getCenter(t)),e)},a._intersectsObjectWithOffset=function(e,t,n){const i=this._objectToBoundingSphere.getRadius(t);return!(i>0)||o.sphere.intersectsRay(n.applyToBoundingSphere(i,this._objectToBoundingSphere.getCenter(t)),e)},a._forEachNode=function(e,t){let n=c.acquire().init(e);const i=[n];for(;0!==i.length;){if(n=i.pop(),t(n)&&!n.isLeaf())for(let e=0;e<n.node.children.length;e++){n.node.children[e]&&i.push(c.acquire().init(n).advance(e))}c.release(n)}},a._forEachNodeDepthOrdered=function(e,t,n,i=1){let r=c.acquire().init(e);const o=[r];for(!function(e,t,n){if(!V.length)for(let e=0;e<8;++e)V.push({index:0,distance:0});for(let n=0;n<8;++n){const i=m[n];V.data[n].index=n,V.data[n].distance=_(e,t,i)}V.sort(((e,t)=>e.distance-t.distance)),n.clear();for(let e=0;e<8;++e)n.push(V.data[e].index)}(n,i,k);0!==o.length;){if(r=o.pop(),t(r)&&!r.isLeaf())for(let e=7;e>=0;--e){const t=k.data[e];if(t>=r.node.children.length)continue;r.node.children[t]&&o.push(c.acquire().init(r).advance(t))}c.release(r)}},a._findClosest=function(e,t,n,i,o){let s=1/0,a=1/0,c=null;const h=f(e,t);let u=0;const l=r=>{if(++u,i&&!i(r))return;const o=this._objectToBoundingSphere.getCenter(r),h=this._objectToBoundingSphere.getRadius(r);if(n&&d(o,h,n))return;const l=_(e,t,o),f=l-h;f<s&&(s=f,a=l+h,c=r)};return this._forEachNodeDepthOrdered(this._root,(i=>{if(null!=o&&u>=o)return!1;if(n&&d(i.center,i.halfSize*g,n))return!1;r.scale(x,h,i.halfSize),r.add(x,x,i.center);if(_(e,t,x)>a)return!1;const s=i.node;return s.terminals.forAll((e=>{l(e)})),null!==s.residents&&s.residents.forAll((e=>{l(e)})),!0}),e,t),c},a._forEachInDepthRange=function(e,t,n,i,o,s,a,c){let h=-1/0,u=1/0;const l={setRange:e=>{1===n?(h=Math.max(h,e.near),u=Math.min(u,e.far)):(h=Math.max(h,-e.far),u=Math.min(u,-e.near))}};l.setRange(i);const m=_(t,n,e),p=f(t,n),b=f(t,-1*n);let S=0;const j=e=>{if(++S,a&&!a(e))return;const i=this._objectToBoundingSphere.getCenter(e),r=this._objectToBoundingSphere.getRadius(e),c=_(t,n,i)-m;c-r>u||c+r<h||s&&d(i,r,s)||o(e,l)};this._forEachNodeDepthOrdered(this._root,(e=>{if(null!=c&&S>=c)return!1;if(s&&d(e.center,e.halfSize*g,s))return!1;r.scale(x,p,e.halfSize),r.add(x,x,e.center);if(_(t,n,x)-m>u)return!1;r.scale(x,b,e.halfSize),r.add(x,x,e.center);if(_(t,n,x)-m<h)return!1;const i=e.node;return i.terminals.forAll((e=>{j(e)})),null!==i.residents&&i.residents.forAll((e=>{j(e)})),!0}),t,n)},a._remove=function(e,t,n){N.clear();const i=n.advanceTo(t,((e,t)=>{N.push(e.node),N.push(t)}))?n.node.terminals:n.node.residents;if(i.removeUnordered(e),0===i.length)for(let e=N.length-2;e>=0;e-=2){const t=N.data[e],n=N.data[e+1];if(!this._purge(t,n))break}},a._nodeIsEmpty=function(e){if(0!==e.terminals.length)return!1;if(null!==e.residents)return 0===e.residents.length;for(let t=0;t<e.children.length;t++)if(e.children[t])return!1;return!0},a._purge=function(e,t){return t>=0&&(e.children[t]=null),!!this._nodeIsEmpty(e)&&(null===e.residents&&(e.residents=new n({shrink:!0})),!0)},a._add=function(e,t){t.advanceTo(this._boundingSphereFromObject(e,M))?t.node.terminals.push(e):(t.node.residents.push(e),t.node.residents.length>this._maximumObjectsPerNode&&t.depth<this._maximumDepth&&this._split(t))},a._split=function(e){const t=e.node.residents;e.node.residents=null;for(let n=0;n<t.length;n++){const i=c.acquire().init(e);this._add(t.data[n],i),c.release(i)}},a._grow=function(e,t){if(0===t)return;const n=this._boundingSphereFromObjects(e,t,((e,t)=>this._boundingSphereFromObject(e,t)),E);if(this._isValidRadius(n.radius)&&!this._fitsInsideTree(n))if(this._nodeIsEmpty(this._root.node))r.copy(this._root.center,n.center),this._root.halfSize=1.25*n.radius;else{const e=c.acquire();this._rootBoundsForRootAsSubNode(n,e),this._placingRootViolatesMaxDepth(e)?this._rebuildTree(n,e):this._growRootAsSubNode(e),c.release(e)}},a._rebuildTree=function(e,t){r.copy(z.center,t.center),z.radius=t.halfSize;const n=this._boundingSphereFromObjects([e,z],2,(e=>e),R),i=c.acquire().init(this._root);this._root.initFrom(null,n.center,1.25*n.radius),this._forEachNode(i,(e=>(this.add(e.node.terminals.data,e.node.terminals.length),null!==e.node.residents&&this.add(e.node.residents.data,e.node.residents.length),!0))),c.release(i)},a._placingRootViolatesMaxDepth=function(e){let t=0;this._forEachNode(this._root,(e=>(t=Math.max(t,e.depth),!0)));return t+Math.log(e.halfSize/this._root.halfSize)*Math.LOG2E>this._maximumDepth},a._rootBoundsForRootAsSubNode=function(e,t){const n=e.radius,i=e.center;let r=-1/0;const o=this._root.center,s=this._root.halfSize;for(let e=0;e<3;e++){const t=o[e]-s-(i[e]-n),a=i[e]+n-(o[e]+s),c=Math.max(0,Math.ceil(t/(2*s))),h=Math.max(0,Math.ceil(a/(2*s)))+1,u=Math.pow(2,Math.ceil(Math.log(c+h)*Math.LOG2E));r=Math.max(r,u),T[e].min=c,T[e].max=h}for(let e=0;e<3;e++){let t=T[e].min,n=T[e].max;const i=(r-(t+n))/2;t+=Math.ceil(i),n+=Math.floor(i);const a=o[e]-s-t*s*2;j[e]=a+(n+t)*s}return t.initFrom(null,j,r*s,0)},a._growRootAsSubNode=function(e){const t=this._root.node;r.copy(E.center,this._root.center),E.radius=this._root.halfSize,this._root.init(e),e.advanceTo(E,null,!0),e.node.children=t.children,e.node.residents=t.residents,e.node.terminals=t.terminals},a._shrink=function(){for(;;){const e=this._findShrinkIndex();if(-1===e)break;this._root.advance(e),this._root.depth=0}},a._findShrinkIndex=function(){if(0!==this._root.node.terminals.length||this._root.isLeaf())return-1;let e=null;const t=this._root.node.children;let n=0,i=0;for(;i<t.length&&null==e;)n=i++,e=t[n];for(;i<t.length;)if(t[i++])return-1;return n},a._isDegenerate=function(e){const t=this._objectToBoundingSphere.getRadius(e);return!this._isValidRadius(t)},a._isValidRadius=function(e){return!isNaN(e)&&e!==-1/0&&e!==1/0&&e>0},a._fitsInsideTree=function(e){const t=this._root.center,n=this._root.halfSize,i=e.center;return e.radius<=n&&i[0]>=t[0]-n&&i[0]<=t[0]+n&&i[1]>=t[1]-n&&i[1]<=t[1]+n&&i[2]>=t[2]-n&&i[2]<=t[2]+n},a._boundingSphereFromObject=function(e,t){return r.copy(t.center,this._objectToBoundingSphere.getCenter(e)),t.radius=this._objectToBoundingSphere.getRadius(e),t},a._boundingSphereFromObjects=function(e,t,n,i){if(1===t){const t=n(e[0],E);r.copy(i.center,t.center),i.radius=t.radius}else{O[0]=1/0,O[1]=1/0,O[2]=1/0,y[0]=-1/0,y[1]=-1/0,y[2]=-1/0;for(let i=0;i<t;i++){const t=n(e[i],E);this._isValidRadius(t.radius)&&(h(O,t.center,t.radius),u(y,t.center,t.radius))}r.lerp(i.center,O,y,.5),i.radius=Math.max(y[0]-O[0],y[1]-O[1],y[2]-O[2])/2}return i},e._createClass(t,[{key:"center",get:function(){return this._root.center}},{key:"size",get:function(){return 2*this._root.halfSize}},{key:"root",get:function(){return this._root.node}},{key:"maximumObjectsPerNode",get:function(){return this._maximumObjectsPerNode}},{key:"maximumDepth",get:function(){return this._maximumDepth}},{key:"objectCount",get:function(){return this._objectCount}}]),t}(),c=function(){function e(e,t,n=0){this.center=i.create(),this.initFrom(e,t,n,0)}var t=e.prototype;return t.init=function(e){return this.initFrom(e.node,e.center,e.halfSize,e.depth)},t.initFrom=function(t=null,n,i=this.halfSize,o=this.depth){return this.node=t||e.createEmptyNode(),n&&r.copy(this.center,n),this.halfSize=i,this.depth=o,this},t.advance=function(t){let n=this.node.children[t];n||(n=e.createEmptyNode(),this.node.children[t]=n),this.node=n,this.halfSize/=2,this.depth++;const i=m[t];return this.center[0]+=i[0]*this.halfSize,this.center[1]+=i[1]*this.halfSize,this.center[2]+=i[2]*this.halfSize,this},t.advanceTo=function(e,t,n=!1){for(;;){if(this.isTerminalFor(e))return t&&t(this,-1),!0;if(this.isLeaf()&&!n)return t&&t(this,-1),!1;this.isLeaf()&&(this.node.residents=null);const i=this._childIndex(e);t&&t(this,i),this.advance(i)}},t.isLeaf=function(){return null!=this.node.residents},t.isTerminalFor=function(e){return e.radius>this.halfSize/2},t._childIndex=function(e){const t=e.center,n=this.center;let i=0;for(let e=0;e<3;e++)n[e]<t[e]&&(i|=1<<e);return i},e.createEmptyNode=function(){return{children:[null,null,null,null,null,null,null,null],terminals:new n({shrink:!0}),residents:new n({shrink:!0})}},e.acquire=function(){return e._pool.acquire()},e.release=function(t){e._pool.release(t)},e.clearPool=function(){e._pool.prune()},e}();function h(e,t,n){e[0]=Math.min(e[0],t[0]-n),e[1]=Math.min(e[1],t[1]-n),e[2]=Math.min(e[2],t[2]-n)}function u(e,t,n){e[0]=Math.max(e[0],t[0]+n),e[1]=Math.max(e[1],t[1]+n),e[2]=Math.max(e[2],t[2]+n)}function l(e,t,n){return(n=n||e)[0]=e[0]+t,n[1]=e[1]+t,n[2]=e[2]+t,n}function d(e,t,n){return!o.frustum.intersectsSphere(n.planes,o.sphere.wrap(t,e))}function f(e,t){let n=1/0,i=null;for(let r=0;r<8;++r){const o=_(e,t,p[r]);o<n&&(n=o,i=p[r])}return i}function _(e,t,n){return t*(e[0]*n[0]+e[1]*n[1]+e[2]*n[2])}c._pool=new t(c);const m=[i.fromValues(-1,-1,-1),i.fromValues(1,-1,-1),i.fromValues(-1,1,-1),i.fromValues(1,1,-1),i.fromValues(-1,-1,1),i.fromValues(1,-1,1),i.fromValues(-1,1,1),i.fromValues(1,1,1)],p=[i.fromValues(-1,-1,-1),i.fromValues(-1,-1,1),i.fromValues(-1,1,-1),i.fromValues(-1,1,1),i.fromValues(1,-1,-1),i.fromValues(1,-1,1),i.fromValues(1,1,-1),i.fromValues(1,1,1)],g=Math.sqrt(3),b=[null];function S(e){return Array.isArray(e)?e:(b[0]=e,b)}const j=i.create(),x=i.create(),O=i.create(),y=i.create(),N=new n,M={center:i.create(),radius:0},E={center:i.create(),radius:0},z={center:i.create(),radius:0},R={center:i.create(),radius:0},T=[{min:0,max:0},{min:0,max:0},{min:0,max:0}],V=new n,k=new n;return a}));
