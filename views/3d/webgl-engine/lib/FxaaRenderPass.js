// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.17/esri/copyright.txt for details.

define(["require","exports","../../../../core/maybe","./DefaultVertexBufferLayouts","../../../webgl/BufferObject","../../../webgl/Program","../../../webgl/renderState","../../../webgl/VertexArrayObject"],(function(n,e,a,r,o,t,i,l){"use strict";var m=function(){function n(n){this.isEnabled=!1,this.vertexAttributeLocations={position:0},this.rctx=n}return n.prototype.enable=function(){if(this.isEnabled)return!0;var n=this.rctx;this.program=new t(n,s.shader.vertex,s.shader.fragment,this.vertexAttributeLocations),this.pipelineState=i.makePipelineState({colorWrite:i.defaultColorWriteParams});var e=new Float32Array([-1,-1,3,-1,-1,3]);return this.vao=new l(n,this.vertexAttributeLocations,{geometry:r.Pos2},{geometry:new o(n,34962,35044,e)}),this.isEnabled=!0,!0},n.prototype.disable=function(){this.isEnabled&&(this.program.dispose(),this.program=null,this.vao.dispose(),this.vao=null,this.isEnabled=!1)},n.prototype.render=function(n,e){this.enable();var r=this.rctx;r.bindVAO(this.vao),r.bindFramebuffer(e);var o={x:0,y:0,width:0,height:0};a.isSome(e)?(o.width=e.descriptor.width,o.height=e.descriptor.height):(o.width=r.gl.canvas.width,o.height=r.gl.canvas.height),r.bindProgram(this.program),r.setPipelineState(this.pipelineState),r.bindTexture(n.colorTexture,0),this.program.setUniform1i("uColorTexture",0),this.program.setUniform2f("uRcpFrameDimension",1/o.width,1/o.height),r.drawArrays(4,0,3)},n}(),s={shader:{vertex:"\n      #version 100\n      precision highp float;\n\n      attribute vec2 position;\n\n      varying   vec2 fCoordinate;\n\n      void main() {\n        fCoordinate = (position + 1.0 ) * 0.5;\n        gl_Position = vec4(position, -1, 1);\n      }",fragment:"\n      #version 100\n      #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      #else\n      precision mediump float;\n      #endif\n\n      /**\n       * @license\n       * Copyright (c) 2011 NVIDIA Corporation. All rights reserved.\n       *\n       * TO  THE MAXIMUM  EXTENT PERMITTED  BY APPLICABLE  LAW, THIS SOFTWARE  IS PROVIDED\n       * *AS IS*  AND NVIDIA AND  ITS SUPPLIERS DISCLAIM  ALL WARRANTIES,  EITHER  EXPRESS\n       * OR IMPLIED, INCLUDING, BUT NOT LIMITED  TO, NONINFRINGEMENT,IMPLIED WARRANTIES OF\n       * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  IN NO EVENT SHALL  NVIDIA\n       * OR ITS SUPPLIERS BE  LIABLE  FOR  ANY  DIRECT, SPECIAL,  INCIDENTAL,  INDIRECT,  OR\n       * CONSEQUENTIAL DAMAGES WHATSOEVER (INCLUDING, WITHOUT LIMITATION,  DAMAGES FOR LOSS\n       * OF BUSINESS PROFITS, BUSINESS INTERRUPTION, LOSS OF BUSINESS INFORMATION, OR ANY\n       * OTHER PECUNIARY LOSS) ARISING OUT OF THE  USE OF OR INABILITY  TO USE THIS SOFTWARE,\n       * EVEN IF NVIDIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n       */\n\n      #define FXAA_EDGE_THRESHOLD      (1.0/8.0)\n      #define FXAA_EDGE_THRESHOLD_MIN  (1.0/24.0)\n      #define FXAA_SEARCH_STEPS        16\n      #define FXAA_SEARCH_THRESHOLD    (1.0/4.0)\n      #define FXAA_SUBPIX_CAP          (3.0/4.0)\n      #define FXAA_SUBPIX_TRIM         (1.0/4.0)\n      #define FXAA_SUBPIX_TRIM_SCALE (1.0/(1.0 - FXAA_SUBPIX_TRIM))\n\n      uniform vec2 uRcpFrameDimension;\n      uniform sampler2D uColorTexture;\n      varying vec2 fCoordinate;\n\n      // Return the luma, the estimation of luminance from rgb inputs.\n      // This approximates luma using one FMA instruction,\n      // skipping normalization and tossing out blue.\n      // FxaaLuma() will range 0.0 to 2.963210702.\n      float FxaaLuma(vec3 rgb) {\n        return rgb.y * (0.587 / 0.299) + rgb.x;\n      }\n      vec3 FxaaLerp3(vec3 a, vec3 b, float amountOfA) {\n        return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b);\n      }\n      vec4 FxaaTexOff(sampler2D tex, vec2 pos, ivec2 off, vec2 rcpFrame) {\n        float x = pos.x + float(off.x) * rcpFrame.x;\n        float y = pos.y + float(off.y) * rcpFrame.y;\n        return texture2D(tex, vec2(x, y));\n      }\n\n      // pos is the output of FxaaVertexShader interpolated across screen.\n      // xy -> actual texture position {0.0 to 1.0}\n      // rcpFrame should be a uniform equal to  {1.0/frameWidth, 1.0/frameHeight}\n      vec3 FxaaPixelShader(vec2 pos, sampler2D tex, vec2 rcpFrame) {\n        vec3 rgbN = FxaaTexOff(tex, pos.xy, ivec2( 0,-1), rcpFrame).xyz;\n        vec3 rgbW = FxaaTexOff(tex, pos.xy, ivec2(-1, 0), rcpFrame).xyz;\n        vec3 rgbM = FxaaTexOff(tex, pos.xy, ivec2( 0, 0), rcpFrame).xyz;\n        vec3 rgbE = FxaaTexOff(tex, pos.xy, ivec2( 1, 0), rcpFrame).xyz;\n        vec3 rgbS = FxaaTexOff(tex, pos.xy, ivec2( 0, 1), rcpFrame).xyz;\n        float lumaN = FxaaLuma(rgbN);\n        float lumaW = FxaaLuma(rgbW);\n        float lumaM = FxaaLuma(rgbM);\n        float lumaE = FxaaLuma(rgbE);\n        float lumaS = FxaaLuma(rgbS);\n        float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));\n        float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));\n        float range = rangeMax - rangeMin;\n        if (range < max(FXAA_EDGE_THRESHOLD_MIN, rangeMax * FXAA_EDGE_THRESHOLD)) {\n          return rgbM;\n        }\n        vec3 rgbL = rgbN + rgbW + rgbM + rgbE + rgbS;\n        float lumaL = (lumaN + lumaW + lumaE + lumaS) * 0.25;\n        float rangeL = abs(lumaL - lumaM);\n        float blendL = max(0.0, (rangeL / range) - FXAA_SUBPIX_TRIM) * FXAA_SUBPIX_TRIM_SCALE;\n        blendL = min(FXAA_SUBPIX_CAP, blendL);\n        vec3 rgbNW = FxaaTexOff(tex, pos.xy, ivec2(-1,-1), rcpFrame).xyz;\n        vec3 rgbNE = FxaaTexOff(tex, pos.xy, ivec2( 1,-1), rcpFrame).xyz;\n        vec3 rgbSW = FxaaTexOff(tex, pos.xy, ivec2(-1, 1), rcpFrame).xyz;\n        vec3 rgbSE = FxaaTexOff(tex, pos.xy, ivec2( 1, 1), rcpFrame).xyz;\n        rgbL += (rgbNW + rgbNE + rgbSW + rgbSE);\n        rgbL *= vec3(1.0/9.0);\n        float lumaNW = FxaaLuma(rgbNW);\n        float lumaNE = FxaaLuma(rgbNE);\n        float lumaSW = FxaaLuma(rgbSW);\n        float lumaSE = FxaaLuma(rgbSE);\n        float edgeVert =\n          abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +\n          abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +\n          abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));\n        float edgeHorz =\n          abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +\n          abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +\n          abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));\n        bool horzSpan = edgeHorz >= edgeVert;\n        float lengthSign = horzSpan ? -rcpFrame.y : -rcpFrame.x;\n        if(!horzSpan) {\n          lumaN = lumaW;\n          lumaS = lumaE;\n        }\n        float gradientN = abs(lumaN - lumaM);\n        float gradientS = abs(lumaS - lumaM);\n        lumaN = (lumaN + lumaM) * 0.5;\n        lumaS = (lumaS + lumaM) * 0.5;\n        if (gradientN < gradientS)\n        {\n          lumaN = lumaS;\n          lumaN = lumaS;\n          gradientN = gradientS;\n          lengthSign *= -1.0;\n        }\n        vec2 posN;\n        posN.x = pos.x + (horzSpan ? 0.0 : lengthSign * 0.5);\n        posN.y = pos.y + (horzSpan ? lengthSign * 0.5 : 0.0);\n        gradientN *= FXAA_SEARCH_THRESHOLD;\n        vec2 posP = posN;\n        vec2 offNP = horzSpan ? vec2(rcpFrame.x, 0.0) : vec2(0.0, rcpFrame.y);\n        float lumaEndN = lumaN;\n        float lumaEndP = lumaN;\n        bool doneN = false;\n        bool doneP = false;\n        posN += offNP * vec2(-1.0, -1.0);\n        posP += offNP * vec2( 1.0,  1.0);\n        for(int i = 0; i < FXAA_SEARCH_STEPS; i++) {\n          if(!doneN) {\n            lumaEndN = FxaaLuma(texture2D(tex, posN.xy).xyz);\n          }\n          if(!doneP) {\n            lumaEndP = FxaaLuma(texture2D(tex, posP.xy).xyz);\n          }\n          doneN = doneN || (abs(lumaEndN - lumaN) >= gradientN);\n          doneP = doneP || (abs(lumaEndP - lumaN) >= gradientN);\n          if(doneN && doneP) { break; }\n          if(!doneN) {\n            posN -= offNP;\n          }\n          if(!doneP) {\n            posP += offNP;\n          }\n        }\n        float dstN = horzSpan ? pos.x - posN.x : pos.y - posN.y;\n        float dstP = horzSpan ? posP.x - pos.x : posP.y - pos.y;\n        bool directionN = dstN < dstP;\n        lumaEndN = directionN ? lumaEndN : lumaEndP;\n        if(((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) {\n          lengthSign = 0.0;\n        }\n        float spanLength = (dstP + dstN);\n        dstN = directionN ? dstN : dstP;\n        float subPixelOffset = (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;\n        vec3 rgbF = texture2D(tex, vec2(\n          pos.x + (horzSpan ? 0.0 : subPixelOffset),\n          pos.y + (horzSpan ? subPixelOffset : 0.0))).xyz;\n        return FxaaLerp3(rgbL, rgbF, blendL);\n      }\n\n      void main() {\n        vec4 color;\n        vec2 screenCoord = fCoordinate;\n        // if (screenCoord.x < 0.5) {\n          color.rgb = FxaaPixelShader(screenCoord, uColorTexture, uRcpFrameDimension);\n        // } else if (screenCoord.x < 0.501 && screenCoord.x > 0.499) {\n        //   color.rgb = vec3(1,0,0);\n        // } else {\n        //   color = texture2D(uColorTexture, fCoordinate);\n        // }\n        color.a = 1.0;\n        gl_FragColor = color;\n      }"}};return m}));