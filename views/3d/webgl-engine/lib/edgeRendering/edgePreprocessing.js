/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../../core/typedArrayUtil","../../../../../core/arrayUtils","../../../../../core/mathUtils","../../../../../chunks/vec3f64","../../../../../chunks/vec3","../../../support/mathUtils"],(function(e,t,n,o,c,r,a){"use strict";const s=-1;function i(e,t){return e.cosAngle<t}function l(e,t){return e.cosAngle>t}function g(e,t){const n=o.acosClamped(e.cosAngle),c=f.fwd,s=f.ortho;a.directionFromTo(c,e.position1,e.position0);return n*(r.dot(r.cross(s,e.faceNormal0,e.faceNormal1),c)>0?-1:1)>t}const f={edge:{position0:c.create(),position1:c.create(),faceNormal0:c.create(),faceNormal1:c.create(),componentIndex:0,cosAngle:0},ortho:c.create(),fwd:c.create()},d={v0:c.create(),v1:c.create(),v2:c.create()},u={anglePlanar:4,angleSignificantEdge:35};e.extractEdges=function(e,c,a,p=u){const h=e.vertices.position,m=e.vertices.componentIndex,v=o.deg2rad(p.anglePlanar),A=o.deg2rad(p.angleSignificantEdge),y=Math.cos(A),w=Math.cos(v),I=f.edge,V=I.position0,x=I.position1,N=I.faceNormal0,E=I.faceNormal1,F=function(e){const t=e.faces.length/3,n=e.vertices.position,o=e.faces,c=d.v0,a=d.v1,s=d.v2,i=new Float32Array(3*t);for(let e=0;e<t;e++){const t=o[3*e+0],l=o[3*e+1],g=o[3*e+2];n.getVec(t,c),n.getVec(l,a),n.getVec(g,s),r.subtract(a,a,c),r.subtract(s,s,c),r.cross(c,a,s),r.normalize(c,c),i[3*e+0]=c[0],i[3*e+1]=c[1],i[3*e+2]=c[2]}return i}(e),b=function(e){const t=e.faces.length/3,n=e.faces,o=e.neighbors;let c=0;for(let e=0;e<t;e++){const t=o[3*e+0],r=o[3*e+1],a=o[3*e+2],i=n[3*e+0],l=n[3*e+1],g=n[3*e+2];c+=t===s||i<l?1:0,c+=r===s||l<g?1:0,c+=a===s||g<i?1:0}const r=new Int32Array(4*c);let a=0;for(let e=0;e<t;e++){const t=o[3*e+0],c=o[3*e+1],i=o[3*e+2],l=n[3*e+0],g=n[3*e+1],f=n[3*e+2];(t===s||l<g)&&(r[a++]=l,r[a++]=g,r[a++]=e,r[a++]=t),(c===s||g<f)&&(r[a++]=g,r[a++]=f,r[a++]=e,r[a++]=c),(i===s||f<l)&&(r[a++]=f,r[a++]=l,r[a++]=e,r[a++]=i)}return r}(e),U=b.length/4,M=c.allocate(U);let P=0;const k=U,D=a.allocate(k);let S=0,_=0,j=0;const z=n.range(0,U),C=new Float32Array(U);t.forEach(C,((e,t,n)=>{h.getVec(b[4*t+0],V),h.getVec(b[4*t+1],x),n[t]=r.distance(V,x)})),z.sort(((e,t)=>C[t]-C[e]));const L=new Array,O=new Array;for(let e=0;e<U;e++){const t=z[e],n=C[t],o=b[4*t+0],f=b[4*t+1],d=b[4*t+2],u=b[4*t+3],p=u===s;if(h.getVec(o,V),h.getVec(f,x),p)r.set(N,F[3*d+0],F[3*d+1],F[3*d+2]),r.copy(E,N),I.componentIndex=m.get(o),I.cosAngle=r.dot(N,E);else{if(r.set(N,F[3*d+0],F[3*d+1],F[3*d+2]),r.set(E,F[3*u+0],F[3*u+1],F[3*u+2]),I.componentIndex=m.get(o),I.cosAngle=r.dot(N,E),l(I,w))continue;I.cosAngle<-.9999&&r.copy(E,N)}_+=n,j++,p||i(I,y)?(c.write(M,P++,I),L.push(n)):g(I,v)&&(a.write(D,S++,I),O.push(n))}const T=new Float32Array(L.reverse()),q=new Float32Array(O.reverse());return{regular:{instancesData:c.trim(M,P),lodInfo:{lengths:T}},silhouette:{instancesData:a.trim(D,S),lodInfo:{lengths:q}},averageEdgeLength:_/j}},Object.defineProperty(e,"__esModule",{value:!0})}));
