/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/vec4f64","../../../../chunks/vec4","../../../../chunks/vec4f32","./DefaultVertexAttributeLocations","../../../webgl/BufferObject","../../../webgl/Util","../../../webgl/VertexArrayObject","./DefaultVertexBufferLayouts","./glUtil3D","../../support/debugFlags","../../../webgl/FramebufferObject","../shaders/HighlightTechnique"],(function(e,i,t,r,o,l,a,h,s,p,n,u,c){"use strict";const g=32;return function(){function d(e,t){this._rctx=t,this._grid={coverageMipmap:null,vao:null,verticalCellCount:0,horizontalCellCount:0,cellPixelSize:0,mipmapLevels:0,viewportWidth:0,viewportHeight:0},this.quadVAO=p.createQuadVAO(this._rctx);const o={colorTarget:0,depthStencilTarget:0,width:0,height:0},l={target:3553,pixelFormat:6408,dataType:5121,samplingMode:9729,wrapMode:33071,width:0,height:0};this.blur0Fbo=new u(this._rctx,o,l),this.blur1Fbo=new u(this._rctx,o,l),this.viewportToRestore=i.create(),this.defaultOptions={color:r.fromValues(1,0,1,1),haloColor:r.fromValues(1,0,1,1),haloOpacity:1,fillOpacity:.2,haloOpacityOccluded:.25,fillOpacityOccluded:.05,shadowColor:r.fromValues(1,0,1,1),shadowOpacity:.15,occludedShadowOpacity:.075};const a=new c.HighlightCompositionTechniqueConfiguration,h=(i,t)=>e.acquireAndReleaseExisting(c.HighlightCompositionTechnique,i,t);a.highlightStage=0,a.gridOptimization=!1,this.blurTechnique=h(a,this.blurTechnique),a.highlightStage=0,a.gridOptimization=!0,this.blurGridTechnique=h(a,this.blurGridTechnique),a.highlightStage=1,a.gridOptimization=!1,this.applyTechnique=h(a,this.applyTechnique),a.highlightStage=1,a.gridOptimization=!0,this.applyGridTechnique=h(a,this.applyGridTechnique),a.highlightStage=2,a.gridOptimization=!1,this.downsampleTechnique=h(a,this.downsampleTechnique)}var m=d.prototype;return m.dispose=function(){if(null!=!this.quadVAO){if(this._grid.coverageMipmap)for(let e=1;e<this._grid.coverageMipmap.length;e++)this._grid.coverageMipmap[e].dispose();this._grid.vao&&this._grid.vao.dispose(!0),this.quadVAO.dispose(!0),this.blur1Fbo.dispose(),this.blur0Fbo.dispose(),this.quadVAO=null,this.blur0Fbo=null,this.blur1Fbo=null}},m.setDefaultOptions=function(e){this.defaultOptions=e},m.render=function(e,i,r){const o=e.pixelRatio,l=n.HIGHLIGHTS_GRID_OPTIMIZATION_ENABLED,h=this._rctx;t.copy(this.viewportToRestore,e.fullViewport);const s=e.fullWidth,p=e.fullHeight,u=Math.ceil(s/o),c=Math.ceil(p/o);this.blur0Fbo.resize(u,c),this.blur1Fbo.resize(u,c),h.bindVAO(this.quadVAO);let d=null,m=null;l?(this._gridUpdateResources(i,g),this._gridComputeMipmap(),d=this._grid.vao,m=this.blurGridTechnique,h.bindTexture(this._grid.coverageMipmap[this._grid.mipmapLevels].colorTexture,1),m.program.setUniform1i("coverageTex",1)):(d=this.quadVAO,m=this.blurTechnique),m.bindPipelineState(h),h.bindProgram(m.program),h.bindVAO(d),h.bindFramebuffer(this.blur0Fbo),h.setViewport(0,0,u,c),h.setClearColor(0,0,0,0),h.clear(16384),m.program.setUniform1i("tex",0),h.bindTexture(i.colorTexture,0),m.program.setUniform2f("blurSize",1/u,0),h.drawArrays(m.primitiveType,0,a.vertexCount(d,"geometry")),h.bindFramebuffer(this.blur1Fbo),h.clear(16384),h.bindTexture(this.blur0Fbo.colorTexture,0),m.program.setUniform2f("blurSize",0,1/c),h.drawArrays(m.primitiveType,0,a.vertexCount(d,"geometry"));const b=l?this.applyGridTechnique:this.applyTechnique;if(h.bindFramebuffer(r),b.bindPipelineState(h),h.setViewport(this.viewportToRestore[0],this.viewportToRestore[1],this.viewportToRestore[2],this.viewportToRestore[3]),h.bindProgram(b.program),h.bindTexture(this.blur1Fbo.colorTexture,0),h.bindTexture(i.colorTexture,1),l){const e=this._grid.coverageMipmap[this._grid.mipmapLevels].colorTexture;h.bindTexture(e,2)}b.bindApplyPass(this.defaultOptions),h.drawArrays(b.primitiveType,0,a.vertexCount(d,"geometry")),h.bindVAO(null)},m._gridUpdateResources=function(e,i){const t=this._rctx,r=this._grid;let a=!1;if(null===r.coverageMipmap&&(r.coverageMipmap=[e],a=!0),r.viewportWidth===e.width&&r.viewportHeight===e.height||(a=!0,r.viewportWidth=e.width,r.viewportHeight=e.height),r.coverageMipmap[0]=e,r.cellPixelSize!==i&&(r.cellPixelSize=i,a=!0),a){for(let e=1;e<r.coverageMipmap.length;e++)r.coverageMipmap[e].dispose();r.mipmapLevels=Math.ceil(Math.log(r.cellPixelSize)*Math.LOG2E),r.coverageMipmap.length=r.mipmapLevels+1;for(let e=0;e<r.mipmapLevels;e++){const i=r.coverageMipmap[e],o={target:3553,pixelFormat:6407,dataType:33635,samplingMode:9729,wrapMode:33071,width:Math.ceil(i.width/2),height:Math.ceil(i.height/2)},l={colorTarget:0,depthStencilTarget:0,width:Math.ceil(i.width/2),height:Math.ceil(i.height/2)};r.coverageMipmap[e+1]=new u(t,l,o)}}const p=Math.ceil(e.height/r.cellPixelSize),n=Math.ceil(e.width/r.cellPixelSize);if(!r.vao||r.verticalCellCount!==p||r.horizontalCellCount!==n){r.verticalCellCount=p,r.horizontalCellCount=n;const e=p+1,i=n+1,a=1/p,u=1/n,c=6,g=4,d=new Float32Array(c*g*e*i);let m=0;for(let t=0;t<e;t++)for(let e=0;e<i;e++)d[m+0]=(e-.5)*u*2-1,d[m+1]=(t-.5)*a*2-1,d[m+2]=e*u,d[m+3]=t*a,d[m+4]=(e+.5)*u*2-1,d[m+5]=(t-.5)*a*2-1,d[m+6]=e*u,d[m+7]=t*a,d[m+8]=(e-.5)*u*2-1,d[m+9]=(t+.5)*a*2-1,d[m+10]=e*u,d[m+11]=t*a,d[m+12]=(e-.5)*u*2-1,d[m+13]=(t+.5)*a*2-1,d[m+14]=e*u,d[m+15]=t*a,d[m+16]=(e+.5)*u*2-1,d[m+17]=(t-.5)*a*2-1,d[m+18]=e*u,d[m+19]=t*a,d[m+20]=(e+.5)*u*2-1,d[m+21]=(t+.5)*a*2-1,d[m+22]=e*u,d[m+23]=t*a,m+=c*g;r.vao&&r.vao.dispose(!0),r.vao=new h(t,o.Default3D,{geometry:s.Pos2Tex},{geometry:l.createVertex(t,35044,d)})}},m._gridComputeMipmap=function(){const e=this._rctx,i=this._grid,t=this.downsampleTechnique.program;this.downsampleTechnique.bindPipelineState(e),e.bindVAO(this.quadVAO);for(let r=0;r<i.mipmapLevels;r++){e.bindFramebuffer(i.coverageMipmap[r+1]),e.bindTexture(i.coverageMipmap[r].colorTexture,0);const o=i.coverageMipmap[r+1].width,l=i.coverageMipmap[r+1].height;e.bindProgram(t),t.setUniform1i("tex",0),t.setUniform2f("invFramebufferDim",1/o,1/l),e.setViewport(0,0,o,l),e.drawArrays(5,0,a.vertexCount(this.quadVAO,"geometry"))}},m.getGpuMemoryUsage=function(){let e=a.getGpuMemoryUsage(this.blur0Fbo)+a.getGpuMemoryUsage(this.blur1Fbo);if(this._grid.coverageMipmap)for(const i of this._grid.coverageMipmap)e+=a.getGpuMemoryUsage(i);return e},e._createClass(d,[{key:"profilingCallback",get:function(){return n.HIGHLIGHTS_PROFILE_TO_CONSOLE?e=>console.log(e):null}},{key:"test",get:function(){return{coverage:this._grid.coverageMipmap,blur:[this.blur0Fbo,this.blur1Fbo]}}}]),d}()}));
