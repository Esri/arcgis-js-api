/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/tslib.es6","../../../../core/Accessor","../../../../core/MapUtils","../../../../core/maybe","../../../../core/uid","../../../../core/accessorSupport/decorators/property","../../../../core/arrayUtils","../../../../core/has","../../../../core/accessorSupport/ensureType","../../../../core/accessorSupport/decorators/subclass","./GeometryRecord","./ModelDirtyTypes","./Util"],(function(e,t,o,r,d,i,s,c,n,y,a,l,m,h){"use strict";let u=function(t){function o(e){var o;return(o=t.call(this,e)||this)._residentGeomRecords=new Map,o._dirtyGeomRecords=new Map,o.dirty=!1,o}e._inheritsLoose(o,t);var s=o.prototype;return s.commit=function(e){this.dirty=!1,this._dirtyGeomRecords.forEach(((t,o)=>this.commitLayer(o,e)))},s.commitLayer=function(e,t){const o=this._dirtyGeomRecords.get(e);o&&(o.forEach(((o,r)=>{const i=this._ensureGeomRecord(e,r);o.forEach(((e,o)=>{const s=e[0],c=e[1],n=e[2];let y=!1;if(c&m.ModelDirty.Geometry.UPDATE){const e=i.get(o);if(e){const o=e[1];if(n&m.ModelDirty.State.TRANSFORMATION){const e=this.model.getObject(r);this.model.updateRenderGeometryTransformation(e,s,o)&&(y=!0)}y||t.updates.push({renderGeometry:o,updateType:n})}else h.assert(!1,"ModelDirtySet.getAddRemoveListFilteredByLayers: invalid update")}if(c&m.ModelDirty.Geometry.REMOVE||y){const e=i.get(o);e?(t.removes.push(e[1]),i.delete(o),e[0].disposed&&l.GeometryRecord.pool.release(e[0])):c===m.ModelDirty.Geometry.REMOVE&&h.assert(!1,"ModelDirtySet.getAddRemoveListFilteredByLayers: invalid remove")}if(c&m.ModelDirty.Geometry.ADD||y){const e=this.model.getObject(r);if(d.isSome(e)){const r=this.model.getRenderGeometry(e,s),d=[s,r];t.adds.push(r),i.set(o,d)}}})),0===i.size&&this._residentGeomRecords.get(e).delete(r)})),0===this._residentGeomRecords.get(e).size&&this._residentGeomRecords.delete(e),this._dirtyGeomRecords.delete(e))},s.getResidentRenderGeometries=function(e,t){const o=this._residentGeomRecords.get(e);o&&o.forEach((e=>e.forEach((e=>t.push(e[1])))))},s._objectStateChanged=function(e,t){for(const o of t.geometryRecords)this._updateOrCreateDirtyRecord(t,o,null,m.ModelDirty.Geometry.UPDATE,0,0,m.ModelDirty.Geometry.UPDATE,m.ModelDirty.Geometry.ADD|m.ModelDirty.Geometry.REMOVE,e)},s.visibilityChanged=function(e){this._objectStateChanged(m.ModelDirty.State.VISIBILITIES,e)},s.highlightChanged=function(e){this._objectStateChanged(m.ModelDirty.State.HIGHLIGHTS,e)},s.occlusionChanged=function(e){this._objectStateChanged(m.ModelDirty.State.OCCLUDEES,e)},s.vertexAttrsUpdated=function(e){this._updateOrCreateDirtyRecord(e.object,e.record,null,m.ModelDirty.Geometry.UPDATE,0,0,m.ModelDirty.Geometry.UPDATE,m.ModelDirty.Geometry.ADD|m.ModelDirty.Geometry.REMOVE,m.ModelDirty.State.VERTEXATTRS)},s.layerAdded=function(e){e.objects.forAll((t=>this._layerObjectAdded(e,t)))},s.layerRemoved=function(e){e.objects.forAll((t=>this._layerObjectRemoved(e,t)))},s.layerObjectAdded=function(e){this._layerObjectAdded(e.layer,e.object)},s._layerObjectAdded=function(e,t){const o=e.id;for(const r of t.geometryRecords)this._objectGeometryAdded(t,r,o)},s.layerObjectRemoved=function(e){this._layerObjectRemoved(e.layer,e.object)},s.layerObjectsAdded=function(e){for(const t of e.objects)this._layerObjectAdded(e.layer,t)},s.layerObjectsRemoved=function(e){for(const t of e.objects)this._layerObjectRemoved(e.layer,t)},s._layerObjectRemoved=function(e,t){const o=e.id;for(const r of t.geometryRecords)this._objectGeometryRemoved(t,r,o)},s.shaderTransformationChanged=function(e){const t=this._residentGeomRecords.get(e.id);t&&t.forEach(((e,t)=>{const o=this.model.getObject(t);o&&o.hasVolativeTransformation()&&e.forEach((e=>{e[1].shaderTransformationChanged()}))}))},s.objectTransformation=function(e){const t=this._getParentLayerId(e),o=e.id;this._ensureGeomRecord(t,o).forEach((o=>{this._updateOrCreateDirtyRecord(e,o[0],t,m.ModelDirty.Geometry.UPDATE,0,0,m.ModelDirty.Geometry.UPDATE,m.ModelDirty.Geometry.ADD|m.ModelDirty.Geometry.REMOVE,m.ModelDirty.State.TRANSFORMATION)}))},s.objectGeometryAdded=function(e){this._objectGeometryAdded(e.object,e.record)},s._objectGeometryAdded=function(e,t,o=null){this._updateOrCreateDirtyRecord(e,t,o,m.ModelDirty.Geometry.ADD,m.ModelDirty.Geometry.REMOVE,0,0,0)},s.objectGeometryRemoved=function(e){this._objectGeometryRemoved(e.object,e.record)},s._objectGeometryRemoved=function(e,t,o=null){this._updateOrCreateDirtyRecord(e,t,o,m.ModelDirty.Geometry.REMOVE,m.ModelDirty.Geometry.ADD,m.ModelDirty.Geometry.UPDATE,0,0)},s._updateOrCreateDirtyRecord=function(e,t,o,r,i,s,c,n,y){o=d.unwrapOr(o,this._getParentLayerId(e));const a=e.id,m=t.id,u=this._ensureDirtyRecord(o,a),f=u.get(m);if(f){const e=f[1];e&i?(u.delete(m),f[0].disposed&&l.GeometryRecord.pool.release(f[0])):e&s?(f[1]=r,f[2]=y):e&c?f[2]|=y:e&n||h.assert(!1,"ModelDirtySet.objectGeometryAdded: inconsistent state")}else u.set(m,[t,r,y]);this.dirty=this._hasDirtyGeometryRecords},s._ensureGeomRecord=function(e,t){let o=this._residentGeomRecords.get(e);o||(o=new Map,this._residentGeomRecords.set(e,o));let r=o.get(t);return r||(r=new Map,o.set(t,r)),r},s._ensureDirtyRecord=function(e,t){let o=this._dirtyGeomRecords.get(e);o||(o=new Map,this._dirtyGeomRecords.set(e,o));let r=o.get(t);return r||(r=new Map,o.set(t,r)),r},s._getParentLayerId=function(e){return d.isSome(e.parentLayer)?e.parentLayer.id:i.NullUID},s.formatDebugInfo=function(){const e=["ADD","UPD",void 0,"REM"];let t="";return this._dirtyGeomRecords.forEach(((o,r)=>{o.forEach(((o,d)=>{t.length>0&&(t+="\n"),t+=r+"."+d;const i=[];o.forEach((e=>{const t=e[1];i[t]||(i[t]=[]),i[t].push(e[0].geometry.id)}));for(let r=0;r<i.length;r++)if(i[r]){t+=" "+e[r-1]+": ";for(let e=0;e<i[r].length;e++)t+=i[r][e]+", "}}))})),t},e._createClass(o,[{key:"_hasDirtyGeometryRecords",get:function(){return r.someMap(this._dirtyGeomRecords,(e=>r.someMap(e,(e=>e&&e.size>0))))}},{key:"test",get:function(){const e=this;return{get residentLayerCount(){return e._residentGeomRecords.size},get residentObjectCount(){return Array.from(e._residentGeomRecords.values()).reduce(((e,t)=>e+t.size),0)}}}}]),o}(o);t.__decorate([s.property({constructOnly:!0})],u.prototype,"model",void 0),t.__decorate([s.property()],u.prototype,"dirty",void 0),u=t.__decorate([a.subclass("esri.views.3d.webgl-engine.lib.ModelDirtySet")],u);return u}));
