// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.17/esri/copyright.txt for details.

define(["require","exports","tslib","./output/ReadLinearDepth.glsl","./util/CameraSpace.glsl","../shaderModules/interfaces"],(function(e,n,o,l,r,a){"use strict";var t,d,i,c,p,u;Object.defineProperty(n,"__esModule",{value:!0}),n.Laserline=void 0,n.Laserline=function(e,n){e.extensions.add("GL_OES_standard_derivatives"),e.include(l.ReadLinearDepth),e.include(r.CameraSpace),e.fragment.uniforms.add("glowColor","vec3"),e.fragment.uniforms.add("glowWidth","float"),e.fragment.uniforms.add("glowFalloff","float"),e.fragment.uniforms.add("innerColor","vec3"),e.fragment.uniforms.add("innerWidth","float"),e.fragment.uniforms.add("depthMap","sampler2D"),e.fragment.uniforms.add("nearFar","vec2"),e.fragment.uniforms.add("frameColor","sampler2D"),n.contrastControlEnabled&&e.fragment.uniforms.add("globalAlphaContrastBoost","float"),e.fragment.code.add(a.glsl(t||(t=o.__makeTemplateObject(["\n  vec4 blendPremultiplied(vec4 source, vec4 dest) {\n    float oneMinusSourceAlpha = 1.0 - source.a;\n\n    return vec4(\n      source.rgb + dest.rgb * oneMinusSourceAlpha,\n      source.a + dest.a * oneMinusSourceAlpha\n    );\n  }\n  "],["\n  vec4 blendPremultiplied(vec4 source, vec4 dest) {\n    float oneMinusSourceAlpha = 1.0 - source.a;\n\n    return vec4(\n      source.rgb + dest.rgb * oneMinusSourceAlpha,\n      source.a + dest.a * oneMinusSourceAlpha\n    );\n  }\n  "])))),e.fragment.code.add(a.glsl(d||(d=o.__makeTemplateObject(["\n  vec4 premultipliedColor(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n  }\n  "],["\n  vec4 premultipliedColor(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n  }\n  "])))),e.fragment.code.add(a.glsl(i||(i=o.__makeTemplateObject(["\n  vec4 laserlineProfile(float dist) {\n    if (dist > glowWidth) {\n      return vec4(0.0);\n    }\n\n    float innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));\n    float glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);\n\n    return blendPremultiplied(\n      premultipliedColor(innerColor, innerAlpha),\n      premultipliedColor(glowColor, glowAlpha)\n    );\n  }\n  "],["\n  vec4 laserlineProfile(float dist) {\n    if (dist > glowWidth) {\n      return vec4(0.0);\n    }\n\n    float innerAlpha = (1.0 - smoothstep(0.0, innerWidth, dist));\n    float glowAlpha = pow(max(0.0, 1.0 - dist / glowWidth), glowFalloff);\n\n    return blendPremultiplied(\n      premultipliedColor(innerColor, innerAlpha),\n      premultipliedColor(glowColor, glowAlpha)\n    );\n  }\n  "])))),e.fragment.code.add(a.glsl(c||(c=o.__makeTemplateObject(["\n  bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {\n    float depth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n    if (-depth == nearFar[0]) {\n      return false;\n    }\n\n    pos = reconstructPosition(gl_FragCoord.xy, depth);\n    normal = normalize(cross(dFdx(pos), dFdy(pos)));\n\n    float ddepth = fwidth(depth);\n    depthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);\n\n    return true;\n  }\n  "],["\n  bool laserlineReconstructFromDepth(out vec3 pos, out vec3 normal, out float depthDiscontinuityAlpha) {\n    float depth = linearDepthFromTexture(depthMap, uv, nearFar);\n\n    if (-depth == nearFar[0]) {\n      return false;\n    }\n\n    pos = reconstructPosition(gl_FragCoord.xy, depth);\n    normal = normalize(cross(dFdx(pos), dFdy(pos)));\n\n    float ddepth = fwidth(depth);\n    depthDiscontinuityAlpha = 1.0 - smoothstep(0.0, 0.01, -ddepth / depth);\n\n    return true;\n  }\n  "])))),n.contrastControlEnabled?e.fragment.code.add(a.glsl(p||(p=o.__makeTemplateObject(["\n    float rgbToLuminance(vec3 color) {\n      return dot(vec3(0.2126, 0.7152, 0.0722), color);\n    }\n\n    vec4 laserlineOutput(vec4 color) {\n      float backgroundLuminance = rgbToLuminance(texture2D(frameColor, uv).rgb);\n      float alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);\n\n      return color * alpha;\n    }\n    "],["\n    float rgbToLuminance(vec3 color) {\n      return dot(vec3(0.2126, 0.7152, 0.0722), color);\n    }\n\n    vec4 laserlineOutput(vec4 color) {\n      float backgroundLuminance = rgbToLuminance(texture2D(frameColor, uv).rgb);\n      float alpha = clamp(globalAlpha * max(backgroundLuminance * globalAlphaContrastBoost, 1.0), 0.0, 1.0);\n\n      return color * alpha;\n    }\n    "])))):e.fragment.code.add(a.glsl(u||(u=o.__makeTemplateObject(["\n    vec4 laserlineOutput(vec4 color) {\n      return color * globalAlpha;\n    }\n    "],["\n    vec4 laserlineOutput(vec4 color) {\n      return color * globalAlpha;\n    }\n    "]))))}}));