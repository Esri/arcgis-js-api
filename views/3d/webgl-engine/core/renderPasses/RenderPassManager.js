/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as s}from"../../../../../core/maybe.js";import{f as a,t as e,e as t}from"../../../../../chunks/mat3.js";import{c as r}from"../../../../../chunks/mat3f64.js";import{c as i}from"../../../../../chunks/mat4.js";import{s as h,c as m}from"../../../../../chunks/vec3.js";import{c as n}from"../../../../../chunks/vec3f64.js";import{MaterialPassParameters as P,ShadowMapPassParameters as o,HighlightPassParameters as _,MaterialSubPass as p,RenderPassIdentifier as l}from"./AllRenderPasses.js";import{RenderPass as A,RenderPassSorting as d}from"./RenderPass.js";import{TwoVectorPosition as c}from"../util/TwoVectorPosition.js";import{union as T}from"../../lib/depthRange.js";import{RenderPass as u}from"../../lib/RenderPass.js";import{RenderSlot as R}from"../../lib/RenderSlot.js";class M{constructor(s,a){this.rctx=s,this.shaderTechniqueRepository=a,this.canRender=!0,this._materialPassParameters=new P,this._shadowPassParameters=new o,this._highlightPassParameters=new _,this._systems=new Set,this._passes={materialOpaque:new A(s,a),materialTransparent:new A(s,a,d.BackToFront),materialIntegratedMesh:new A(s,a),shadowMap:new A(s,a),highlight:new A(s,a),highlightIntegratedMesh:new A(s,a),highlightShadowMap:new A(s,a),defaultShadowMap:new A(s,a)}}register(s){this._systems.add(s)}prepareRender(s){if(0!==this._systems.size){for(const s of Object.values(this._passes))s.prepareSubmit();this._systems.forEach((a=>a.submit(this._passes,s.bindParameters)));for(const s of Object.values(this._passes))s.finishSubmit();this.shaderTechniqueRepository.frameUpdate()}}render(s){if(0!==this._systems.size)switch(this._configure(s),s.bindParameters.slot){case R.OPAQUE_MATERIAL:switch(s.pass){case u.MATERIAL:return this._materialPassParameters.subPass=p.Color,this._passes.materialOpaque.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_DEPTH:return this._materialPassParameters.subPass=p.Depth,this._passes.materialOpaque.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_NORMAL:return this._materialPassParameters.subPass=p.Normal,this._passes.materialOpaque.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_HIGHLIGHT:return this._passes.highlight.dispatch(this._highlightPassParameters,s.bindParameters);case u.MATERIAL_DEPTH_SHADOWMAP_ALL:return this._passes.shadowMap.dispatch(this._shadowPassParameters,s.bindParameters);case u.MATERIAL_DEPTH_SHADOWMAP_HIGHLIGHT:return this._passes.highlightShadowMap.dispatch(this._shadowPassParameters,s.bindParameters);case u.MATERIAL_DEPTH_SHADOWMAP_DEFAULT:return this._passes.defaultShadowMap.dispatch(this._shadowPassParameters,s.bindParameters)}return;case R.TRANSPARENT_MATERIAL:switch(s.pass){case u.MATERIAL:return this._materialPassParameters.subPass=p.Color,this._passes.materialTransparent.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_ALPHA:return this._materialPassParameters.subPass=p.Alpha,this._passes.materialTransparent.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_DEPTH:return this._materialPassParameters.subPass=p.Depth,this._passes.materialTransparent.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_NORMAL:return this._materialPassParameters.subPass=p.Normal,this._passes.materialTransparent.dispatch(this._materialPassParameters,s.bindParameters)}return;case R.INTEGRATED_MESH:switch(s.pass){case u.MATERIAL:return this._materialPassParameters.subPass=p.Color,this._passes.materialIntegratedMesh.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_DEPTH:return this._materialPassParameters.subPass=p.Depth,this._passes.materialIntegratedMesh.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_NORMAL:return this._materialPassParameters.subPass=p.Normal,this._passes.materialIntegratedMesh.dispatch(this._materialPassParameters,s.bindParameters);case u.MATERIAL_HIGHLIGHT:return this._passes.highlightIntegratedMesh.dispatch(this._highlightPassParameters,s.bindParameters)}return}}notifyDirty(){this._context.requestRender()}slots(){return[R.OPAQUE_MATERIAL,R.TRANSPARENT_MATERIAL,R.INTEGRATED_MESH]}initializeRenderContext(s){this._context=s}uninitializeRenderContext(){}queryDepthRange(a){const e={near:1/0,far:-1/0};return this._systems.forEach((t=>{const r=t.queryShadowCasterDepthRange(a);s(r)&&T(e,r,e)})),e}_configure(s){const a=s.pass===u.MATERIAL_DEPTH_SHADOWMAP_ALL||s.pass===u.MATERIAL_DEPTH_SHADOWMAP_HIGHLIGHT||s.pass===u.MATERIAL_DEPTH_SHADOWMAP_DEFAULT?this._shadowPassParameters:s.pass===u.MATERIAL_HIGHLIGHT?this._highlightPassParameters:this._materialPassParameters;this._updateParameters(s,a)}_updateParameters(s,r){const n=s.bindParameters.camera,P=n.viewInverseTransposeMatrix;h(E,P[3],P[7],P[11]),g.set(E),m(r.transformWorldFromViewTH,g.high),m(r.transformWorldFromViewTL,g.low),m(r.slicePlaneLocalOrigin,E),a(r.transformViewFromCameraRelativeRS,n.viewMatrix),i(r.transformProjFromView,n.projectionMatrix),r.identifier===l.Material&&(this._materialPassParameters.transparent=s.bindParameters.slot===R.TRANSPARENT_MATERIAL,this._materialPassParameters.integratedMesh=s.bindParameters.slot===R.INTEGRATED_MESH,e(I,r.transformViewFromCameraRelativeRS),t(r.transformNormalViewFromGlobal,I))}get needsHighlight(){return this._passes.highlight.count>0||this._passes.highlightIntegratedMesh.count>0}get needsTransparentPass(){return this._passes.materialTransparent.count>0}}const E=n(),I=r(),g=new c;export{M as RenderPassManager};
