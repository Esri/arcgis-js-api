/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as e}from"../lib/DefaultVertexAttributeLocations.js";import{Program as o}from"../lib/Program.js";import{a as t}from"../../../../chunks/Compositing.glsl.js";import{CompositingFunction as n,AlphaMode as s}from"./CompositingTechniqueConfiguration.js";import{BlendFactor as a}from"../../../webgl/enums.js";import{makePipelineState as l,simpleBlendingParams as m,defaultColorWriteParams as c,separateBlendingParams as u}from"../../../webgl/renderState.js";class g extends i{initializeProgram(r){const i=g.shader.get().build(this.configuration);return new o(r.rctx,i,e)}initializePipeline(){if(this.configuration.function===n.TransparentToHUDVisibility)return l({colorWrite:{r:!1,g:!0,b:!1,a:!1}});switch(this.configuration.alphaMode){case s.None:return l({colorWrite:c});case s.Alpha:return l({blending:u(a.SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA),colorWrite:c});default:return l({blending:m(a.ONE,a.ONE_MINUS_SRC_ALPHA),colorWrite:c})}}}g.shader=new r(t,(()=>import("./Compositing.glsl.js")));export{g as CompositingTechnique};
