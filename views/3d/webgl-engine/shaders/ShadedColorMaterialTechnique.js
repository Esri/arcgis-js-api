/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/tslib.es6","../../../../chunks/vec4f64","../core/shaderLibrary/ScreenSizeScaling.glsl","../core/shaderLibrary/ShaderOutputOptions","../core/shaderLibrary/Slice.glsl","../core/shaderLibrary/shading/MultipassTerrainTest.glsl","../core/shaderLibrary/util/View.glsl","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../core/shaderTechnique/ShaderTechniqueConfiguration","../lib/basicInterfaces","../lib/OrderIndependentTransparency","../lib/Program","../lib/VertexAttribute","../../../../chunks/ShadedColorMaterial.glsl","../../../webgl/enums","../../../webgl/renderState"],(function(e,r,a,t,i,n,o,s,l,d,c,p,u,h,b,g,m,f,T,S){"use strict";let y=function(e){function r(){return e.apply(this,arguments)||this}a._inheritsLoose(r,e);var t=r.prototype;return t.initializeProgram=function(e){const a=r.shader.get(),t=this.configuration,i=a.build({output:t.output,slicePlaneEnabled:t.slicePlaneEnabled,sliceHighlightDisabled:!1,sliceEnabledForVertexPrograms:!1,screenSizeEnabled:t.screenSizeEnabled,shadingEnabled:t.shadingEnabled,oitEnabled:t.transparencyPassType===h.TransparencyPassType.Color,multipassTerrainEnabled:t.multipassTerrainEnabled,cullAboveGround:t.cullAboveGround});return new g.Program(e.rctx,i,P)},t.bindPass=function(e,r){const{screenSizeEnabled:a,shadingEnabled:t}=this.configuration,{color:i,shadingTint:o,shadingDirection:s}=e;d.bindProjectionMatrix(this.program,r.camera.projectionMatrix),this.program.setUniform4fv("uColor",i),r.multipassTerrainEnabled&&(this.program.setUniform2fv("nearFar",r.camera.nearFar),this.program.setUniform2fv("inverseViewport",r.inverseViewport),l.bindMultipassTerrainTexture(this.program,r)),t&&(this.program.setUniform4fv("shadedColor",this._blendColor(_,o,i)),this.program.setUniform3fv("shadingDirection",s),this.program.setUniformMatrix4fv("viewNormal",r.camera.viewInverseTransposeMatrix)),a&&n.bindScreenSizeScalingUniforms(this.program,e,r)},t.bindDraw=function(e){d.bindView(this.program,e),d.bindCameraPosition(this.program,e.origin,e.camera.viewInverseTransposeMatrix),s.bindSliceUniformsWithOrigin(this.program,this.configuration,e),this.program.rebindTextures()},t._blendColor=function(e,r,a){const t=1-r[3],i=r[3]+a[3]*t;return 0===i?(e[3]=i,e):(e[0]=(r[0]*r[3]+a[0]*a[3]*t)/i,e[1]=(r[1]*r[3]+a[1]*a[3]*t)/i,e[2]=(r[2]*r[3]+a[2]*a[3]*t)/i,e[3]=a[3],e)},t._setPipelineState=function(e){const r=this.configuration,a=e===h.TransparencyPassType.NONE,t=e===h.TransparencyPassType.FrontFace;return S.makePipelineState({blending:r.output!==o.ShaderOutput.Color&&r.output!==o.ShaderOutput.Alpha||!r.transparent?null:a?b.blendingDefault:b.oitBlending(e),culling:S.cullingParams(r.cullFace),depthTest:{func:t?T.CompareFunction.LESS:r.shadingEnabled?T.CompareFunction.LEQUAL:T.CompareFunction.LESS},depthWrite:a?r.writeDepth&&S.defaultDepthWriteParams:b.oitDepthWrite(e),colorWrite:S.defaultColorWriteParams,polygonOffset:a||t?null:b.OITPolygonOffset})},t.initializePipeline=function(){return this._setPipelineState(this.configuration.transparencyPassType)},r}(p.ShaderTechnique);y.shader=new c.ReloadableShaderModule(f.ShadedColorMaterialShader,(()=>new Promise(((r,a)=>e(["./ShadedColorMaterial.glsl"],r,a)))));let v=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).output=o.ShaderOutput.Color,r.cullFace=h.CullFaceOptions.None,r.slicePlaneEnabled=!1,r.transparent=!1,r.writeDepth=!0,r.screenSizeEnabled=!0,r.shadingEnabled=!0,r.transparencyPassType=h.TransparencyPassType.NONE,r.multipassTerrainEnabled=!1,r.cullAboveGround=!1,r}return a._inheritsLoose(r,e),r}(u.ShaderTechniqueConfiguration);t.__decorate([u.parameter({count:o.ShaderOutput.COUNT})],v.prototype,"output",void 0),t.__decorate([u.parameter({count:h.CullFaceOptions.COUNT})],v.prototype,"cullFace",void 0),t.__decorate([u.parameter()],v.prototype,"slicePlaneEnabled",void 0),t.__decorate([u.parameter()],v.prototype,"transparent",void 0),t.__decorate([u.parameter()],v.prototype,"writeDepth",void 0),t.__decorate([u.parameter()],v.prototype,"screenSizeEnabled",void 0),t.__decorate([u.parameter()],v.prototype,"shadingEnabled",void 0),t.__decorate([u.parameter({count:h.TransparencyPassType.COUNT})],v.prototype,"transparencyPassType",void 0),t.__decorate([u.parameter()],v.prototype,"multipassTerrainEnabled",void 0),t.__decorate([u.parameter()],v.prototype,"cullAboveGround",void 0);const P=new Map([[m.VertexAttribute.POSITION,0],[m.VertexAttribute.NORMAL,1],[m.VertexAttribute.OFFSET,2]]),_=i.create();r.ShadedColorMaterialTechnique=y,r.ShadedColorMaterialTechniqueConfiguration=v,r.ShadedColorMaterialVertexAttrLocations=P,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
