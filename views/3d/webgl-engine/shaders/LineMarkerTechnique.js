/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/_rollupPluginBabelHelpers","../core/shaderLibrary/ShaderOutput","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../lib/OrderIndependentTransparency","../lib/Program","../lib/RenderSlot","../lib/StencilUtils","../lib/TransparencyPassType","../lib/VertexAttribute","../../../../chunks/LineMarker.glsl","../../../webgl/renderState"],(function(e,t,i,r,n,l,a,s,o,u,c,p,d,h){"use strict";const T=new Map([[p.VertexAttribute.POSITION,0],[p.VertexAttribute.UV0,2],[p.VertexAttribute.AUXPOS1,3],[p.VertexAttribute.NORMAL,4],[p.VertexAttribute.COLOR,5],[p.VertexAttribute.COLORFEATUREATTRIBUTE,5],[p.VertexAttribute.SIZE,6],[p.VertexAttribute.SIZEFEATUREATTRIBUTE,6],[p.VertexAttribute.OPACITYFEATUREATTRIBUTE,7]]);let P=function(e){function t(){return e.apply(this,arguments)||this}i._inheritsLoose(t,e);var n=t.prototype;return n.initializeProgram=function(e){return new s.Program(e.rctx,t.shader.get().build(this.configuration),T)},n._makePipelineState=function(e,t){const i=this.configuration,n=e===c.TransparencyPassType.NONE;return h.makePipelineState({blending:i.output===r.ShaderOutput.Color||i.output===r.ShaderOutput.Alpha?n?a.blendingDefault:a.oitBlending(e):null,depthTest:{func:a.oitDepthTest(e)},depthWrite:n?i.writeDepth?h.defaultDepthWriteParams:null:a.oitDepthWrite(e),colorWrite:h.defaultColorWriteParams,stencilWrite:i.hasOccludees?u.stencilWriteMaskOn:null,stencilTest:i.hasOccludees?t?u.stencilToolMaskBaseParams:u.stencilBaseAllZerosParams:null,polygonOffset:{factor:0,units:-10}})},n.initializePipeline=function(){return this.configuration.occluder&&(this._occluderPipelineTransparent=h.makePipelineState({blending:a.blendingDefault,depthTest:u.depthCompareAlways,depthWrite:null,colorWrite:h.defaultColorWriteParams,stencilWrite:null,stencilTest:u.stencilToolTransparentOccluderParams}),this._occluderPipelineOpaque=h.makePipelineState({blending:a.blendingDefault,depthTest:u.depthCompareAlways,depthWrite:null,colorWrite:h.defaultColorWriteParams,stencilWrite:u.stencilWriteMaskOff,stencilTest:u.stencilToolMaskOccluderParams}),this._occluderPipelineMaskWrite=h.makePipelineState({blending:null,depthTest:u.depthCompareLess,depthWrite:null,colorWrite:null,stencilWrite:u.stencilWriteMaskOn,stencilTest:u.stencilToolMaskBaseParams})),this._occludeePipelineState=this._makePipelineState(this.configuration.transparencyPassType,!0),this._makePipelineState(this.configuration.transparencyPassType,!1)},n.getPipelineState=function(t,i){return i?this._occludeePipelineState:this.configuration.occluder?t===o.RenderSlot.TRANSPARENT_OCCLUDER_MATERIAL?this._occluderPipelineTransparent:t===o.RenderSlot.OCCLUDER_MATERIAL?this._occluderPipelineOpaque:this._occluderPipelineMaskWrite:e.prototype.getPipelineState.call(this,t,i)},t}(l.ShaderTechnique);P.shader=new n.ReloadableShaderModule(d.LineMarker,(()=>new Promise(((t,i)=>e(["./LineMarker.glsl"],t,i))))),t.LineMarkerTechnique=P,t.vertexAttributeLocations=T,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
