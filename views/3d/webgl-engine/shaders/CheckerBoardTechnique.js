/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/tslib.es6","../core/shaderLibrary/shading/MultipassTerrainTest.glsl","../core/shaderLibrary/util/View.glsl","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../core/shaderTechnique/ShaderTechniqueConfiguration","../lib/DefaultVertexAttributeLocations","../lib/OrderIndependentTransparency","../lib/Program","../../../../chunks/CheckerBoard.glsl","../../../webgl/renderState"],(function(e,r,t,a,i,n,o,s,l,p,c,u,d,h){"use strict";let f=function(e){function r(){return e.apply(this,arguments)||this}t._inheritsLoose(r,e);var a=r.prototype;return a.initializeProgram=function(e){const t=r.shader.get(),a=this.configuration,i=t.build({OITEnabled:0===a.transparencyPassType,multipassTerrainEnabled:a.multipassTerrainEnabled,cullAboveGround:a.cullAboveGround});return new u.Program(e.rctx,i,p.Default3D)},a.bindPass=function(e,r){n.bindProjectionMatrix(this.program,r.camera.projectionMatrix),this.program.setUniform2fv("size",e.size),this.program.setUniform4fv("color1",e.color1),this.program.setUniform4fv("color2",e.color2),r.multipassTerrainEnabled&&(this.program.setUniform2fv("cameraNearFar",r.camera.nearFar),this.program.setUniform2fv("inverseViewport",r.inverseViewport),i.bindMultipassTerrainTexture(this.program,r))},a.bindDraw=function(e){n.bindView(this.program,e)},a.setPipelineState=function(e){const r=this.configuration,t=3===e,a=2===e;return h.makePipelineState({blending:r.transparent?t?g:c.OITBlending(e):null,depthTest:{func:c.OITDepthTest(e)},depthWrite:t?r.writeDepth&&h.defaultDepthWriteParams:c.OITDepthWrite(e),colorWrite:h.defaultColorWriteParams,polygonOffset:t||a?r.polygonOffset&&m:{factor:-1,units:-25}})},a.initializePipeline=function(){return this.setPipelineState(this.configuration.transparencyPassType)},r}(s.ShaderTechnique);f.shader=new o.ReloadableShaderModule(d.CheckerBoardShader,(()=>new Promise(((r,t)=>e(["./CheckerBoard.glsl"],r,t)))));const m={factor:0,units:-25},g=h.separateBlendingParams(770,1,771,771);let b=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).transparent=!1,r.writeDepth=!0,r.polygonOffset=!1,r.transparencyPassType=3,r.multipassTerrainEnabled=!1,r.cullAboveGround=!1,r}return t._inheritsLoose(r,e),r}(l.ShaderTechniqueConfiguration);a.__decorate([l.parameter()],b.prototype,"transparent",void 0),a.__decorate([l.parameter()],b.prototype,"writeDepth",void 0),a.__decorate([l.parameter()],b.prototype,"polygonOffset",void 0),a.__decorate([l.parameter({count:4})],b.prototype,"transparencyPassType",void 0),a.__decorate([l.parameter()],b.prototype,"multipassTerrainEnabled",void 0),a.__decorate([l.parameter()],b.prototype,"cullAboveGround",void 0),r.CheckerBoardTechnique=f,r.CheckerBoardTechniqueConfiguration=b,Object.defineProperty(r,"__esModule",{value:!0})}));
