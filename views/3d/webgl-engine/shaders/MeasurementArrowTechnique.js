/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["require","exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/tslib.es6","../core/shaderLibrary/util/View.glsl","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../core/shaderTechnique/ShaderTechniqueConfiguration","../lib/basicInterfaces","../lib/DefaultVertexAttributeLocations","../lib/OrderIndependentTransparency","../lib/Program","../../../../chunks/MeasurementArrow.glsl","../../../webgl/enums","../../../webgl/renderState"],(function(e,r,t,n,i,o,a,s,l,u,p,c,d,h,f){"use strict";let g=function(e){function r(r,t,n){return e.call(this,r,t,n)||this}t._inheritsLoose(r,e);var n=r.prototype;return n.initializeProgram=function(e){const t=r.shader.get().build();return new c.Program(e.rctx,t,u.Default3D)},n.bindPass=function(e,r){i.bindProjectionMatrix(this.program,r.camera.projectionMatrix),this.program.setUniform1f("width",e.width),this.program.setUniform1f("outlineSize",e.outlineSize),this.program.setUniform4fv("outlineColor",e.outlineColor),this.program.setUniform1f("stripeLength",e.stripeLength),this.program.setUniform4fv("stripeEvenColor",e.stripeEvenColor),this.program.setUniform4fv("stripeOddColor",e.stripeOddColor)},n.bindDraw=function(e){i.bindView(this.program,e),this.program.rebindTextures()},n._setPipelineState=function(e){const r=e===l.TransparencyPassType.NONE,t=this.configuration;return f.makePipelineState({blending:t.transparent?r?p.blendingDefault:p.oitBlending(e):null,polygonOffset:this.configuration.polygonOffsetEnabled&&{factor:0,units:-4},depthTest:{func:h.CompareFunction.LESS},depthWrite:f.defaultDepthWriteParams,colorWrite:f.defaultColorWriteParams})},n.initializePipeline=function(){return this._setPipelineState(this.configuration.transparencyPassType)},t._createClass(r,[{key:"primitiveType",get:function(){return h.PrimitiveType.TRIANGLE_STRIP}}]),r}(a.ShaderTechnique);g.shader=new o.ReloadableShaderModule(d.MeasurementArrowShader,(()=>new Promise(((r,t)=>e(["./MeasurementArrow.glsl"],r,t)))));let m=function(e){function r(){var r;return(r=e.apply(this,arguments)||this).polygonOffsetEnabled=!1,r.transparent=!1,r.transparencyPassType=l.TransparencyPassType.NONE,r}return t._inheritsLoose(r,e),r}(s.ShaderTechniqueConfiguration);n.__decorate([s.parameter()],m.prototype,"polygonOffsetEnabled",void 0),n.__decorate([s.parameter()],m.prototype,"transparent",void 0),n.__decorate([s.parameter({count:l.TransparencyPassType.COUNT})],m.prototype,"transparencyPassType",void 0),r.MeasurementArrowTechnique=g,r.MeasurementArrowTechniqueConfiguration=m,Object.defineProperties(r,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
