// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.17/esri/copyright.txt for details.

define(["require","exports","tslib","../core/shaderLibrary/Slice.glsl","../core/shaderLibrary/attributes/RibbonVertexPosition.glsl","../core/shaderLibrary/shading/LineStipple.glsl","../core/shaderLibrary/shading/PiUtils.glsl","../core/shaderLibrary/util/AlphaDiscard.glsl","../core/shaderModules/interfaces","../core/shaderModules/ShaderBuilder"],(function(e,n,t,i,o,r,l,a,s,p){"use strict";var c,d,m,v,f,g,h,D,x,u,b,j,S,L,y,P,_,C,O,A,z,R,w,I,N,E;Object.defineProperty(n,"__esModule",{value:!0}),n.build=void 0,n.build=function(e){var n=new p.ShaderBuilder;n.extensions.add("GL_OES_standard_derivatives"),n.include(l.PiUtils),n.include(o.RibbonVertexPosition,e),n.include(r.LineStipple,e),n.vertex.uniforms.add("proj","mat4").add("view","mat4").add("nearPlane","float").add("pixelRatio","float").add("miterLimit","float").add("screenSize","vec2"),n.attributes.add("position","vec3"),n.attributes.add("subdivisionFactor","float"),n.attributes.add("uv0","vec2"),n.attributes.add("auxpos1","vec3"),n.attributes.add("auxpos2","vec3"),n.varyings.add("vColor","vec4"),n.varyings.add("vpos","vec3");var T=e.falloffEnabled,k=e.innerColorEnabled;return k&&n.varyings.add("vLineDistance","float"),T&&n.varyings.add("vLineDistanceNorm","float"),e.falloffEnabled&&n.fragment.uniforms.add("falloff","float"),e.innerColorEnabled&&(n.fragment.uniforms.add("innerColor","vec4"),n.fragment.uniforms.add("innerWidth","float")),n.vertex.code.add(s.glsl(c||(c=t.__makeTemplateObject(["\n\t\t#define PERPENDICULAR(v) vec2(v.y, -v.x);\n\t\t#define ISOUTSIDE (left.x * right.y - left.y * right.x)*uv0.y > 0.0\n\n\t\tfloat interp(float ncp, vec4 a, vec4 b) {\n\t\t\treturn (-ncp - a.z) / (b.z - a.z);\n\t\t}\n\n\t\tvec2 rotate(vec2 v, float a) {\n\t\t\tfloat s = sin(a);\n\t\t\tfloat c = cos(a);\n\t\t\tmat2 m = mat2(c, -s, s, c);\n\t\t\treturn m * v;\n\t\t}\n"],["\n\t\t#define PERPENDICULAR(v) vec2(v.y, -v.x);\n\t\t#define ISOUTSIDE (left.x * right.y - left.y * right.x)*uv0.y > 0.0\n\n\t\tfloat interp(float ncp, vec4 a, vec4 b) {\n\t\t\treturn (-ncp - a.z) / (b.z - a.z);\n\t\t}\n\n\t\tvec2 rotate(vec2 v, float a) {\n\t\t\tfloat s = sin(a);\n\t\t\tfloat c = cos(a);\n\t\t\tmat2 m = mat2(c, -s, s, c);\n\t\t\treturn m * v;\n\t\t}\n"])))),n.vertex.code.add(s.glsl(d||(d=t.__makeTemplateObject(["\n    vec4 projectAndScale(vec4 pos) {\n      vec4 posNdc = proj * pos;\n\n      // Note that posNdc is in -1:1, scaling by screenSize converts this to a coordinate system\n      // that is twice scaled (going from -size:size).\n      posNdc.xy *= screenSize / posNdc.w;\n      return posNdc;\n    }\n"],["\n    vec4 projectAndScale(vec4 pos) {\n      vec4 posNdc = proj * pos;\n\n      // Note that posNdc is in -1:1, scaling by screenSize converts this to a coordinate system\n      // that is twice scaled (going from -size:size).\n      posNdc.xy *= screenSize / posNdc.w;\n      return posNdc;\n    }\n"])))),n.vertex.code.add(s.glsl(m||(m=t.__makeTemplateObject(["\n    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {\n      float vnp = nearPlane*0.99;\n\n      //current pos behind ncp --\x3e we need to clip\n      if(pos.z > -nearPlane) {\n        if (!isStartVertex) {\n          //previous in front of ncp\n          if(prev.z < -nearPlane) {\n            pos = mix(prev, pos, interp(vnp, prev, pos));\n            next = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        }\n        //next in front of ncp\n        if(isStartVertex) {\n          if(next.z < -nearPlane) {\n            pos = mix(pos, next, interp(vnp, pos, next));\n            prev = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        }\n      } else {\n        //current position visible\n        //previous behind ncp\n        if (prev.z > -nearPlane) {\n          prev = mix(pos, prev, interp(vnp, pos, prev));\n        }\n        //next behind ncp\n        if (next.z > -nearPlane) {\n          next = mix(next, pos, interp(vnp, next, pos));\n        }\n      }\n\n      pos = projectAndScale(pos);\n      next = projectAndScale(next);\n      prev = projectAndScale(prev);\n    }\n"],["\n    void clipAndTransform(inout vec4 pos, inout vec4 prev, inout vec4 next, in bool isStartVertex) {\n      float vnp = nearPlane*0.99;\n\n      //current pos behind ncp --\x3e we need to clip\n      if(pos.z > -nearPlane) {\n        if (!isStartVertex) {\n          //previous in front of ncp\n          if(prev.z < -nearPlane) {\n            pos = mix(prev, pos, interp(vnp, prev, pos));\n            next = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        }\n        //next in front of ncp\n        if(isStartVertex) {\n          if(next.z < -nearPlane) {\n            pos = mix(pos, next, interp(vnp, pos, next));\n            prev = pos;\n          } else {\n            pos = vec4(0.0, 0.0, 0.0, 1.0);\n          }\n        }\n      } else {\n        //current position visible\n        //previous behind ncp\n        if (prev.z > -nearPlane) {\n          prev = mix(pos, prev, interp(vnp, pos, prev));\n        }\n        //next behind ncp\n        if (next.z > -nearPlane) {\n          next = mix(next, pos, interp(vnp, next, pos));\n        }\n      }\n\n      pos = projectAndScale(pos);\n      next = projectAndScale(next);\n      prev = projectAndScale(prev);\n    }\n"])))),n.vertex.code.add(s.glsl(v||(v=t.__makeTemplateObject(["\n  void main(void) {\n    float coverage = 1.0;\n    vpos = position;\n\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;\n      bool isJoin = abs(uv0.y)-3.0 < 0.0;\n\n      float lineWidth = getSize() * pixelRatio;\n\n      // convert sub-pixel coverage to alpha\n      if (lineWidth < 1.0) {\n        coverage = lineWidth;\n        lineWidth = 1.0;\n      }else{\n        // Ribbon lines cannot properly render non-integer sizes. Round width to integer size if\n        // larger than one for better quality. Note that we do render < 1 pixels more or less correctly\n        // so we only really care to round anything larger than 1.\n        lineWidth = floor(lineWidth + 0.5);\n      }\n\n      vec4 pos  = view * vec4(position.xyz, 1.0);\n      vec4 prev = view * vec4(auxpos1.xyz, 1.0);\n      vec4 next = view * vec4(auxpos2.xyz, 1.0);\n\n      clipAndTransform(pos, prev, next, isStartVertex);\n\n      vec2 left = (pos.xy - prev.xy);\n      vec2 right = (next.xy - pos.xy);\n\n      float leftLen = length(left);\n      float rightLen = length(right);\n  "],["\n  void main(void) {\n    float coverage = 1.0;\n    vpos = position;\n\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      bool isStartVertex = abs(abs(uv0.y)-3.0) == 1.0;\n      bool isJoin = abs(uv0.y)-3.0 < 0.0;\n\n      float lineWidth = getSize() * pixelRatio;\n\n      // convert sub-pixel coverage to alpha\n      if (lineWidth < 1.0) {\n        coverage = lineWidth;\n        lineWidth = 1.0;\n      }else{\n        // Ribbon lines cannot properly render non-integer sizes. Round width to integer size if\n        // larger than one for better quality. Note that we do render < 1 pixels more or less correctly\n        // so we only really care to round anything larger than 1.\n        lineWidth = floor(lineWidth + 0.5);\n      }\n\n      vec4 pos  = view * vec4(position.xyz, 1.0);\n      vec4 prev = view * vec4(auxpos1.xyz, 1.0);\n      vec4 next = view * vec4(auxpos2.xyz, 1.0);\n\n      clipAndTransform(pos, prev, next, isStartVertex);\n\n      vec2 left = (pos.xy - prev.xy);\n      vec2 right = (next.xy - pos.xy);\n\n      float leftLen = length(left);\n      float rightLen = length(right);\n  "])))),e.stippleEnabled&&n.vertex.code.add(s.glsl(f||(f=t.__makeTemplateObject(["\n      // uv0.x is either 0 or 1, depending on whether this is considered the start of a line segment\n      // or the end. If start, then use pos->next, otherwise use prev->pos to define the line segment\n      // vector\n      vec4 stippleSegmentInfo = mix(vec4(pos.xy, right), vec4(prev.xy, left), uv0.x);\n      vec2 stippleSegmentOrigin = stippleSegmentInfo.xy;\n\n      // Scale s.t. it's in units of stipple pattern size.\n      vec2 stippleSegmentDirection = stippleSegmentInfo.zw;\n    "],["\n      // uv0.x is either 0 or 1, depending on whether this is considered the start of a line segment\n      // or the end. If start, then use pos->next, otherwise use prev->pos to define the line segment\n      // vector\n      vec4 stippleSegmentInfo = mix(vec4(pos.xy, right), vec4(prev.xy, left), uv0.x);\n      vec2 stippleSegmentOrigin = stippleSegmentInfo.xy;\n\n      // Scale s.t. it's in units of stipple pattern size.\n      vec2 stippleSegmentDirection = stippleSegmentInfo.zw;\n    "])))),n.vertex.code.add(s.glsl(g||(g=t.__makeTemplateObject(['\n    left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);\n    right = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);\n\n    vec2 capDisplacementDir = vec2(0, 0);\n    vec2 joinDisplacementDir = vec2(0, 0);\n    float displacementLen = lineWidth;\n\n    if (isJoin) {\n\n      // JOIN handling ---------------------------------------------------\n      // determine if vertex is on the "outside or "inside" of the join\n      bool isOutside = ISOUTSIDE;\n\n      // compute miter join position first\n      joinDisplacementDir = normalize(left + right);\n      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n\n      // compute miter stretch\n      if (leftLen > 0.001 && rightLen > 0.001) {\n        float nDotSeg = dot(joinDisplacementDir, left);\n        displacementLen /= length(nDotSeg * left - joinDisplacementDir);\n\n        // limit displacement of inner vertices\n        if (!isOutside) {\n          displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\n        }\n      }\n\n      if (isOutside && (displacementLen > miterLimit * lineWidth)) {\n    '],['\n    left = (leftLen > 0.001) ? left/leftLen : vec2(0.0, 0.0);\n    right = (rightLen > 0.001) ? right/rightLen : vec2(0.0, 0.0);\n\n    vec2 capDisplacementDir = vec2(0, 0);\n    vec2 joinDisplacementDir = vec2(0, 0);\n    float displacementLen = lineWidth;\n\n    if (isJoin) {\n\n      // JOIN handling ---------------------------------------------------\n      // determine if vertex is on the "outside or "inside" of the join\n      bool isOutside = ISOUTSIDE;\n\n      // compute miter join position first\n      joinDisplacementDir = normalize(left + right);\n      joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n\n      // compute miter stretch\n      if (leftLen > 0.001 && rightLen > 0.001) {\n        float nDotSeg = dot(joinDisplacementDir, left);\n        displacementLen /= length(nDotSeg * left - joinDisplacementDir);\n\n        // limit displacement of inner vertices\n        if (!isOutside) {\n          displacementLen = min(displacementLen, min(leftLen, rightLen)/abs(nDotSeg));\n        }\n      }\n\n      if (isOutside && (displacementLen > miterLimit * lineWidth)) {\n    '])))),e.roundJoins?n.vertex.code.add(s.glsl(h||(h=t.__makeTemplateObject(["\n        vec2 startDir;\n        vec2 endDir;\n\n        if (leftLen < 0.001) {\n          startDir = right;\n        }\n        else{\n          startDir = left;\n        }\n        startDir = normalize(startDir);\n        startDir = PERPENDICULAR(startDir);\n\n        if (rightLen < 0.001) {\n          endDir = left;\n        }\n        else{\n          endDir = right;\n        }\n        endDir = normalize(endDir);\n        endDir = PERPENDICULAR(endDir);\n\n        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));\n        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * subdivisionFactor * rotationAngle);\n      "],["\n        vec2 startDir;\n        vec2 endDir;\n\n        if (leftLen < 0.001) {\n          startDir = right;\n        }\n        else{\n          startDir = left;\n        }\n        startDir = normalize(startDir);\n        startDir = PERPENDICULAR(startDir);\n\n        if (rightLen < 0.001) {\n          endDir = left;\n        }\n        else{\n          endDir = right;\n        }\n        endDir = normalize(endDir);\n        endDir = PERPENDICULAR(endDir);\n\n        float rotationAngle = acos(clamp(dot(startDir, endDir), -1.0, 1.0));\n        joinDisplacementDir = rotate(startDir, -sign(uv0.y) * subdivisionFactor * rotationAngle);\n      "])))):n.vertex.code.add(s.glsl(D||(D=t.__makeTemplateObject(["\n        // convert to bevel join if miterLimit is exceeded\n        if (leftLen < 0.001) {\n          joinDisplacementDir = right;\n        }\n        else if (rightLen < 0.001) {\n          joinDisplacementDir = left;\n        }\n        else {\n          joinDisplacementDir = isStartVertex ? right : left;\n        }\n        joinDisplacementDir = normalize(joinDisplacementDir);\n        joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n  "],["\n        // convert to bevel join if miterLimit is exceeded\n        if (leftLen < 0.001) {\n          joinDisplacementDir = right;\n        }\n        else if (rightLen < 0.001) {\n          joinDisplacementDir = left;\n        }\n        else {\n          joinDisplacementDir = isStartVertex ? right : left;\n        }\n        joinDisplacementDir = normalize(joinDisplacementDir);\n        joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n  "])))),n.vertex.code.add(s.glsl(x||(x=t.__makeTemplateObject(["\n        displacementLen = lineWidth;\n      }\n    } else {\n    // CAP handling ---------------------------------------------------\n    if (leftLen < 0.001) {\n      joinDisplacementDir = right;\n    }\n    else if (rightLen < 0.001) {\n      joinDisplacementDir = left;\n    }\n    else {\n      joinDisplacementDir = isStartVertex ? right : left;\n    }\n    joinDisplacementDir = normalize(joinDisplacementDir);\n    joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n    displacementLen = lineWidth;\n\n    capDisplacementDir = isStartVertex ? -right : left;\n  "],["\n        displacementLen = lineWidth;\n      }\n    } else {\n    // CAP handling ---------------------------------------------------\n    if (leftLen < 0.001) {\n      joinDisplacementDir = right;\n    }\n    else if (rightLen < 0.001) {\n      joinDisplacementDir = left;\n    }\n    else {\n      joinDisplacementDir = isStartVertex ? right : left;\n    }\n    joinDisplacementDir = normalize(joinDisplacementDir);\n    joinDisplacementDir = PERPENDICULAR(joinDisplacementDir);\n    displacementLen = lineWidth;\n\n    capDisplacementDir = isStartVertex ? -right : left;\n  "])))),e.roundCaps?n.vertex.code.add(s.glsl(u||(u=t.__makeTemplateObject(["\n    float angle = subdivisionFactor*PI*0.5;\n    joinDisplacementDir *= cos(angle);\n    capDisplacementDir *= sin(angle);\n    "],["\n    float angle = subdivisionFactor*PI*0.5;\n    joinDisplacementDir *= cos(angle);\n    capDisplacementDir *= sin(angle);\n    "])))):n.vertex.code.add(s.glsl(b||(b=t.__makeTemplateObject(["\n    capDisplacementDir *= subdivisionFactor;\n    "],["\n    capDisplacementDir *= subdivisionFactor;\n    "])))),n.vertex.code.add(s.glsl(y||(y=t.__makeTemplateObject(["\n  }\n\n  // Displacement (in pixels) caused by join/or cap\n  vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;\n\n  ","\n\n  ","\n  ","\n\n  pos.xy += dpos;\n  "],["\n  }\n\n  // Displacement (in pixels) caused by join/or cap\n  vec2 dpos = joinDisplacementDir * sign(uv0.y) * displacementLen + capDisplacementDir * displacementLen;\n\n  ","\n\n  ","\n  ","\n\n  pos.xy += dpos;\n  "])),T||k?s.glsl(j||(j=t.__makeTemplateObject(["float lineDist = lineWidth * sign(uv0.y) * pos.w;"],["float lineDist = lineWidth * sign(uv0.y) * pos.w;"]))):"",k?s.glsl(S||(S=t.__makeTemplateObject(["vLineDistance = lineDist;"],["vLineDistance = lineDist;"]))):"",T?s.glsl(L||(L=t.__makeTemplateObject(["vLineDistanceNorm = lineDist / lineWidth;"],["vLineDistanceNorm = lineDist / lineWidth;"]))):"")),e.stippleEnabled&&(n.vertex.code.add(s.glsl(P||(P=t.__makeTemplateObject(["\n    {\n      // Compute the stipple pattern UV coordinate from the actual position, based on the origin\n      // and direction of the line segment on which the stipple pattern is based.\n\n      // Project the vector from the origin of the segment to the vertex onto the line segment.\n      // Note the 0.5 factor due to projected positions being at twice the screen size scale (see projectAndScale)\n      vec2 posVec = pos.xy - stippleSegmentOrigin;\n\n      float stippleSegmentDirectionLength = length(stippleSegmentDirection);\n    "],["\n    {\n      // Compute the stipple pattern UV coordinate from the actual position, based on the origin\n      // and direction of the line segment on which the stipple pattern is based.\n\n      // Project the vector from the origin of the segment to the vertex onto the line segment.\n      // Note the 0.5 factor due to projected positions being at twice the screen size scale (see projectAndScale)\n      vec2 posVec = pos.xy - stippleSegmentOrigin;\n\n      float stippleSegmentDirectionLength = length(stippleSegmentDirection);\n    "])))),e.stippleIntegerRepeatsEnabled&&n.vertex.code.add(s.glsl(_||(_=t.__makeTemplateObject(["\n      float numberOfPatternRepeats = stippleSegmentDirectionLength * 0.5 * stipplePatternPixelSizeInv;\n      float roundedNumberOfPatternRepeats = max(1.0, floor(numberOfPatternRepeats + 0.5));\n      stipplePatternUvMax = roundedNumberOfPatternRepeats;\n      "],["\n      float numberOfPatternRepeats = stippleSegmentDirectionLength * 0.5 * stipplePatternPixelSizeInv;\n      float roundedNumberOfPatternRepeats = max(1.0, floor(numberOfPatternRepeats + 0.5));\n      stipplePatternUvMax = roundedNumberOfPatternRepeats;\n      "])))),n.vertex.code.add(s.glsl(C||(C=t.__makeTemplateObject(["\n      if (stippleSegmentDirectionLength >= 0.001) {\n        // Project the vertex position onto the line segment.\n        float projectedLength = dot(stippleSegmentDirection, posVec) / stippleSegmentDirectionLength * 0.5;\n     ","\n        stipplePatternUv = projectedLength * wholeNumberOfRepeatsScale * stipplePatternPixelSizeInv * pos.w;\n        } else {\n          stipplePatternUv = 1.0;\n        }\n      }\n    "],["\n      if (stippleSegmentDirectionLength >= 0.001) {\n        // Project the vertex position onto the line segment.\n        float projectedLength = dot(stippleSegmentDirection, posVec) / stippleSegmentDirectionLength * 0.5;\n     ","\n        stipplePatternUv = projectedLength * wholeNumberOfRepeatsScale * stipplePatternPixelSizeInv * pos.w;\n        } else {\n          stipplePatternUv = 1.0;\n        }\n      }\n    "])),e.stippleIntegerRepeatsEnabled?"float wholeNumberOfRepeatsScale = roundedNumberOfPatternRepeats / numberOfPatternRepeats;":"float wholeNumberOfRepeatsScale = 1.0;"))),n.vertex.code.add(s.glsl(O||(O=t.__makeTemplateObject(["\n      // Convert back into NDC\n      pos.xy = pos.xy / screenSize * pos.w;\n\n      vColor = getColor();\n      vColor.a *= coverage;\n\n      gl_Position = pos;\n    }\n  }\n  "],["\n      // Convert back into NDC\n      pos.xy = pos.xy / screenSize * pos.w;\n\n      vColor = getColor();\n      vColor.a *= coverage;\n\n      gl_Position = pos;\n    }\n  }\n  "])))),n.include(i.Slice,e),n.fragment.uniforms.add("intrinsicColor","vec4"),n.fragment.code.add(s.glsl(A||(A=t.__makeTemplateObject(["\n  void main() {\n    discardBySlice(vpos);\n    float stippleAlpha = getStippleAlpha();\n    discardByStippleAlpha(stippleAlpha, STIPPLE_ALPHA_COLOR_DISCARD);\n\n    vec4 color = intrinsicColor * vColor;\n  "],["\n  void main() {\n    discardBySlice(vpos);\n    float stippleAlpha = getStippleAlpha();\n    discardByStippleAlpha(stippleAlpha, STIPPLE_ALPHA_COLOR_DISCARD);\n\n    vec4 color = intrinsicColor * vColor;\n  "])))),e.innerColorEnabled&&(n.fragment.uniforms.add("pixelRatio","float"),n.fragment.code.add(s.glsl(z||(z=t.__makeTemplateObject(["\n    float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;\n    float innerAA = clamp(0.5 - distToInner, 0.0, 1.0);\n    float innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);\n    color = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);\n    "],["\n    float distToInner = abs(vLineDistance * gl_FragCoord.w) - innerWidth;\n    float innerAA = clamp(0.5 - distToInner, 0.0, 1.0);\n    float innerAlpha = innerColor.a + color.a * (1.0 - innerColor.a);\n    color = mix(color, vec4(innerColor.rgb, innerAlpha), innerAA);\n    "]))))),n.fragment.code.add(s.glsl(R||(R=t.__makeTemplateObject(["\n    vec4 finalColor = blendStipple(color, stippleAlpha);\n  "],["\n    vec4 finalColor = blendStipple(color, stippleAlpha);\n  "])))),e.falloffEnabled&&n.fragment.code.add(s.glsl(w||(w=t.__makeTemplateObject(["\n    finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);\n    "],["\n    finalColor.a *= pow(max(0.0, 1.0 - abs(vLineDistanceNorm * gl_FragCoord.w)), falloff);\n    "])))),n.fragment.code.add(s.glsl(E||(E=t.__makeTemplateObject(["\n    if (finalColor.a < ",") {\n      discard;\n    }\n\n    ","\n    ","\n  }\n  "],["\n    if (finalColor.a < ",") {\n      discard;\n    }\n\n    ","\n    ","\n  }\n  "])),s.glsl.float(a.symbolAlphaCutoff),0===e.output?s.glsl(I||(I=t.__makeTemplateObject(["gl_FragColor = highlightSlice(finalColor, vpos);"],["gl_FragColor = highlightSlice(finalColor, vpos);"]))):"",4===e.output?s.glsl(N||(N=t.__makeTemplateObject(["gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);"],["gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);"]))):"")),n}}));