// COPYRIGHT Â© 2020 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/4.17/esri/copyright.txt for details.

define(["require","exports","tslib","../core/shaderLibrary/Laserline.glsl","../core/shaderModules/interfaces","../core/shaderModules/ShaderBuilder"],(function(e,n,i,o,a,t){"use strict";var r,l;Object.defineProperty(n,"__esModule",{value:!0}),n.build=void 0,n.build=function(e){var n=new t.ShaderBuilder;return n.include(o.Laserline,e),n.vertex.uniforms.add("uModelViewMatrix","mat4"),n.vertex.uniforms.add("uProjectionMatrix","mat4"),n.attributes.add("start","vec3"),n.attributes.add("end","vec3"),n.attributes.add("up","vec3"),n.attributes.add("extrude","vec2"),n.varyings.add("uv","vec2"),n.varyings.add("vViewStart","vec3"),n.varyings.add("vViewEnd","vec3"),n.varyings.add("vViewPlane","vec4"),n.vertex.uniforms.add("glowWidth","float"),n.vertex.uniforms.add("pixelToNDC","vec2"),n.vertex.code.add(a.glsl(r||(r=i.__makeTemplateObject(["\n  void main() {\n    vec3 pos = mix(start, end, extrude.x);\n\n    vec4 viewPos = uModelViewMatrix * vec4(pos, 1);\n    vec4 projPos = uProjectionMatrix * viewPos;\n    vec2 ndcPos = projPos.xy / projPos.w;\n\n    vec3 viewUp = (uModelViewMatrix * vec4(extrude.y * up, 0)).xyz;\n    vec4 projPosUp = uProjectionMatrix * vec4(viewPos.xyz + viewUp, 1);\n    vec2 projExtrudeDir = normalize(projPosUp.xy / projPosUp.w - ndcPos);\n\n    vec2 lxy = abs(sign(projExtrudeDir) - ndcPos);\n    ndcPos += length(lxy) * projExtrudeDir;\n\n    vec3 worldPlaneNormal = normalize(cross(up, normalize(end - start)));\n    vec3 viewPlaneNormal = (uModelViewMatrix * vec4(worldPlaneNormal, 0)).xyz;\n\n    vViewStart = (uModelViewMatrix * vec4(start, 1)).xyz;\n    vViewEnd = (uModelViewMatrix * vec4(end, 1)).xyz;\n    vViewPlane = vec4(viewPlaneNormal, -dot(viewPlaneNormal, vViewStart));\n\n    // Add enough padding in the X screen space direction for glow\n    float xPaddingPixels = sign(dot(viewPlaneNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;\n    ndcPos.x += xPaddingPixels * pixelToNDC.x;\n\n    uv = ndcPos * 0.5 + 0.5;\n    gl_Position = vec4(ndcPos, 0, 1);\n  }\n  "],["\n  void main() {\n    vec3 pos = mix(start, end, extrude.x);\n\n    vec4 viewPos = uModelViewMatrix * vec4(pos, 1);\n    vec4 projPos = uProjectionMatrix * viewPos;\n    vec2 ndcPos = projPos.xy / projPos.w;\n\n    vec3 viewUp = (uModelViewMatrix * vec4(extrude.y * up, 0)).xyz;\n    vec4 projPosUp = uProjectionMatrix * vec4(viewPos.xyz + viewUp, 1);\n    vec2 projExtrudeDir = normalize(projPosUp.xy / projPosUp.w - ndcPos);\n\n    vec2 lxy = abs(sign(projExtrudeDir) - ndcPos);\n    ndcPos += length(lxy) * projExtrudeDir;\n\n    vec3 worldPlaneNormal = normalize(cross(up, normalize(end - start)));\n    vec3 viewPlaneNormal = (uModelViewMatrix * vec4(worldPlaneNormal, 0)).xyz;\n\n    vViewStart = (uModelViewMatrix * vec4(start, 1)).xyz;\n    vViewEnd = (uModelViewMatrix * vec4(end, 1)).xyz;\n    vViewPlane = vec4(viewPlaneNormal, -dot(viewPlaneNormal, vViewStart));\n\n    // Add enough padding in the X screen space direction for glow\n    float xPaddingPixels = sign(dot(viewPlaneNormal, viewPos.xyz)) * (extrude.x * 2.0 - 1.0) * glowWidth;\n    ndcPos.x += xPaddingPixels * pixelToNDC.x;\n\n    uv = ndcPos * 0.5 + 0.5;\n    gl_Position = vec4(ndcPos, 0, 1);\n  }\n  "])))),n.fragment.uniforms.add("globalAlpha","float"),n.fragment.uniforms.add("perScreenPixelRatio","float"),n.fragment.code.add(a.glsl(l||(l=i.__makeTemplateObject(["\n  float planeDistancePixels(vec4 plane, vec3 pos, vec3 start, vec3 end) {\n    vec3 origin = mix(start, end, 0.5);\n    vec3 basis = end - origin;\n    vec3 posAtOrigin = pos - origin;\n\n    float x = dot(normalize(basis), posAtOrigin);\n    float y = dot(plane.xyz, posAtOrigin);\n\n    float dx = max(abs(x) - length(basis), 0.0);\n    float dy = y;\n\n    float dist = length(vec2(dx, dy));\n\n    float width = fwidth(y);\n    float maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;\n    float pixelDist = dist / min(width, maxPixelDistance);\n    return abs(pixelDist);\n  }\n\n  void main() {\n    vec3 pos;\n    vec3 normal;\n    float depthDiscontinuityAlpha;\n\n    if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\n      discard;\n    }\n\n    float distance = planeDistancePixels(vViewPlane, pos, vViewStart, vViewEnd);\n\n    vec4 color = laserlineProfile(distance);\n    float alpha = 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, vViewPlane.xyz)));\n\n    gl_FragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);\n  }\n  "],["\n  float planeDistancePixels(vec4 plane, vec3 pos, vec3 start, vec3 end) {\n    vec3 origin = mix(start, end, 0.5);\n    vec3 basis = end - origin;\n    vec3 posAtOrigin = pos - origin;\n\n    float x = dot(normalize(basis), posAtOrigin);\n    float y = dot(plane.xyz, posAtOrigin);\n\n    float dx = max(abs(x) - length(basis), 0.0);\n    float dy = y;\n\n    float dist = length(vec2(dx, dy));\n\n    float width = fwidth(y);\n    float maxPixelDistance = length(pos) * perScreenPixelRatio * 2.0;\n    float pixelDist = dist / min(width, maxPixelDistance);\n    return abs(pixelDist);\n  }\n\n  void main() {\n    vec3 pos;\n    vec3 normal;\n    float depthDiscontinuityAlpha;\n\n    if (!laserlineReconstructFromDepth(pos, normal, depthDiscontinuityAlpha)) {\n      discard;\n    }\n\n    float distance = planeDistancePixels(vViewPlane, pos, vViewStart, vViewEnd);\n\n    vec4 color = laserlineProfile(distance);\n    float alpha = 1.0 - smoothstep(0.995, 0.999, abs(dot(normal, vViewPlane.xyz)));\n\n    gl_FragColor = laserlineOutput(color * alpha * depthDiscontinuityAlpha);\n  }\n  "])))),n}}));