/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{NoParameters as e}from"../core/shaderModules/interfaces.js";import{ReloadableShaderModule as r}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as t}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as i}from"../lib/DefaultVertexAttributeLocations.js";import{blendingDefault as s}from"../lib/OrderIndependentTransparency.js";import{Program as o}from"../lib/Program.js";import{H as n}from"../../../../chunks/Heatmap.glsl.js";import{PrimitiveType as l}from"../../../webgl/enums.js";import{makePipelineState as a,defaultColorWriteParams as m}from"../../../webgl/renderState.js";class d extends e{constructor(){super(...arguments),this.colorRamp=null,this.densityMap=null,this.searchRadius=1,this.fieldTotal=0,this.minDensity=0,this.maxDensity=100}}class p extends t{constructor(e,r){super(e,r,(()=>this.destroy()))}initializeProgram(e){const r=p.shader.get().build();return new o(e.rctx,r,i)}initializePipeline(){return a({blending:s,colorWrite:m,depthTest:null,depthWrite:null})}get primitiveType(){return l.TRIANGLE_STRIP}}p.shader=new r(n,(()=>import("./Heatmap.glsl.js")));export{d as HeatmapPassParameters,p as HeatmapTechnique};
