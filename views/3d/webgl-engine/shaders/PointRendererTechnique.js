/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{ReloadableShaderModule as e}from"../core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as r}from"../core/shaderTechnique/ShaderTechnique.js";import{Default3D as t}from"../lib/DefaultVertexAttributeLocations.js";import{Program as i}from"../lib/Program.js";import{stencilWriteMaskOn as o,stencilBaseAllZerosParams as s}from"../lib/StencilUtils.js";import{P as n}from"../../../../chunks/PointRenderer.glsl.js";import{CompareFunction as l}from"../../../webgl/enums.js";import{makePipelineState as c,defaultDepthWriteParams as a,defaultColorWriteParams as u}from"../../../webgl/renderState.js";class m extends r{constructor(e,r,t){super(e,r,t)}initializeProgram(e){const r=m.shader.get().build(this.configuration);return new i(e.rctx,r,t)}initializePipeline(){return c({depthTest:{func:l.LESS},depthWrite:a,colorWrite:u,stencilWrite:this.configuration.hasOccludees?o:null,stencilTest:this.configuration.hasOccludees?s:null})}}m.shader=new e(n,(()=>import("./PointRenderer.glsl.js")));export{m as PointRendererTechnique};
