/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/maybe","../../../../core/Logger","../../../../core/screenUtils","../../../../chunks/vec3f64","../../../../chunks/vec3","../../../../chunks/vec2","../../support/buffer/BufferView","../../support/geometryUtils","../lib/Util","../lib/geometryDataUtils","./renderers/utils","../lib/GLMaterial","./internal/MaterialUtil","../lib/Material","./internal/bufferWriterUtils","./internal/DefaultBufferWriter","../shaders/NativeLineTechnique"],(function(e,t,n,i,r,a,s,o,c,u,l,p,f,h,d,m,g,P,y){"use strict";const b=i.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial");let v=function(e){function i(t){var n;return(n=e.call(this,t,q)||this).techniqueConfig=new y.NativeLineTechniqueConfiguration,n}t._inheritsLoose(i,e);var r=i.prototype;return r.getTechniqueConfig=function(e){this.techniqueConfig.output=e,this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.vertexColors=this.params.vertexColors,this.techniqueConfig.transparent=this.params.color[3]<1||this.params.width<1;const t=n.isSome(this.params.stipplePattern);return this.techniqueConfig.stippleEnabled=t,this.techniqueConfig.stippleOffColorEnabled=t&&n.isSome(this.params.stippleOffColor),this.techniqueConfig.stippleIntegerRepeatsEnabled=t&&this.params.stippleIntegerRepeats,this.techniqueConfig.sceneHasOcludees=this.params.sceneHasOcludees,this.techniqueConfig},r.getPassParameters=function(){return this.params},r.intersect=function(e,t,n,i,r,a,s,o,c){c?d.intersectDrapedRenderLineGeometry(e,i,a,1,s):this.intersectLineGeometry(e,t,n,i,s)},r.intersectLineGeometry=function(e,t,n,i,r){if(!i.options.selectionMode||f.isInstanceHidden(t))return;if(!l.isTranslationMatrix(n))return void b.error("intersection assumes a translation-only matrix");const a=e.vertexAttributes.get("position").data,c=i.camera,p=E;o.copy(p,i.point);const h=2;s.set(_[0],p[0]-h,p[1]+h,0),s.set(_[1],p[0]+h,p[1]+h,0),s.set(_[2],p[0]+h,p[1]-h,0),s.set(_[3],p[0]-h,p[1]-h,0);for(let s=0;s<4;s++)if(!c.unprojectFromRenderScreen(_[s],N[s]))return;u.plane.fromPoints(c.eye,N[0],N[1],U),u.plane.fromPoints(c.eye,N[1],N[2],H),u.plane.fromPoints(c.eye,N[2],N[3],j),u.plane.fromPoints(c.eye,N[3],N[0],V);let d=Number.MAX_VALUE;for(let o=0;o<a.length-5;o+=3){if(C[0]=a[o]+n[12],C[1]=a[o+1]+n[13],C[2]=a[o+2]+n[14],A[0]=a[o+3]+n[12],A[1]=a[o+4]+n[13],A[2]=a[o+5]+n[14],u.plane.signedDistance(U,C)<0&&u.plane.signedDistance(U,A)<0||u.plane.signedDistance(H,C)<0&&u.plane.signedDistance(H,A)<0||u.plane.signedDistance(j,C)<0&&u.plane.signedDistance(j,A)<0||u.plane.signedDistance(V,C)<0&&u.plane.signedDistance(V,A)<0)continue;if(c.projectToRenderScreen(C,D),c.projectToRenderScreen(A,O),D[2]<0&&O[2]>0){s.subtract(x,C,A);const e=c.frustum,t=-u.plane.signedDistance(e[4],C)/s.dot(x,u.plane.normal(e[4]));s.scale(x,x,t),s.add(C,C,x),c.projectToRenderScreen(C,D)}else if(D[2]>0&&O[2]<0){s.subtract(x,A,C);const e=c.frustum,t=-u.plane.signedDistance(e[4],A)/s.dot(x,u.plane.normal(e[4]));s.scale(x,x,t),s.add(A,A,x),c.projectToRenderScreen(A,O)}else if(D[2]<0&&O[2]<0)continue;D[2]=0,O[2]=0;const e=u.lineSegment.distance2(u.lineSegment.fromPoints(D,O,M),p);e<d&&(d=e,s.copy(w,C),s.copy(B,A))}const m=i.rayBeginPoint,g=i.rayEndPoint;if(d<h*h){let e=Number.MAX_VALUE;if(u.lineSegment.closestLineSegmentPoint(u.lineSegment.fromPoints(w,B,M),u.lineSegment.fromPoints(m,g,T),R)){s.subtract(R,R,m);const t=s.length(R);s.scale(R,R,1/t),e=t/s.distance(m,g)}r(e,R)}},r.computeAttachmentOrigin=function(e,t){const n=e.vertexAttributes;if(!n)return!1;const i=n.get("position");return p.computeAttachmentOriginLines(i,null,!1,t)},r.createBufferWriter=function(){const e=this.params.vertexColors?P.PositionColorLayout:P.PositionLayout;return n.isNone(this.params.stipplePattern)?new P.DefaultBufferWriter(e):new L(e.clone().vec3f("auxpos1"))},r.getGLMaterial=function(e){return 0===e.output||4===e.output?new S(e):void 0},i}(m.Material),S=function(e){function n(t){var n;return(n=e.call(this,t)||this).updateParameters(),n}t._inheritsLoose(n,e);var i=n.prototype;return i.updateParameters=function(){this.technique=this.techniqueRep.acquireAndReleaseExisting(y.NativeLineTechnique,this.material.getTechniqueConfig(this.output),this.technique)},i.beginSlot=function(e){return 3===e},i._updateOccludeeState=function(e){e.hasOccludees!==this.material.params.sceneHasOcludees&&(this.material.setParameterValues({sceneHasOcludees:e.hasOccludees}),this.updateParameters())},i.ensureParameters=function(e){0===this.output&&this._updateOccludeeState(e)},i.bind=function(e,t){e.bindProgram(this.technique.program),this.technique.bindPass(e,this.material.getPassParameters(),t)},i.getPipelineState=function(e,t){return this.technique.getPipelineState(t)},n}(h),L=function(){function e(e){this.vertexBufferLayout=e}var t=e.prototype;return t.allocate=function(e){return this.vertexBufferLayout.createBuffer(e)},t.elementCount=function(e){return e.indices.get("position").length},t.write=function(e,t,n,i){g.writeDefaultAttributes(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,n,i),this.writeAuxpos1(e,t,n,i)},t.writeAuxpos1=function(e,t,n,i){const r=n.getField("auxpos1",c.BufferViewVec3f),a=t.indices.get("position"),s=t.vertexAttributes.get("position").data,o=e.transformation,u=r.typedBufferStride,l=r.typedBuffer;i*=u;for(let c=0;c<a.length;c+=2){const e=3*a[c],t=s[e],n=s[e+1],r=s[e+2],p=o[0]*t+o[4]*n+o[8]*r+o[12],f=o[1]*t+o[5]*n+o[9]*r+o[13],h=o[2]*t+o[6]*n+o[10]*r+o[14];for(let a=0;a<2;++a)l[i]=p,l[i+1]=f,l[i+2]=h,i+=u}},e}();const q={color:[1,1,1,1],vertexColors:!1,slicePlaneEnabled:!1,width:1,stipplePattern:null,stippleIntegerRepeats:!1,stippleOffColor:null,sceneHasOcludees:!1,...m.materialParametersDefaults},C=a.create(),A=a.create(),x=a.create(),R=a.create(),D=r.createRenderScreenPointArray3(),O=r.createRenderScreenPointArray3(),w=a.create(),B=a.create(),M=u.lineSegment.create(),T=u.lineSegment.create(),E=a.create(),_=[r.createRenderScreenPointArray3(),r.createRenderScreenPointArray3(),r.createRenderScreenPointArray3(),r.createRenderScreenPointArray3()],N=[a.create(),a.create(),a.create(),a.create()],U=u.plane.create(),H=u.plane.create(),j=u.plane.create(),V=u.plane.create();e.NativeLineMaterial=v,Object.defineProperty(e,"__esModule",{value:!0})}));
