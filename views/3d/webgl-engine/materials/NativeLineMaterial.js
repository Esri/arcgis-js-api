/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/maybe","../../../../core/Logger","../../../../core/screenUtils","../../../../chunks/vec3f64","../../../../chunks/vec3","../../../../chunks/vec2","../../support/buffer/BufferView","../../support/geometryUtils","../lib/geometryDataUtils","../lib/Util","./renderers/utils","../lib/GLMaterial","./internal/MaterialUtil","../lib/Material","./internal/bufferWriterUtils","./internal/DefaultBufferWriter","../shaders/NativeLineTechnique"],(function(e,t,n,r,i,a,s,o,c,l,u,p,f,h,d,m,g,P,y){"use strict";const S=r.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial");let A=function(e){function r(t,n){var r;return(r=e.call(this,n,t,b)||this).techniqueConfig=new y.NativeLineTechniqueConfiguration,r}t._inheritsLoose(r,e);var i=r.prototype;return i.getTechniqueConfig=function(e){this.techniqueConfig.output=e,this.techniqueConfig.slicePlaneEnabled=this.params.slicePlaneEnabled,this.techniqueConfig.vertexColors=this.params.vertexColors,this.techniqueConfig.transparent=this.params.color[3]<1||this.params.width<1;const t=n.isSome(this.params.stipplePattern);return this.techniqueConfig.stippleEnabled=t,this.techniqueConfig.stippleOffColorEnabled=t&&n.isSome(this.params.stippleOffColor),this.techniqueConfig.stippleIntegerRepeatsEnabled=t&&this.params.stippleIntegerRepeats,this.techniqueConfig.sceneHasOcludees=this.params.sceneHasOcludees,this.techniqueConfig},i.getPassParameters=function(){return this.params},i.intersect=function(e,t,n,r,i,a,s,o,c){c?d.intersectDrapedRenderLineGeometry(e,r,a,1,s):this.intersectLineGeometry(e,t,n,r,s)},i.intersectLineGeometry=function(e,t,n,r,i){if(!r.options.selectionMode||f.isInstanceHidden(t))return;if(!p.isTranslationMatrix(n))return void S.error("intersection assumes a translation-only matrix");const a=e.data.getVertexAttr().position.data,c=r.camera,u=I;o.copy(u,r.point);s.set(M[0],u[0]-2,u[1]+2,0),s.set(M[1],u[0]+2,u[1]+2,0),s.set(M[2],u[0]+2,u[1]-2,0),s.set(M[3],u[0]-2,u[1]-2,0);for(let e=0;e<4;e++)if(!c.unprojectFromRenderScreen(M[e],N[e]))return;l.plane.fromPoints(c.eye,N[0],N[1],E),l.plane.fromPoints(c.eye,N[1],N[2],U),l.plane.fromPoints(c.eye,N[2],N[3],_),l.plane.fromPoints(c.eye,N[3],N[0],H);let h=Number.MAX_VALUE;for(let e=0;e<a.length-5;e+=3){if(x[0]=a[e]+n[12],x[1]=a[e+1]+n[13],x[2]=a[e+2]+n[14],O[0]=a[e+3]+n[12],O[1]=a[e+4]+n[13],O[2]=a[e+5]+n[14],l.plane.signedDistance(E,x)<0&&l.plane.signedDistance(E,O)<0||l.plane.signedDistance(U,x)<0&&l.plane.signedDistance(U,O)<0||l.plane.signedDistance(_,x)<0&&l.plane.signedDistance(_,O)<0||l.plane.signedDistance(H,x)<0&&l.plane.signedDistance(H,O)<0)continue;if(c.projectToRenderScreen(x,R),c.projectToRenderScreen(O,D),R[2]<0&&D[2]>0){s.subtract(L,x,O);const e=c.frustum,t=-l.plane.signedDistance(e.planes[4],x)/s.dot(L,l.plane.normal(e.planes[4]));s.scale(L,L,t),s.add(x,x,L),c.projectToRenderScreen(x,R)}else if(R[2]>0&&D[2]<0){s.subtract(L,O,x);const e=c.frustum,t=-l.plane.signedDistance(e.planes[4],O)/s.dot(L,l.plane.normal(e.planes[4]));s.scale(L,L,t),s.add(O,O,L),c.projectToRenderScreen(O,D)}else if(R[2]<0&&D[2]<0)continue;R[2]=0,D[2]=0;const t=l.lineSegment.distance2(l.lineSegment.fromPoints(R,D,w),u);t<h&&(h=t,s.copy(T,x),s.copy(V,O))}const d=r.rayBeginPoint,m=r.rayEndPoint;if(h<4){let e=Number.MAX_VALUE;if(l.lineSegment.closestLineSegmentPoint(l.lineSegment.fromPoints(T,V,w),l.lineSegment.fromPoints(d,m,B),q)){s.subtract(q,q,d);const t=s.length(q);s.scale(q,q,1/t),e=t/s.distance(d,m)}i(e,q)}},i.computeAttachmentOrigin=function(e,t){const n=e.data,r="getVertexAttr"in n?n.getVertexAttr():"vertexAttr"in n?n.vertexAttr:null;if(!r)return null;const i=r[p.VertexAttrConstants.POSITION];return u.computeAttachmentOriginLines(i,null,!1,t)},i.createBufferWriter=function(){const e=this.params.vertexColors?P.PositionColorLayout:P.PositionLayout;return n.isNone(this.params.stipplePattern)?new P.DefaultBufferWriter(e):new C(e.clone().vec3f(p.VertexAttrConstants.AUXPOS1))},i.getGLMaterial=function(e){return 0===e.output||4===e.output?new v(e):void 0},r}(m.Material),v=function(e){function n(t){var n;return(n=e.call(this,t)||this).updateParameters(),n}t._inheritsLoose(n,e);var r=n.prototype;return r.updateParameters=function(){this.technique=this.techniqueRep.acquireAndReleaseExisting(y.NativeLineTechnique,this.material.getTechniqueConfig(this.output),this.technique)},r.beginSlot=function(e){return 3===e},r._updateOccludeeState=function(e){e.hasOccludees!==this.material.params.sceneHasOcludees&&(this.material.setParameterValues({sceneHasOcludees:e.hasOccludees}),this.updateParameters())},r.ensureParameters=function(e){0===this.output&&this._updateOccludeeState(e)},r.bind=function(e,t){e.bindProgram(this.technique.program),this.technique.bindPass(e,this.material.getPassParameters(),t)},r.getPipelineState=function(e,t){return this.technique.getPipelineState(t)},n}(h),C=function(){function e(e){this.vertexBufferLayout=e}var t=e.prototype;return t.allocate=function(e){return this.vertexBufferLayout.createBuffer(e)},t.elementCount=function(e){return e.indices[p.VertexAttrConstants.POSITION].length},t.write=function(e,t,n,r){g.writeDefaultAttributes(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,n,r),this.writeAuxpos1(e,t,n,r)},t.writeAuxpos1=function(e,t,n,r){const i=n.getField(p.VertexAttrConstants.AUXPOS1,c.BufferViewVec3f),a=t.indices[p.VertexAttrConstants.POSITION],s=t.vertexAttr[p.VertexAttrConstants.POSITION].data,o=e.transformation,l=i.typedBufferStride,u=i.typedBuffer;r*=l;for(let e=0;e<a.length;e+=2){const t=3*a[e],n=s[t],i=s[t+1],c=s[t+2],p=o[0]*n+o[4]*i+o[8]*c+o[12],f=o[1]*n+o[5]*i+o[9]*c+o[13],h=o[2]*n+o[6]*i+o[10]*c+o[14];for(let e=0;e<2;++e)u[r]=p,u[r+1]=f,u[r+2]=h,r+=l}},e}();const b={color:[1,1,1,1],vertexColors:!1,slicePlaneEnabled:!1,width:1,stipplePattern:null,stippleIntegerRepeats:!1,stippleOffColor:null,sceneHasOcludees:!1,...m.materialParametersDefaults},x=a.create(),O=a.create(),L=a.create(),q=a.create(),R=i.createRenderScreenPointArray3(),D=i.createRenderScreenPointArray3(),T=a.create(),V=a.create(),w=l.lineSegment.create(),B=l.lineSegment.create(),I=a.create(),M=[i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3()],N=[a.create(),a.create(),a.create(),a.create()],E=l.plane.create(),U=l.plane.create(),_=l.plane.create(),H=l.plane.create();e.NativeLineMaterial=A,Object.defineProperty(e,"__esModule",{value:!0})}));
