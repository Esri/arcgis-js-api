/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/Logger","../../../../core/maybe","../../../../core/screenUtils","../../../../chunks/vec2","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../geometry/support/frustum","../../../../geometry/support/lineSegment","../../../../geometry/support/plane","../../../../geometry/support/buffer/BufferView","../core/shaderLibrary/ShaderOutputOptions","../lib/geometryDataUtils","../lib/GLMaterial","../lib/Material","../lib/RenderSlot","../lib/Util","../lib/VertexAttribute","./internal/bufferWriterUtils","./internal/DefaultBufferWriter","./internal/MaterialUtil","./renderers/utils","../shaders/NativeLineTechnique"],(function(e,t,r,n,i,s,a,o,c,u,l,f,d,p,h,m,g,A,P,b,S,y,O,v){"use strict";const x=r.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial");var T;!function(e){e[e.START=0]="START",e[e.END=1]="END"}(T||(T={}));let _=function(e){function r(t){var r;return(r=e.call(this,t,L)||this)._techniqueConfig=new v.NativeLineTechniqueConfiguration,r}t._inheritsLoose(r,e);var i=r.prototype;return i.getTechniqueConfig=function(e,t){this._techniqueConfig.output=e,this._techniqueConfig.slicePlaneEnabled=this.parameters.slicePlaneEnabled,this._techniqueConfig.vertexColors=this.parameters.vertexColors,this._techniqueConfig.transparent=this.parameters.color[3]<1||this.parameters.width<1,this._techniqueConfig.draped=t.slot===g.RenderSlot.DRAPED_MATERIAL;const r=n.isSome(this.parameters.stipplePattern);return this._techniqueConfig.stippleEnabled=r,this._techniqueConfig.stippleOffColorEnabled=r&&n.isSome(this.parameters.stippleOffColor),this._techniqueConfig.sceneHasOcludees=this.parameters.sceneHasOcludees,this._techniqueConfig.stipplePreferContinuous=this.parameters.stipplePreferContinuous,this._techniqueConfig},i.getPassParameters=function(){return this.parameters},i.intersect=function(e,t,r,i,s,a,o,c,u){n.isSome(u)?y.intersectDrapedRenderLineGeometry(e,i,u,a,1,o):this._intersectLineGeometry(e,t,r,i,o)},i._intersectLineGeometry=function(e,t,r,n,i){if(!n.options.selectionMode||O.isInstanceHidden(t))return;if(!A.isTranslationMatrix(r))return void x.error("intersection assumes a translation-only matrix");const o=e.vertexAttributes.get(P.VertexAttribute.POSITION).data,f=n.camera,d=H;s.copy(d,n.point);const p=2;a.set(j[0],d[0]-p,d[1]+p,0),a.set(j[1],d[0]+p,d[1]+p,0),a.set(j[2],d[0]+p,d[1]-p,0),a.set(j[3],d[0]-p,d[1]-p,0);for(let s=0;s<4;s++)if(!f.unprojectFromRenderScreen(j[s],G[s]))return;l.fromPoints(f.eye,G[0],G[1],k),l.fromPoints(f.eye,G[1],G[2],W),l.fromPoints(f.eye,G[2],G[3],X),l.fromPoints(f.eye,G[3],G[0],F);let h=Number.MAX_VALUE,m=0;for(let s=0;s<o.length-5;s+=3){if(D[0]=o[s]+r[12],D[1]=o[s+1]+r[13],D[2]=o[s+2]+r[14],V[0]=o[s+3]+r[12],V[1]=o[s+4]+r[13],V[2]=o[s+5]+r[14],l.signedDistance(k,D)<0&&l.signedDistance(k,V)<0||l.signedDistance(W,D)<0&&l.signedDistance(W,V)<0||l.signedDistance(X,D)<0&&l.signedDistance(X,V)<0||l.signedDistance(F,D)<0&&l.signedDistance(F,V)<0)continue;if(f.projectToRenderScreen(D,E),f.projectToRenderScreen(V,M),E[2]<0&&M[2]>0){a.subtract(I,D,V);const e=f.frustum,t=-l.signedDistance(e[c.PlaneIndex.NEAR],D)/a.dot(I,l.normal(e[c.PlaneIndex.NEAR]));a.scale(I,I,t),a.add(D,D,I),f.projectToRenderScreen(D,E)}else if(E[2]>0&&M[2]<0){a.subtract(I,V,D);const e=f.frustum,t=-l.signedDistance(e[c.PlaneIndex.NEAR],V)/a.dot(I,l.normal(e[c.PlaneIndex.NEAR]));a.scale(I,I,t),a.add(V,V,I),f.projectToRenderScreen(V,M)}else if(E[2]<0&&M[2]<0)continue;E[2]=0,M[2]=0;const e=u.distance2(u.fromPoints(E,M,B),d);e<h&&(h=e,a.copy(q,D),a.copy(w,V),m=s/3)}const g=n.rayBegin,b=n.rayEnd;if(h<p*p){let e=Number.MAX_VALUE;if(u.closestLineSegmentPoint(u.fromPoints(q,w,B),u.fromPoints(g,b,U),N)){a.subtract(N,N,g);const t=a.length(N);a.scale(N,N,1/t),e=t/a.distance(g,b)}i(e,N,m,!1)}},i.computeAttachmentOrigin=function(e,t){const r=e.vertexAttributes;if(!r)return!1;const n=r.get(P.VertexAttribute.POSITION);return p.computeAttachmentOriginLines(n,null,!1,t)},i.requiresSlot=function(e){return e===g.RenderSlot.OPAQUE_MATERIAL||e===g.RenderSlot.DRAPED_MATERIAL},i.createGLMaterial=function(e){return e.output===d.ShaderOutput.Color||e.output===d.ShaderOutput.Highlight?new R(e):null},i.createBufferWriter=function(){const e=this.parameters.vertexColors?S.PositionColorLayout:S.PositionLayout;return n.isNone(this.parameters.stipplePattern)?new S.DefaultBufferWriter(e):new C(e.clone().vec3f(P.VertexAttribute.AUXPOS1).vec2f(P.VertexAttribute.UV0))},r}(m.Material),R=function(e){function r(){return e.apply(this,arguments)||this}t._inheritsLoose(r,e);var n=r.prototype;return n.updateParameters=function(e){return this.ensureTechnique(v.NativeLineTechnique,e)},n._updateOccludeeState=function(e){e.hasOccludees!==this._material.parameters.sceneHasOcludees&&this._material.setParameters({sceneHasOcludees:e.hasOccludees})},n.beginSlot=function(e){return this._output===d.ShaderOutput.Color&&this._updateOccludeeState(e),this.updateParameters(e)},n.bind=function(e,t){t.bindPass(this._material.getPassParameters(),e)},r}(h),C=function(){function e(e){this.vertexBufferLayout=e}var t=e.prototype;return t.allocate=function(e){return this.vertexBufferLayout.createBuffer(e)},t.elementCount=function(e){return e.indices.get(P.VertexAttribute.POSITION).length},t.write=function(e,t,r,n){b.writeDefaultAttributes(t,this.vertexBufferLayout,e.transformation,e.invTranspTransformation,r,n),this._writeAuxpos1(e,t,r,n),this._writeUV0(e,t,r,n)},t._writeAuxpos1=function(e,t,r,n){const i=r.getField(P.VertexAttribute.AUXPOS1,f.BufferViewVec3f),s=t.indices.get(P.VertexAttribute.POSITION),a=t.vertexAttributes.get(P.VertexAttribute.POSITION).data,o=e.transformation,c=i.typedBufferStride,u=i.typedBuffer;n*=c;for(let l=0;l<s.length-1;l+=2)for(const e of[1,0]){const t=3*s[l+e],r=a[t],i=a[t+1],f=a[t+2],d=o[0]*r+o[4]*i+o[8]*f+o[12],p=o[1]*r+o[5]*i+o[9]*f+o[13],h=o[2]*r+o[6]*i+o[10]*f+o[14];u[n]=d,u[n+1]=p,u[n+2]=h,n+=c}},t._writeUV0=function(e,t,r,n){var i;const s=r.getField(P.VertexAttribute.UV0,f.BufferViewVec2f),o=t.indices.get(P.VertexAttribute.POSITION),c=t.vertexAttributes.get(P.VertexAttribute.POSITION).data,u=null==(i=t.vertexAttributes.get(P.VertexAttribute.DISTANCETOSTART))?void 0:i.data,l=e.transformation,d=s.typedBufferStride,p=s.typedBuffer;let h=0;p[n*=d]=T.START,p[n+1]=h,n+=d;const m=3*o[0],g=a.set(D,c[m],c[m+1],c[m+2]);l&&a.transformMat4(g,g,l);const A=V,b=o.length-1;let S=1;const y=u?(e,t,r)=>h=u[r]:(e,t,r)=>h+=a.distance(e,t);for(let f=1;f<b;f+=2){const e=3*o[f];a.set(A,c[e],c[e+1],c[e+2]),l&&a.transformMat4(A,A,l),y(g,A,S++);for(let t=0;t<2;++t)p[n]=1-t,p[n+1]=h,n+=d;a.copy(g,A)}const O=3*o[b];a.set(A,c[O],c[O+1],c[O+2]),l&&a.transformMat4(A,A,l),y(g,A,S),p[n]=T.END,p[n+1]=h},e}();const L={color:[1,1,1,1],vertexColors:!1,slicePlaneEnabled:!1,width:1,stipplePattern:null,stippleOffColor:null,stipplePreferContinuous:!0,sceneHasOcludees:!1,...m.DefaultMaterialParameters},D=o.create(),V=o.create(),I=o.create(),N=o.create(),E=i.createRenderScreenPointArray3(),M=i.createRenderScreenPointArray3(),q=o.create(),w=o.create(),B=u.create(),U=u.create(),H=o.create(),j=[i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3(),i.createRenderScreenPointArray3()],G=[o.create(),o.create(),o.create(),o.create()],k=l.create(),W=l.create(),X=l.create(),F=l.create();e.NativeLineMaterial=_,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
