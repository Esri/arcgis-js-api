/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/has","../../../../core/mathUtils","../../../../core/maybe","../../../../chunks/mat3","../../../../chunks/mat3f64","../../../../chunks/mat4","../../../../chunks/mat4f64","../../../../chunks/vec2","../../../../chunks/vec2f64","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../chunks/vec4f64","../../../../core/libs/gl-matrix-2/types/mat4","../../../../geometry/support/aaBoundingRect","../../../../geometry/support/buffer/BufferView","../../support/debugFlags","../../support/buffer/InterleavedLayout","../core/shaderLibrary/ShaderOutput","../core/shaderLibrary/hud/HUD.glsl","../lib/GLTextureMaterial","../lib/Material","../lib/RenderSlot","../lib/screenSizePerspectiveUtils","../lib/Util","../lib/VertexAttribute","./ScaleInfo","./internal/bufferWriterUtils","./internal/MaterialUtil","../../../../chunks/HUDMaterial.glsl","../shaders/HUDMaterialTechnique","../shaders/HUDMaterialTechniqueConfiguration"],(function(e,t,r,i,n,a,s,o,c,l,u,f,d,p,h,g,m,S,A,O,b,x,v,P,V,y,_,I,M,T,C,L,w){"use strict";let z=function(e){function r(t){var r;return(r=e.call(this,t,new te)||this)._configuration=new w.HUDMaterialTechniqueConfiguration,r}t._inheritsLoose(r,e);var s=r.prototype;return s.getConfiguration=function(e,t){return this._configuration.output=e,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.hasVerticalOffset=!!this.parameters.verticalOffset,this._configuration.hasScreenSizePerspective=!!this.parameters.screenSizePerspective,this._configuration.screenCenterOffsetUnitsEnabled="screen"===this.parameters.centerOffsetUnits?b.HUDSpace.Screen:b.HUDSpace.World,this._configuration.hasPolygonOffset=this.parameters.polygonOffset,this._configuration.isDraped=this.parameters.isDraped,this._configuration.occlusionTestEnabled=this.parameters.occlusionTest,this._configuration.pixelSnappingEnabled=this.parameters.pixelSnappingEnabled,this._configuration.signedDistanceFieldEnabled=this.parameters.textureIsSignedDistanceField,this._configuration.vvSize=!!this.parameters.vvSizeEnabled,this._configuration.vvColor=!!this.parameters.vvColorEnabled,this._configuration.occlusionPass=t.slot===P.RenderSlot.OCCLUSION_PIXELS&&this.parameters.occlusionTest&&(e===O.ShaderOutput.Color||e===O.ShaderOutput.Alpha),e===O.ShaderOutput.Color&&(this._configuration.debugDrawLabelBorder=!!S.LABELS_SHOW_BORDER),e===O.ShaderOutput.Highlight&&(this._configuration.binaryHighlightOcclusionEnabled=this.parameters.binaryHighlightOcclusion),this._configuration.depthEnabled=this.parameters.depthEnabled,this._configuration.transparencyPassType=t.transparencyPassType,this._configuration.hasMultipassGeometry=t.multipassGeometry.enabled,this._configuration.hasMultipassTerrain=t.multipassTerrain.enabled,this._configuration.cullAboveGround=t.multipassTerrain.cullAboveGround,this._configuration},s.intersect=function(e,t,r,i,s,c){if(!r.options.selectionMode||!r.options.hud||!e.visible)return;const l=this.parameters;let u=1,p=1;if(a.fromMat4(q,t),n.isSome(e.shaderTransformer)){const t=e.shaderTransformer(Y);u=t[0],p=t[5],D(q)}const h=e.vertexAttributes.get(_.VertexAttribute.POSITION),g=e.vertexAttributes.get(_.VertexAttribute.SIZE),m=e.vertexAttributes.get(_.VertexAttribute.NORMAL),S=e.vertexAttributes.get(_.VertexAttribute.AUXPOS1);y.assert(h.size>=3);const A=r.point,O=r.camera,b=C.calculateAnchorPosForRendering(l);u*=O.pixelRatio,p*=O.pixelRatio;const x="screen"===this.parameters.centerOffsetUnits;for(let n=0;n<h.data.length/h.size;n++){const e=n*h.size;f.set(F,h.data[e],h.data[e+1],h.data[e+2]),f.transformMat4(F,F,t);const i=n*g.size;$[0]=g.data[i]*u,$[1]=g.data[i+1]*p,f.transformMat4(F,F,O.viewMatrix);const a=n*S.size;if(f.set(Z,S.data[a+0],S.data[a+1],S.data[a+2]),!x&&(F[0]+=Z[0],F[1]+=Z[1],0!==Z[2])){const e=Z[2];f.normalize(Z,F),f.subtract(F,F,f.scale(Z,Z,e))}const s=n*m.size;if(f.set(H,m.data[s],m.data[s+1],m.data[s+2]),this._normalAndViewAngle(H,q,O,J),this._applyVerticalOffsetTransformationView(F,J,O,B),O.applyProjection(F,G),G[0]>-1){G[0]=Math.floor(G[0]),G[1]=Math.floor(G[1]),x&&(Z[0]||Z[1])&&(G[0]+=Z[0],0!==Z[1]&&(G[1]+=V.applyScaleFactor(Z[1],B.factorAlignment)),O.unapplyProjection(G,F)),G[0]+=this.parameters.screenOffset[0],G[1]+=this.parameters.screenOffset[1],V.applyPrecomputedScaleFactor($,B.factor,$);const e=K*O.pixelRatio;let t=0;if(l.textureIsSignedDistanceField&&(t=l.outlineSize*O.pixelRatio/2),A&&E(A,G[0],G[1],$,e,t,l,b)){const e=r.ray;if(f.transformMat4(k,F,o.invert(W,O.viewMatrix)),G[0]=A[0],G[1]=A[1],O.unprojectFromRenderScreen(G,F)){const t=d.create();f.copy(t,e.direction);const r=1/f.length(t);f.scale(t,t,r);c(f.distance(e.origin,F)*r,t,-1,!0,1,k)}}}}},s.intersectDraped=function(e,t,r,i,a,s){const o=e.vertexAttributes.get(_.VertexAttribute.POSITION),c=e.vertexAttributes.get(_.VertexAttribute.SIZE),l=this.parameters,u=C.calculateAnchorPosForRendering(l);let f=1,d=1;if(n.isSome(e.shaderTransformer)){const t=e.shaderTransformer(Y);f=t[0],d=t[5]}f*=e.screenToWorldRatio,d*=e.screenToWorldRatio;const p=Q*e.screenToWorldRatio;for(let n=0;n<o.data.length/o.size;n++){const t=n*o.size,r=o.data[t],h=o.data[t+1],g=n*c.size;$[0]=c.data[g]*f,$[1]=c.data[g+1]*d;let m=0;l.textureIsSignedDistanceField&&(m=l.outlineSize*e.screenToWorldRatio/2),E(i,r,h,$,p,m,l,u)&&a(s.dist,s.normal,-1,!1)}},s.createBufferWriter=function(){return new ne(this)},s._normalAndViewAngle=function(e,t,r,i){return h.isMat4(t)&&(t=a.fromMat4(j,t)),f.transformMat3(i.normal,e,t),f.transformMat4(i.normal,i.normal,r.viewInverseTransposeMatrix),i.cosAngle=f.dot(X,ee),i},s._updateScaleInfo=function(e,t,r){const i=this.parameters;n.isSome(i.screenSizePerspective)?V.precomputeScaleFactor(r,t,i.screenSizePerspective,e.factor):(e.factor.scale=1,e.factor.factor=0,e.factor.minPixelSize=0,e.factor.paddingPixels=0),n.isSome(i.screenSizePerspectiveAlignment)?V.precomputeScaleFactor(r,t,i.screenSizePerspectiveAlignment,e.factorAlignment):(e.factorAlignment.factor=e.factor.factor,e.factorAlignment.scale=e.factor.scale,e.factorAlignment.minPixelSize=e.factor.minPixelSize,e.factorAlignment.paddingPixels=e.factor.paddingPixels)},s.applyShaderOffsetsView=function(e,t,r,i,n,a,s){const o=this._normalAndViewAngle(t,r,n,J);return this._applyVerticalGroundOffsetView(e,o,n,s),this._applyVerticalOffsetTransformationView(s,o,n,a),this._applyPolygonOffsetView(s,o,i[3],n,s),this._applyCenterOffsetView(s,i,s),s},s.applyShaderOffsetsNDC=function(e,t,r,i,a){return this._applyCenterOffsetNDC(e,t,r,i),n.isSome(a)&&f.copy(a,i),this._applyPolygonOffsetNDC(i,t,r,i),i},s._applyPolygonOffsetView=function(e,t,r,n,a){const s=n.aboveGround?1:-1;let o=Math.sign(r);0===o&&(o=s);const c=s*o;if(this.parameters.shaderPolygonOffset<=0)return f.copy(a,e);const l=i.clamp(Math.abs(t.cosAngle),.01,1),u=1-Math.sqrt(1-l*l)/l/n.viewport[2];return c>0?f.scale(a,e,u):f.scale(a,e,1/u),a},s._applyVerticalGroundOffsetView=function(e,t,r,i){const n=f.length(e),a=r.aboveGround?1:-1,s=.5*r.computeRenderPixelSizeAtDist(n),o=f.scale(F,t.normal,a*s);return f.add(i,e,o),i},s._applyVerticalOffsetTransformationView=function(e,t,r,i){const a=this.parameters;if(!a.verticalOffset||!a.verticalOffset.screenLength){if(a.screenSizePerspective||a.screenSizePerspectiveAlignment){const r=f.length(e);this._updateScaleInfo(i,r,t.cosAngle)}else i.factor.scale=1,i.factorAlignment.scale=1;return e}const s=f.length(e),o=n.unwrapOr(a.screenSizePerspectiveAlignment,a.screenSizePerspective),c=T.verticalOffsetAtDistance(r,s,a.verticalOffset,t.cosAngle,o);return this._updateScaleInfo(i,s,t.cosAngle),f.scale(t.normal,t.normal,c),f.add(e,e,t.normal)},s._applyCenterOffsetView=function(e,t,r){const i="screen"!==this.parameters.centerOffsetUnits;return r!==e&&f.copy(r,e),i&&(r[0]+=t[0],r[1]+=t[1],t[2]&&(f.normalize(H,r),f.add(r,r,f.scale(H,H,t[2])))),r},s._applyCenterOffsetNDC=function(e,t,r,i){const n="screen"!==this.parameters.centerOffsetUnits;return i!==e&&f.copy(i,e),n||(i[0]+=t[0]/r.fullWidth*2,i[1]+=t[1]/r.fullHeight*2),i},s._applyPolygonOffsetNDC=function(e,t,r,i){const n=this.parameters.shaderPolygonOffset;if(e!==i&&f.copy(i,e),n){const e=r.aboveGround?1:-1,a=e*Math.sign(t[3]);i[2]-=(a||e)*n}return i},s.requiresSlot=function(e,t){if(t===O.ShaderOutput.Color||t===O.ShaderOutput.Alpha||t===O.ShaderOutput.Highlight||t===O.ShaderOutput.ObjectAndLayerIdColor){if(e===P.RenderSlot.DRAPED_MATERIAL)return!0;const{drawInSecondSlot:t,occlusionTest:r}=this.parameters;return e===(t?P.RenderSlot.LABEL_MATERIAL:P.RenderSlot.HUD_MATERIAL)||r&&e===P.RenderSlot.OCCLUSION_PIXELS}return!1},s.createGLMaterial=function(e){return new R(e)},s.calculateRelativeScreenBounds=function(e,t,r=g.create()){return U(this.parameters,e,t,r),r[2]=r[0]+e[0],r[3]=r[1]+e[1],r},r}(v.Material),R=function(e){function r(t){return e.call(this,{...t,...t.material.parameters})||this}t._inheritsLoose(r,e);var i=r.prototype;return i.selectProgram=function(e){return this.ensureTechnique(L.HUDMaterialTechnique,e)},i.beginSlot=function(e){return this.updateTexture(this._material.parameters.textureId),this._material.setParameters(this.textureBindParameters),this.selectProgram(e)},r}(x.GLTextureMaterial);function U(e,t,r,i=N){return l.copy(i,e.anchorPosition),i[0]*=-t[0],i[1]*=-t[1],i[0]+=e.screenOffset[0]*r,i[1]+=e.screenOffset[1]*r,i}function D(e){const t=e[0],r=e[1],i=e[2],n=e[3],a=e[4],s=e[5],o=e[6],c=e[7],l=e[8],u=1/Math.sqrt(t*t+r*r+i*i),f=1/Math.sqrt(n*n+a*a+s*s),d=1/Math.sqrt(o*o+c*c+l*l);return e[0]=t*u,e[1]=r*u,e[2]=i*u,e[3]=n*f,e[4]=a*f,e[5]=s*f,e[6]=o*d,e[7]=c*d,e[8]=l*d,e}function E(e,t,r,i,a,s,o,c){let l=t-a-(c[0]>0?i[0]*c[0]:0),u=l+i[0]+2*a,f=r-a-(c[1]>0?i[1]*c[1]:0),d=f+i[1]+2*a;const p=o.distanceFieldBoundingBox;return o.textureIsSignedDistanceField&&n.isSome(p)&&(l+=i[0]*p[0],f+=i[1]*p[1],u-=i[0]*(1-p[2]),d-=i[1]*(1-p[3]),l-=s,u+=s,f-=s,d+=s),e[0]>l&&e[0]<u&&e[1]>f&&e[1]<d}const B=new I.ScaleInfo,N=u.create(),F=d.create(),H=d.create(),G=p.create(),X=d.create(),k=d.create(),q=s.create(),j=s.create(),W=c.create(),Z=d.create(),J={normal:X,cosAngle:0},Y=c.create(),K=1,Q=2,$=[0,0],ee=d.fromValues(0,0,1);let te=function(e){function r(){var t;return(t=e.apply(this,arguments)||this).renderOccluded=v.RenderOccludedFlag.Occlude,t.color=p.fromValues(1,1,1,1),t.texCoordScale=[1,1],t.polygonOffset=!1,t.anchorPosition=u.fromValues(.5,.5),t.screenOffset=[0,0],t.shaderPolygonOffset=1e-5,t.textureIsSignedDistanceField=!1,t.outlineColor=p.fromValues(1,1,1,1),t.outlineSize=0,t.vvSizeEnabled=!1,t.vvSizeMinSize=[1,1,1],t.vvSizeMaxSize=[100,100,100],t.vvSizeOffset=[0,0,0],t.vvSizeFactor=[1,1,1],t.vvColorEnabled=!1,t.vvColorValues=[0,0,0,0,0,0,0,0],t.vvColorColors=[1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],t.hasSlicePlane=!1,t.pixelSnappingEnabled=!0,t.occlusionTest=!0,t.binaryHighlightOcclusion=!0,t.centerOffsetUnits="world",t.drawInSecondSlot=!1,t.depthEnabled=!0,t.isDraped=!1,t}return t._inheritsLoose(r,e),r}(x.GLTextureMaterialBindParameters);const re=A.newLayout().vec3f(_.VertexAttribute.POSITION).vec3f(_.VertexAttribute.NORMAL).vec2f(_.VertexAttribute.UV0).vec4u8(_.VertexAttribute.COLOR).vec2f(_.VertexAttribute.SIZE).vec4f(_.VertexAttribute.AUXPOS1).vec4f(_.VertexAttribute.AUXPOS2),ie=re.clone().vec4u8(_.VertexAttribute.OBJECTANDLAYERIDCOLOR);let ne=function(){function e(e){this._material=e,this.vertexBufferLayout=r("enable-feature:objectAndLayerId-rendering")?ie:re}var t=e.prototype;return t.allocate=function(e){return this.vertexBufferLayout.createBuffer(e)},t.elementCount=function(e){return 6*e.indices.get(_.VertexAttribute.POSITION).length},t.write=function(e,t,r,i,a){M.writePosition(r.indices.get(_.VertexAttribute.POSITION),r.vertexAttributes.get(_.VertexAttribute.POSITION).data,e,i.position,a,6),M.writeNormal(r.indices.get(_.VertexAttribute.NORMAL),r.vertexAttributes.get(_.VertexAttribute.NORMAL).data,t,i.normal,a,6);const s=r.vertexAttributes.get(_.VertexAttribute.UV0).data;let o,c,l,u;if(null==s||s.length<4){const e=this._material.parameters;o=0,c=0,l=e.texCoordScale[0],u=e.texCoordScale[1]}else o=s[0],c=s[1],l=s[2],u=s[3];l=Math.min(1.99999,l+1),u=Math.min(1.99999,u+1);let f=r.indices.get(_.VertexAttribute.POSITION).length,d=a;const p=i.uv0;for(let n=0;n<f;++n)p.set(d,0,o),p.set(d,1,c),d+=1,p.set(d,0,l),p.set(d,1,c),d+=1,p.set(d,0,l),p.set(d,1,u),d+=1,p.set(d,0,l),p.set(d,1,u),d+=1,p.set(d,0,o),p.set(d,1,u),d+=1,p.set(d,0,o),p.set(d,1,c),d+=1;M.writeColor(r.indices.get(_.VertexAttribute.COLOR),r.vertexAttributes.get(_.VertexAttribute.COLOR).data,4,i.color,a,6);const h=r.indices.get(_.VertexAttribute.SIZE),g=r.vertexAttributes.get(_.VertexAttribute.SIZE).data;f=h.length;const S=i.size;d=a;for(let n=0;n<f;++n){const e=g[2*h[n]],t=g[2*h[n]+1];for(let r=0;r<6;++r)S.set(d,0,e),S.set(d,1,t),d+=1}if(r.indices.get(_.VertexAttribute.AUXPOS1)&&r.vertexAttributes.get(_.VertexAttribute.AUXPOS1)?M.writeBufferVec4(r.indices.get(_.VertexAttribute.AUXPOS1),r.vertexAttributes.get(_.VertexAttribute.AUXPOS1).data,i.auxpos1,a,6):M.writeBufferVec4Zeros(i.auxpos1,a,6*f),r.indices.get(_.VertexAttribute.AUXPOS2)&&r.vertexAttributes.get(_.VertexAttribute.AUXPOS2)?M.writeBufferVec4(r.indices.get(_.VertexAttribute.AUXPOS2),r.vertexAttributes.get(_.VertexAttribute.AUXPOS2).data,i.auxpos2,a,6):M.writeBufferVec4Zeros(i.auxpos2,a,6*f),n.isSome(r.objectAndLayerIdColor)){if(r.indices.get(_.VertexAttribute.POSITION)){const e=r.indices.get(_.VertexAttribute.POSITION).length,t=i.getField(_.VertexAttribute.OBJECTANDLAYERIDCOLOR,m.BufferViewVec4u8);M.writeObjectAndLayerIdColor(r.objectAndLayerIdColor,t,e,a,6)}}},e}();e.HUDMaterial=z,e.Parameters=te,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
