/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{secondsFromMilliseconds as e}from"../../../../core/time.js";import{f as t}from"../../../../chunks/vec2f64.js";import{f as i}from"../../../../chunks/vec4f64.js";import{ShaderOutput as r}from"../core/shaderLibrary/ShaderOutputOptions.js";import{AnimationTimer as s}from"../lib/AnimationTimer.js";import{outputFromPass as a}from"../lib/GLMaterials.js";import{Material as n,MaterialParameters as o}from"../lib/Material.js";import{OITPolygonOffsetLimit as h}from"../lib/OrderIndependentTransparency.js";import{RenderSlot as c}from"../lib/RenderSlot.js";import{WaterGLMaterial as p}from"./WaterGLMaterial.js";import{WaterTechniqueConfiguration as l}from"./WaterTechnique.js";import{DefaultBufferWriter as m,PositionUVLayout as u}from"./internal/DefaultBufferWriter.js";import{intersectTriangleGeometry as f}from"./internal/MaterialUtil.js";class d extends n{constructor(e){super(e,new A),this._techniqueConfig=new l,this.animation=new s}getConfiguration(e,t){return this._techniqueConfig.output=e,this._techniqueConfig.writeDepth=this.parameters.writeDepth,this._techniqueConfig.receiveShadows=this.parameters.receiveShadows,this._techniqueConfig.hasSlicePlane=this.parameters.hasSlicePlane,this._techniqueConfig.transparent=this.parameters.transparent,this._techniqueConfig.hasScreenSpaceReflections=this.parameters.hasScreenSpaceReflections,this._techniqueConfig.hasCloudsReflections=this.parameters.hasCloudsReflections,this._techniqueConfig.isDraped=this.parameters.isDraped,this._techniqueConfig.transparencyPassType=t.transparencyPassType,this._techniqueConfig.enableOffset=t.camera.relativeElevation<h,this._techniqueConfig.hasMultipassTerrain=t.multipassTerrain.enabled,this._techniqueConfig.cullAboveGround=t.multipassTerrain.cullAboveGround,this._techniqueConfig}update(t){const i=Math.min(t.camera.relativeElevation,t.camera.distance);this.animation.enabled=Math.sqrt(this.parameters.waveTextureRepeat/this.parameters.waveStrength)*i<R;const r=this.animation.advance(t);return this.setParameters({timeElapsed:e(this.animation.time)*this.parameters.animationSpeed},!1),this.animation.enabled&&r}intersect(e,t,i,r,s,a,n){f(e,t,r,s,a,void 0,n)}requiresSlot(e,t){switch(a(t)){case r.Normal:return e===c.DRAPED_WATER;case r.Color:if(this.parameters.isDraped)return e===c.DRAPED_MATERIAL;break;case r.Highlight:return e===c.OPAQUE_MATERIAL||e===c.DRAPED_MATERIAL}let i=c.OPAQUE_MATERIAL;return this.parameters.transparent&&(i=this.parameters.writeDepth?c.TRANSPARENT_MATERIAL:c.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),e===i}createGLMaterial(e){if(e.output===r.Color&&this.parameters.isDraped)return e.output=r.Draped,new p(e);switch(e.output){case r.Color:case r.Normal:case r.Highlight:case r.Alpha:return new p(e)}return null}createBufferWriter(){return new m(u)}}class A extends o{constructor(){super(...arguments),this.waveStrength=.06,this.waveTextureRepeat=32,this.waveDirection=t(1,0),this.waveVelocity=.05,this.flowStrength=.015,this.flowOffset=-.5,this.animationSpeed=.35,this.timeElapsed=0,this.color=i(0,0,0,0),this.transparent=!0,this.writeDepth=!0,this.hasSlicePlane=!1,this.isDraped=!1,this.receiveShadows=!0,this.hasScreenSpaceReflections=!1,this.hasCloudsReflections=!1}}const R=35e3;export{d as WaterMaterial,A as WaterMaterialParameters};
