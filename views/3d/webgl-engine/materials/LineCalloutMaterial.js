/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{f as t}from"../../../../chunks/vec2f32.js";import{Z as r}from"../../../../chunks/vec2f64.js";import{newLayout as i}from"../../support/buffer/InterleavedLayout.js";import{ShaderOutput as s}from"../core/shaderLibrary/ShaderOutputOptions.js";import{HUDSpace as n}from"../core/shaderLibrary/hud/HUD.glsl.js";import a from"../lib/GLMaterial.js";import{Material as o,MaterialParameters as u}from"../lib/Material.js";import{RenderSlot as f}from"../lib/RenderSlot.js";import{VertexAttribute as c}from"../lib/VertexAttribute.js";import{writePosition as l,writeNormal as h,writeBufferVec4 as m}from"./internal/bufferWriterUtils.js";import{LineCalloutTechnique as d}from"../shaders/LineCalloutTechnique.js";import{LineCalloutTechniqueConfiguration as p}from"../shaders/LineCalloutTechniqueConfiguration.js";class g extends o{constructor(e){super(e,new S),this.techniqueConfig=new p,this._uniqueMaterialIdentifier=g.uniqueMaterialIdentifier(this.parameters)}get uniqueMaterialIdentifier(){return this._uniqueMaterialIdentifier}getPassParameters(){return this.parameters}getConfiguration(t,r){const i=r?.slot!==f.LINE_CALLOUTS;return this.techniqueConfig.occlusionTestEnabled=this.parameters.occlusionTest,this.techniqueConfig.hasVerticalOffset=e(this.parameters.verticalOffset),this.techniqueConfig.hasScreenSizePerspective=e(this.parameters.screenSizePerspective),this.techniqueConfig.depthHudEnabled=i,this.techniqueConfig.depthHudAlignStartEnabled=!!this.parameters.depthHUDAlignStart,this.techniqueConfig.screenCenterOffsetUnitsEnabled="screen"===this.parameters.centerOffsetUnits?n.Screen:n.World,this.techniqueConfig.hasSlicePlane=this.parameters.hasSlicePlane,this.techniqueConfig.hasMultipassGeometry=!!r&&r.multipassGeometry.enabled,this.techniqueConfig}intersect(){}requiresSlot(e){switch(e){case f.LINE_CALLOUTS:case f.LINE_CALLOUTS_HUD_DEPTH:return!0}return!1}createGLMaterial(e){return e.output===s.Color?new O(e):null}createBufferWriter(){return new C}validateParameters(e){const t=g.uniqueMaterialIdentifier(e);t!==this._uniqueMaterialIdentifier&&(this._uniqueMaterialIdentifier=t)}static uniqueMaterialIdentifier(e){return JSON.stringify({screenOffset:e.screenOffset||[0,0],centerOffsetUnits:e.centerOffsetUnits||"world"})}}class O extends a{beginSlot(e){return this.ensureTechnique(d,e)}}class S extends u{constructor(){super(...arguments),this.screenOffset=r,this.color=[0,0,0,1],this.size=1,this.occlusionTest=!1,this.shaderPolygonOffset=1e-5,this.depthHUDAlignStart=!1,this.centerOffsetUnits="world",this.hasSlicePlane=!1}}const q=i().vec3f(c.POSITION).vec3f(c.NORMAL).vec2f(c.UV0).vec4f(c.AUXPOS1),L=[t(0,0),t(1,0),t(0,1),t(1,0),t(1,1),t(0,1)];class C{constructor(){this.vertexBufferLayout=q}allocate(e){return this.vertexBufferLayout.createBuffer(e)}elementCount(e){return 6*e.indices.get(c.POSITION).length}write(e,t,r,i){l(t.indices.get(c.POSITION),t.vertexAttributes.get(c.POSITION).data,e.transformation,r.position,i,6),h(t.indices.get(c.NORMAL),t.vertexAttributes.get(c.NORMAL).data,e.invTranspTransformation,r.normal,i,6),m(t.indices.get(c.AUXPOS1),t.vertexAttributes.get(c.AUXPOS1).data,r.auxpos1,i,6);for(let s=0;s<L.length;++s)r.uv0.setVec(i+s,L[s])}}export{g as LineCalloutMaterial,S as Parameters};
