/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/vec3","../../../../chunks/vec3f64","../../../../chunks/vec4f64","../../../../geometry/support/aaBoundingBox","../../../../geometry/support/buffer/BufferView","../../support/buffer/InterleavedLayout","../core/shaderLibrary/ShaderOutput","../lib/basicInterfaces","../lib/GLMaterial","../lib/Material","../lib/RenderSlot","../lib/Util","../lib/VertexAttribute","./internal/bufferWriterUtils","./internal/MaterialUtil","../shaders/ShadedColorMaterialTechnique"],(function(e,t,r,i,n,a,s,o,u,l,c,h,f,d,p,S,b,A){"use strict";let g=function(e){function i(t){var r;return(r=e.call(this,t,new T)||this).supportsEdges=!0,r._configuration=new A.ShadedColorMaterialTechniqueConfiguration,r._vertexAttributeLocations=A.vertexAttributeLocations,r}t._inheritsLoose(i,e);var n=i.prototype;return n.getConfiguration=function(e,t){return this._configuration.output=e,this._configuration.cullFace=this.parameters.cullFace,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.transparent=this.parameters.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.screenSizeEnabled=this.parameters.screenSizeEnabled,this._configuration.shadingEnabled=this.parameters.shadingEnabled,this._configuration.transparencyPassType=t.transparencyPassType,this._configuration.hasMultipassTerrain=t.multipassTerrain.enabled,this._configuration.cullAboveGround=t.multipassTerrain.cullAboveGround,this._configuration},n.intersect=function(e,t,i,n,s,o){if(this.parameters.screenSizeEnabled){const t=e.vertexAttributes.get(p.VertexAttribute.OFFSET),u={applyToVertex:(e,n,a,s)=>{const o=r.set(x,t.data[3*s+0],t.data[3*s+1],t.data[3*s+2]),u=r.set(v,e,n,a);return r.scale(o,o,this.parameters.screenSizeScale*i.camera.computeRenderPixelSizeAt(o)),r.add(u,u,o),[u[0],u[1],u[2]]},applyToAabb:e=>{const t=a.center(e,x);return a.scale(e,this.parameters.screenSizeScale*i.camera.computeRenderPixelSizeAt(t))}};b.intersectTriangleGeometry(e,i,n,s,u,o)}else b.intersectTriangleGeometry(e,i,n,s,void 0,o)},n.requiresSlot=function(e,t){if(t===u.ShaderOutput.Highlight)return e===f.RenderSlot.OPAQUE_MATERIAL;if(t===u.ShaderOutput.Color||t===u.ShaderOutput.Alpha||t===u.ShaderOutput.ObjectAndLayerIdColor){let t=f.RenderSlot.OPAQUE_MATERIAL;return this.parameters.transparent&&(t=this.parameters.writeDepth?f.RenderSlot.TRANSPARENT_MATERIAL:f.RenderSlot.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL),e===t||e===f.RenderSlot.DRAPED_MATERIAL}return!1},n.createGLMaterial=function(e){return new E(e)},n.createBufferWriter=function(){return new m(this.parameters.screenSizeEnabled)},i}(h.Material),E=function(e){function r(){return e.apply(this,arguments)||this}return t._inheritsLoose(r,e),r.prototype.beginSlot=function(e){return this.ensureTechnique(A.ShadedColorMaterialTechnique,e)},r}(c),T=function(e){function a(){var t;return(t=e.apply(this,arguments)||this).color=n.fromValues(1,1,1,1),t.shadingTint=n.fromValues(0,0,0,.25),t.shadingDirection=r.normalize(i.create(),[.5,-.5,-.5]),t.screenSizeScale=14,t.transparent=!1,t.writeDepth=!0,t.hasSlicePlane=!1,t.cullFace=l.CullFaceOptions.None,t.screenSizeEnabled=!1,t.shadingEnabled=!0,t}return t._inheritsLoose(a,e),a}(h.MaterialParameters),m=function(){function e(e){this.screenSizeEnabled=e;const t=o.newLayout().vec3f(p.VertexAttribute.POSITION).vec3f(p.VertexAttribute.NORMAL);this.screenSizeEnabled&&t.vec3f(p.VertexAttribute.OFFSET),this.vertexBufferLayout=t}var t=e.prototype;return t.allocate=function(e){return this.vertexBufferLayout.createBuffer(e)},t.elementCount=function(e){return e.indices.get(p.VertexAttribute.POSITION).length},t.write=function(e,t,r,i,n){if(S.writeDefaultAttributes(r,this.vertexBufferLayout,e,t,i,n),this.screenSizeEnabled){if(!r.vertexAttributes.has(p.VertexAttribute.OFFSET))throw new Error(`${p.VertexAttribute.OFFSET} vertex attribute required for screenSizeEnabled ShadedColorMaterial`);{const e=r.vertexAttributes.get(p.VertexAttribute.OFFSET),a=r.indices.get(p.VertexAttribute.OFFSET);d.assert(3===e.size);const o=i.getField(p.VertexAttribute.OFFSET,s.BufferViewVec3f);if(!o)throw new Error("unable to acquire view for "+p.VertexAttribute.OFFSET);S.writePosition(a,e.data,t,o,n)}}},e}();const x=i.create(),v=i.create();e.ShadedColorMaterial=g,e.ShadedColorMaterialParameters=T,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
