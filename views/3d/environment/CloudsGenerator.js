/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/Handles","../../../core/mathUtils","../../../core/maybe","../../../core/reactiveUtils","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/accessorSupport/decorators/subclass","../../../chunks/mat3","../../../chunks/mat4","../../../chunks/mat4f64","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3f32","../../../geometry/ellipsoidUtils","../../../chunks/Clouds.glsl","./CloudsData","./CloudsPresets","./CloudsTechnique","./CloudsTechniqueConfiguration","./NoiseTextureAtlas","../webgl-engine/lib/BindParameters","../webgl-engine/lib/glUtil3D","../../support/Scheduler","../../webgl/enums","../../webgl/FramebufferObject"],(function(e,t,s,r,i,a,o,n,h,u,l,d,c,p,_,f,m,g,y,T,C,P,x,w,v,b,S,I,M,E){"use strict";e.CloudsGenerator=function(e){function s(t){var s;return(s=e.call(this,t)||this)._handles=new i,s._techniques=new Array,s._techniqueConfiguration=new w.CloudsTechniqueConfiguration,s._bindParameters=new b.BindParameters(null,null,null),s._passParameters=new T.CloudsPassParameters,s._drawParameters=new T.CloudsDrawParameters,s._weatherTile=m.create(),s._weatherTileCount=128,s._faceIndex=0,s._tileIndex=0,s.coverage=a.lerp(P.cloudPresets.default.coverage[0],P.cloudPresets.default.coverage[1],.5),s.density=a.lerp(P.cloudPresets.default.density[0],P.cloudPresets.default.density[1],.5),s.absorption=a.lerp(P.cloudPresets.default.absorption[0],P.cloudPresets.default.absorption[1],.5),s.cloudSize=a.lerp(P.cloudPresets.default.cloudSize[0],P.cloudPresets.default.cloudSize[1],.5),s.detailSize=a.lerp(P.cloudPresets.default.detailSize[0],P.cloudPresets.default.detailSize[1],.5),s.smoothness=a.lerp(P.cloudPresets.default.smoothness[0],P.cloudPresets.default.smoothness[1],.5),s.cloudHeight=a.lerp(P.cloudPresets.default.cloudHeight[0],P.cloudPresets.default.cloudHeight[1],.5),s.raymarchingSteps=P.cloudPresets.default.raymarchingSteps,s._viewMatrix=_.create(),s._dirty=!1,s.running=!1,s}t._inheritsLoose(s,e);var r=s.prototype;return r._getTechnique=function(e){const t=1-this.context.renderContext.bindParameters.cloudsFade.readChannels,s=t===C.CloudsTextureChannels.RG?2*e:2*e+1,r=this._techniques[s];return r||(this._techniqueConfiguration.writeTextureChannels=t,this._techniqueConfiguration.steps=e,this._techniques[s]=new x.CloudsTechnique({rctx:this.context.renderContext.rctx,viewingMode:this.view.state.viewingMode},this._techniqueConfiguration),this._techniques[s])},r.updateWeatherTile=function(){const e=this.view.camera.position.latitude,t=this.view.camera.position.longitude;if(null==e||null==t)return;f.set(this._weatherTile,(e+90)/180,(t+180)/360);const s=Math.floor(this._weatherTileCount*Math.abs(2*this._weatherTile[0]-1));this._weatherTile[0]=Math.floor(2*this._weatherTileCount*this._weatherTile[0]),this._weatherTile[1]=Math.floor(4*(this._weatherTileCount-s)*this._weatherTile[1]);let r=0,i=0;if(o.isSome(this.view.environment)&&"virtual"!==this.view.environment.lighting.type&&o.isSome(this.view.environment.lighting.date)){const e=new Date(this.view.environment.lighting.date);e.setUTCHours(this.view.environment.lighting.date.getUTCHours()+(this.view.environment.lighting.displayUTCOffset??0)),r=31*e.getUTCMonth()+e.getUTCDate(),i=e.getUTCFullYear()}this._weatherTile[0]=(this._weatherTile[0]+r)%(2*this._weatherTileCount),this._weatherTile[1]=(this._weatherTile[1]+i%100)%(4*this._weatherTileCount),f.equals(this._passParameters.weatherTile,this._weatherTile)||this.setDirty()},r.initialize=function(){this._vao=S.createQuadVAO(this.context.renderContext.rctx);const e=y.getReferenceEllipsoid(this.view.spatialReference);this._passParameters.cloudRadius=.5*e.radius,this.setDirty(),this.updateWeatherTile(),this._handles.add([this.view.resourceController.scheduler.registerTask(I.TaskPriority.CLOUDS_GENERATOR,this),n.watch((()=>[this.coverage,this.density,this.absorption,this.cloudSize,this.detailSize,this.smoothness,this.cloudHeight,this.raymarchingSteps]),(()=>this.setDirty()),n.initial)])},r.destroy=function(){this._handles.destroy(),this._techniques.forEach((e=>o.releaseMaybe(e))),this._frameBufferCube=o.disposeMaybe(this._frameBufferCube),this._techniques.length=0,this._vao=o.disposeMaybe(this._vao),this._passParameters.noiseTexture=o.destroyMaybe(this._passParameters.noiseTexture)},r._ensureNoiseTexture=function(){if(o.isSome(this._passParameters.noiseTexture))this._passParameters.noiseTexture.updateWeatherMap(this._passParameters.weatherTile);else{const e=this.context;this._passParameters.noiseTexture=new v.NoiseTextureAtlas({context:e}),this._passParameters.noiseTexture.updateWeatherMap(this._passParameters.weatherTile)}return o.isSome(this._passParameters.noiseTexture.textureAtlas)},r._ensureFrameBufferCube=function(e){if(o.isNone(this._frameBufferCube)){const t={target:M.TextureType.TEXTURE_CUBE_MAP,pixelFormat:M.PixelFormat.RGBA,dataType:M.PixelType.UNSIGNED_BYTE,wrapMode:M.TextureWrapMode.CLAMP_TO_EDGE,samplingMode:M.TextureSamplingMode.LINEAR,hasMipmap:!1,width:e,height:e};this._frameBufferCube=new E.FramebufferObject(this.context.renderContext.rctx,{colorTarget:M.TargetType.CUBEMAP,width:e,height:e},t)}return this._frameBufferCube},r.destroyFrameBufferCube=function(){this._frameBufferCube=o.disposeMaybe(this._frameBufferCube)},r.applyPreset=function(e,t){const s=e.median,r=e=>{const r=a.lerp(e[0],e[1],s);return t<.5?a.lerp(e[0],r,2*t):a.lerp(r,e[1],2*(t-.5))};this.coverage=r(e.coverage),this.density=r(e.density),this.absorption=r(e.absorption),this.cloudSize=r(e.cloudSize),this.detailSize=r(e.detailSize),this.smoothness=r(e.smoothness),this.cloudHeight=r(e.cloudHeight),this.raymarchingSteps=e.raymarchingSteps},r.setDirty=function(){this._dirty=this.running=!0},r.runTask=function(e){if(o.isNone(this._vao))return this._dirty=this.running=!1,this.context.renderContext.bindParameters.cloudsFade.renderingStage=C.CloudsRenderingStages.FINISHED_RENDERING,void e.madeProgress();0===this._faceIndex&&0===this._tileIndex&&(this._passParameters.raymarchingSteps=this.raymarchingSteps,this.updateWeatherTile(),f.copy(this._passParameters.weatherTile,this._weatherTile));const t=this._getTechnique(this._passParameters.raymarchingSteps);if(!t.compiled)return I.Task.YIELD;if(!this.context.renderContext.bindParameters.cloudsFade.isCameraPositionFinal||this.context.renderContext.bindParameters.cloudsFade.isFading||!this._ensureNoiseTexture())return I.Task.YIELD;0===this._faceIndex&&0===this._tileIndex&&(this.context.renderContext.bindParameters.cloudsFade.renderingStage=C.CloudsRenderingStages.RENDERING,this._passParameters.absorption=this.absorption,this._passParameters.density=this.density,this._passParameters.cloudSize=this.cloudSize,this._passParameters.detailSize=this.detailSize,this._passParameters.smoothness=this.smoothness,this._passParameters.cloudHeight=this.cloudHeight,this._passParameters.coverage=this.coverage,this._dirty=!1);const s=this.context.renderContext.rctx,r=s.bindTechnique(t,this._passParameters,this._bindParameters);s.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao);const i=s.getViewport(),a=t.configuration.cubeMapSize,n=a/this._tilesPerFace,h=this._tileIndex*n;s.setViewport(0,h,a,n);const u=this._ensureFrameBufferCube(a);s.bindFramebuffer(u);const l=R[this._faceIndex],d=D[this._faceIndex];p.targetTo(this._viewMatrix,G,l,d),c.fromMat4(this._drawParameters.viewMatrix,this._viewMatrix);const _=M.TextureType.TEXTURE_CUBE_MAP_POSITIVE_X+this._faceIndex;return u.setColorTextureTarget(_),r.bindDraw(this._drawParameters,this._bindParameters,this._passParameters),s.gl.drawArrays(s.gl.TRIANGLE_STRIP,0,4),s.gl.flush(),s.setViewport(i.x,i.y,i.width,i.height),this.requestRender(),++this._tileIndex,4===this._faceIndex&&this._tileIndex===this._tilesPerFace?(this.running=this._dirty,this._faceIndex=0,this._tileIndex=0,this.context.renderContext.bindParameters.cloudsFade.renderingStage=C.CloudsRenderingStages.FINISHED_RENDERING):this._tileIndex===this._tilesPerFace&&(++this._faceIndex,this._tileIndex=0),e.madeProgress(),I.Task.YIELD},t._createClass(s,[{key:"_tilesPerFace",get:function(){switch(this._techniqueConfiguration.steps){case w.RayMarchingSteps.SIXTEEN:return 1;case w.RayMarchingSteps.HUNDRED:return 4;case w.RayMarchingSteps.COUNT:case w.RayMarchingSteps.TWOHUNDRED:return 8}}},{key:"cubeMap",get:function(){return this._frameBufferCube}}]),s}(r),s.__decorate([h.property({constructOnly:!0})],e.CloudsGenerator.prototype,"context",void 0),s.__decorate([h.property({constructOnly:!0})],e.CloudsGenerator.prototype,"view",void 0),s.__decorate([h.property({constructOnly:!0})],e.CloudsGenerator.prototype,"requestRender",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"coverage",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"density",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"absorption",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"cloudSize",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"detailSize",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"smoothness",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"cloudHeight",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"raymarchingSteps",void 0),s.__decorate([h.property()],e.CloudsGenerator.prototype,"running",void 0),e.CloudsGenerator=s.__decorate([d.subclass("esri.views.3d.environment.CloudsGenerator")],e.CloudsGenerator);const R=[g.fromValues(1,0,0),g.fromValues(-1,0,0),g.fromValues(0,1,0),g.fromValues(0,-1,0),g.fromValues(0,0,1)],D=[g.fromValues(0,1,0),g.fromValues(0,1,0),g.fromValues(0,0,-1),g.fromValues(0,0,1),g.fromValues(0,1,0)],G=g.zeros();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
