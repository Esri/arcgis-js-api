/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{c as e}from"../../../chunks/mat4f64.js";import{S as r}from"../../../chunks/Stars.glsl.js";import{NoParameters as t}from"../webgl-engine/core/shaderModules/interfaces.js";import{ReloadableShaderModule as s}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as o}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as n}from"../webgl-engine/lib/Program.js";import{BlendFactor as l,CompareFunction as a}from"../../webgl/enums.js";import{makePipelineState as m,separateBlendingParams as c,defaultColorWriteParams as u}from"../../webgl/renderState.js";class d extends t{constructor(){super(...arguments),this.modelMatrix=e()}}class g extends i{constructor(e){super(e,null,(()=>this.destroy()))}initializeProgram(e){const r=g.shader.get().build();return new n(e.rctx,r,o)}initializePipeline(){return m({blending:c(l.SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE_MINUS_SRC_ALPHA),depthTest:{func:a.LEQUAL},colorWrite:u})}}g.shader=new s(r,(()=>import("./Stars.glsl.js")));export{d as StarPassParameters,g as StarsTechnique};
