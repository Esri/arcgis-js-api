/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/_rollupPluginBabelHelpers","../../../core/Logger","../../../core/maybe","../../../core/promiseUtils","../../../chunks/mat4","../../../chunks/mat4f64","../../../support/requestImageUtils","../../../chunks/SimpleAtmosphere.glsl","./SimpleAtmosphereTechnique","./resources/SimpleAtmosphereTexture","../support/buffer/glUtil","../support/buffer/InterleavedLayout","../webgl-engine/core/shaderLibrary/util/View.glsl","../webgl-engine/lib/DefaultVertexAttributeLocations","../webgl-engine/lib/GeometryUtil","../webgl-engine/lib/VertexAttribute","../../webgl/BufferObject","../../webgl/enums","../../webgl/Texture","../../webgl/Util","../../webgl/VertexArrayObject"],(function(e,t,r,i,o,n,s,a,l,u,c,h,g,p,m,b,f,y,d,_,x,A){"use strict";const v=r.getLogger("esri.views.3d.environment.PanoramicAtmosphere");let T=function(){function e(){this.type="panoramic",this._techniqueConfig=new u.SimpleAtmosphereTechniqueConfiguration,this._readyResolver=o.createResolver(),this._readyController=new AbortController}var r=e.prototype;return r.destroy=function(){this._readyResolver.reject(),this._texture=i.disposeMaybe(this._texture),this._vao=i.disposeMaybe(this._vao),this._readyController=i.abortMaybe(this._readyController)},r.when=function(){return this._readyResolver.promise},r.initializeRenderContext=function(e){this._techniqueConfig.geometry=l.SimpleAtmosphereGeometry.Cylinder,this._technique=e.shaderTechniqueRepository.acquire(u.SimpleAtmosphereTechnique,this._techniqueConfig);const t=e.renderContext.rctx;this._vao=this._createVertexArrayObject(t),this._vaoCount=x.vertexCount(this._vao,"geometry"),a.requestImage(c,{signal:this._readyController.signal}).then((r=>{this._texture=new _.Texture(t,{pixelFormat:d.PixelFormat.RGBA,dataType:d.PixelType.UNSIGNED_BYTE,wrapMode:d.TextureWrapMode.CLAMP_TO_EDGE,samplingMode:d.TextureSamplingMode.LINEAR,flipped:!0},r),e.requestRender(),this._readyController=null,this._readyResolver.resolve()})).catch((e=>{o.isAbortError(e)||v.error("Unable to initialize atmosphere: image request failed",e),this._readyResolver.reject()}))},r.render=function(e){const t=e.rctx,r=t.useTechnique(this._technique);r.bindTexture(this._texture,"tex"),p.bindProjectionMatrix(r,e.camera.projectionMatrix),w(C,e.camera.viewMatrix),r.setUniformMatrix4fv("view",C),r.setUniform4f("uColor",1,1,1,1),e.scenelightingData.setLightDirectionUniform(r),t.bindVAO(this._vao),r.assertCompatibleVertexAttributeLocations(this._vao),t.drawArrays(d.PrimitiveType.TRIANGLES,0,this._vaoCount)},r.renderHaze=function(){return!1},r._createVertexArrayObject=function(e){const t=b.createPolySphereGeometry(1,2,!1),r=t.indices.get(f.VertexAttribute.POSITION);for(let s=0;s<r.length;s+=3){const e=r[s];r[s]=r[s+2],r[s+2]=e}const i=t.vertexAttributes.get(f.VertexAttribute.POSITION).data,o=S.createBuffer(r.length),n=o.position;for(let s=0;s<r.length;++s){const e=3*r[s];n.set(s,0,i[e]),n.set(s,1,i[e+1]),n.set(s,2,i[e+2])}return new A.VertexArrayObject(e,m.Default3D,{geometry:h.glLayout(S)},{geometry:y.BufferObject.createVertex(e,d.Usage.STATIC_DRAW,o.buffer)})},t._createClass(e,[{key:"canRender",get:function(){return null!=this._texture}}]),e}();function w(e,t){n.copy(e,t),e[12]=0,e[13]=0,e[14]=0,e[15]=1}const C=s.create(),S=g.newLayout().vec3f(f.VertexAttribute.POSITION);e.PanoramicAtmosphere=T,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
