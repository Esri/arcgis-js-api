/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{C as e}from"../../../chunks/ChapmanAtmosphere.glsl.js";import{ReloadableShaderModule as r}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as i}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{Default3D as n}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as o}from"../webgl-engine/lib/Program.js";import{BlendFactor as t,CompareFunction as s}from"../../webgl/enums.js";import{makePipelineState as l,separateBlendingParams as a,defaultColorWriteParams as m}from"../../webgl/renderState.js";class g extends i{initializeProgram(e){const r=g.shader.get().build(this.configuration);return new o(e.rctx,r,n)}initializePipeline(){return this.configuration.haze?l({blending:a(t.ONE,t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ONE),colorWrite:m}):l({blending:a(t.SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),depthTest:{func:s.LEQUAL},colorWrite:m})}}g.shader=new r(e,(()=>import("./ChapmanAtmosphere.glsl.js")));export{g as ChapmanAtmosphereTechnique};
