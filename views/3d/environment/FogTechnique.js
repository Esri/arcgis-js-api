/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{F as r}from"../../../chunks/Fog.glsl.js";import{ReloadableShaderModule as i}from"../webgl-engine/core/shaderTechnique/ReloadableShaderModule.js";import{ShaderTechnique as o}from"../webgl-engine/core/shaderTechnique/ShaderTechnique.js";import{parameter as n,ShaderTechniqueConfiguration as t}from"../webgl-engine/core/shaderTechnique/ShaderTechniqueConfiguration.js";import{Default3D as s}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{Program as l}from"../webgl-engine/lib/Program.js";import{BlendFactor as a}from"../../webgl/enums.js";import{makePipelineState as g,separateBlendingParams as m,defaultColorWriteParams as c}from"../../webgl/renderState.js";class h extends o{initializeProgram(e){const r=h.shader.get().build(this.configuration);return new l(e.rctx,r,s)}initializePipeline(){return this.configuration.haze?g({blending:m(a.ONE,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE),colorWrite:c}):g({blending:m(a.SRC_ALPHA,a.ZERO,a.ONE_MINUS_SRC_ALPHA,a.ONE),colorWrite:c})}}h.shader=new i(r,(()=>import("./Fog.glsl.js")));class u extends t{constructor(){super(...arguments),this.haze=!1}}e([n()],u.prototype,"haze",void 0);export{h as FogTechnique,u as FogTechniqueConfiguration};
