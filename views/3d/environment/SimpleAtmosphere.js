/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../core/Logger.js";import{lerp as t,clamp as r}from"../../../core/mathUtils.js";import{removeMaybe as i,disposeMaybe as s,abortMaybe as a,isNone as o}from"../../../core/maybe.js";import{createResolver as n,throwIfAborted as h,isAbortError as m}from"../../../core/promiseUtils.js";import{watch as c,syncAndInitial as l}from"../../../core/reactiveUtils.js";import{n as d}from"../../../chunks/mat4.js";import{c as u}from"../../../chunks/mat4f64.js";import{a as p}from"../../../chunks/vec2.js";import{a as f}from"../../../chunks/vec2f64.js";import{l as _,g,a as R,i as j,f as x,p as V}from"../../../chunks/vec3.js";import{c as y}from"../../../chunks/vec3f64.js";import{getReferenceEllipsoid as C}from"../../../geometry/projectionEllipsoid.js";import{isMars as v}from"../../../geometry/support/spatialReferenceUtils.js";import{requestImage as b}from"../../../support/requestImageUtils.js";import{computeInnerAltitudeFade as A,innerAtmosphereDepth as T}from"./atmosphereUtils.js";import{S as w}from"../../../chunks/SimpleAtmosphere.glsl.js";import{SimpleAtmosphereTechnique as q}from"./SimpleAtmosphereTechnique.js";import{SimpleAtmosphereTechniqueConfiguration as U,SimpleAtmosphereGeometry as D}from"./SimpleAtmosphereTechniqueConfiguration.js";import S from"./resources/MarsAtmosphereTexture.js";import F from"./resources/SimpleAtmosphereTexture.js";import{makePiecewiseLinearFunction as M}from"../support/mathUtils.js";import{glLayout as P}from"../support/buffer/glUtil.js";import{newLayout as I}from"../support/buffer/InterleavedLayout.js";import{Default3D as O}from"../webgl-engine/lib/DefaultVertexAttributeLocations.js";import{createQuadVAO as E}from"../webgl-engine/lib/glUtil3D.js";import{project as L}from"../webgl-engine/lib/Util.js";import{VertexAttribute as W}from"../webgl-engine/lib/VertexAttribute.js";import{BufferObject as k}from"../../webgl/BufferObject.js";import{PixelFormat as N,PixelType as G,TextureWrapMode as B,TextureSamplingMode as H,PrimitiveType as z,Usage as Y}from"../../webgl/enums.js";import{Texture as J}from"../../webgl/Texture.js";import{vertexCount as K}from"../../webgl/Util.js";import{VertexArrayObject as Q}from"../../webgl/VertexArrayObject.js";const X=e.getLogger("esri.views.3d.environment.SimpleAtmosphere"),Z=128,$=-T,ee=0,te=50,re=()=>1-511/512,ie=M([[50,.1015625],[500,.21875],[5e3,1-250/512],[5e4,.4140625]]);class se{constructor(e){this.view=e,this.type="simple",this._renderData={texV:f(),silCircleCenter:y(),silCircleV1:y(),silCircleV2:y(),altitudeFade:0,innerScale:0,undergroundFadeAlpha:0},this._passParameters=new w,this._fadeVaoCount=0,this._readyResolver=n(),this._readyController=new AbortController,this.texV1=1,this.canRender=!0,this.isOnMars=v(e.spatialReference);const t=C(e.spatialReference);this.planetRadius=t.radius,this.outerRimWidth=t.outerAtmosphereRimWidth,this.innerRimFactor=(this.planetRadius+$)/this.planetRadius,this.middleRimFactor=(this.planetRadius+ee)/this.planetRadius,this.outerRimFactor=(this.planetRadius+this.outerRimWidth)/this.planetRadius,this.texV0=ee/this.outerRimWidth,this.texVScale=this.texV1-this.texV0}destroy(){this._readyResolver.reject(),this._cameraChangeHandle=i(this._cameraChangeHandle),this._passParameters.texture=s(this._passParameters.texture),this._fadeVao=s(this._fadeVao),this._vao=s(this._vao),this._readyController=a(this._readyController)}when(){return this._readyResolver.promise}async initializeRenderContext(e){this._shaderTechniqueRepository=e.shaderTechniqueRepository;const t=e.renderContext.rctx;this._cameraChangeHandle=c((()=>this.view.state?.camera),(()=>e.requestRender()),l),this._vao=this._createRibbon(t),this._vaoCount=K(this._vao,"geometry"),this._fadeVao=E(t),this._fadeVaoCount=K(this._fadeVao,"geometry");const r=this.isOnMars?S:F,i=this._readyController.signal;try{const s=await b(r,{signal:i});h(i),this._passParameters.texture=new J(t,{pixelFormat:N.RGBA,dataType:G.UNSIGNED_BYTE,wrapMode:B.CLAMP_TO_EDGE,samplingMode:H.LINEAR,flipped:!0},s),e.requestRender(),this._readyController=null,this._readyResolver.resolve()}catch(s){m(s)||X.error("Unable to initialize simple atmosphere: image request failed",s),this._readyResolver.reject(s)}}get coneTechnique(){if(o(this._coneTechnique)){const e=new U;e.geometry=D.Cone,this._coneTechnique=this._shaderTechniqueRepository.acquire(q,e)}return this._coneTechnique}get undergroundTechnique(){if(o(this._undergroundTechnique)){const e=new U;e.geometry=D.Underground,this._undergroundTechnique=this._shaderTechniqueRepository.acquire(q,e)}return this._undergroundTechnique}render(e){const t=e.bindParameters.camera;this._update(t);const r=e.rctx;if(this._renderData.undergroundFadeAlpha<1){const i=r.bindTechnique(this.coneTechnique,this._passParameters,e.bindParameters);i.setUniformMatrix4fv("proj",t.projectionMatrix),i.setUniformMatrix4fv("view",t.viewMatrix),i.setUniform3fv("silCircleCenter",this._renderData.silCircleCenter),i.setUniform3fv("silCircleV1",this._renderData.silCircleV1),i.setUniform3fv("silCircleV2",this._renderData.silCircleV2),i.setUniform2fv("texV",this._renderData.texV),i.setUniform1f("altitudeFade",this._renderData.altitudeFade),i.setUniform1f("innerScale",this._renderData.innerScale),r.bindVAO(this._vao),r.drawArrays(z.TRIANGLES,0,this._vaoCount)}if(this._renderData.undergroundFadeAlpha>0){const i=r.bindTechnique(this.undergroundTechnique,this._passParameters,e.bindParameters);i.setUniform1f("undergroundFadeAlpha",this._renderData.undergroundFadeAlpha),i.setUniform3fv("cameraPosition",t.eye),r.bindVAO(this._fadeVao),r.drawArrays(z.TRIANGLE_STRIP,0,this._fadeVaoCount)}}renderHaze(){return!1}_update(e){const i=y(),s=this.planetRadius,a=_(e.eye),o=a-s;if(o<0){const e=Math.min(-o/5e3,1);this._renderData.undergroundFadeAlpha=e}else this._renderData.undergroundFadeAlpha=0;const n=Math.max(te,o),h=s+$;this._renderData.innerScale=me(s+n,s,h)-1,this._renderData.altitudeFade=A(o),g(i,e.eye,(s+te)/a),ae(i,e.center,e.up,s,this._renderData);const m=this._computeScreenRimWidth(e,i,e.up,this._renderData),c=re(),l=ie(o);let d=this.texV0+c*this.texVScale,u=this.texV0+m*l*this.texVScale;if(o>te){ae(e.eye,e.center,e.up,s,this._renderData);const i=this._computeScreenRimWidth(e,e.eye,e.up,this._renderData),a=r((i-1.5)/(m-1.5),0,1);d=this.texV0+a*c*this.texVScale,u=this.texV0+t(this.texV1,m*l,a)*this.texVScale}p(this._renderData.texV,d,u)}_createRibbon(e){const t=new Float32Array(3+3*Z*3),r=new Uint32Array(3*Z*5);t[0]=0,t[1]=0,t[2]=-1;for(let a=0;a<Z;a++){const e=9*a+3;t[e+0]=a,t[e+1]=this.innerRimFactor,t[e+2]=-1,t[e+3]=a,t[e+4]=this.middleRimFactor,t[e+5]=0,t[e+6]=a,t[e+7]=this.outerRimFactor,t[e+8]=1;const i=3*a+1,s=a===Z-1?1:i+3,o=15*a;r[o+0]=i,r[o+1]=i+1,r[o+2]=s+1,r[o+3]=s+1,r[o+4]=s,r[o+5]=i,r[o+6]=i+1,r[o+7]=i+2,r[o+8]=s+2,r[o+9]=s+2,r[o+10]=s+1,r[o+11]=i+1,r[o+12]=i,r[o+13]=s,r[o+14]=0}const i=ce.createBuffer(r.length),s=i.position;for(let a=0;a<r.length;++a){const e=3*r[a];s.set(a,0,t[e]),s.set(a,1,t[e+1]),s.set(a,2,t[e+2])}return new Q(e,O,{geometry:P(ce)},{geometry:k.createVertex(e,Y.STATIC_DRAW,i.buffer)})}_computeScreenRimWidth(e,t,r,i){return R(ne,i.silCircleCenter,i.silCircleV2),g(he,ne,this.outerRimFactor),d(oe,t,ne,r),L(ne,oe,e.projectionMatrix,e.viewport),L(he,oe,e.projectionMatrix,e.viewport),j(ne,he)/e.height}}function ae(e,t,r,i,s){const a=_(e),o=i*Math.sqrt(a*a-i*i)/a,n=Math.sqrt(i*i-o*o),h=s.silCircleV1,m=s.silCircleV2;return g(s.silCircleCenter,e,n/a),x(h,e,t),V(h)<1&&x(h,e,r),g(h,h,o/_(h)),x(m,h,e),g(m,m,o/_(m)),o}const oe=u(),ne=y(),he=y();function me(e,t,r){return e*e/(Math.sqrt(e*e-t*t)*Math.sqrt(e*e-r*r)+t*r)}const ce=I().vec3f(W.POSITION);export{se as default};
