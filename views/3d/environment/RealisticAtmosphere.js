/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
define(["exports","../../../core/Handles","../../../core/maybe","../../../core/watchUtils","../../../chunks/mat4","../../../chunks/mat4f64","../../../chunks/vec2","../../../chunks/vec2f64","../../../chunks/vec3","../../../chunks/vec3f64","../../../chunks/vec4","../../../chunks/vec4f64","../../../geometry/support/Ellipsoid","./atmosphereUtils","./RealisticAtmosphereTechnique","../support/buffer/glUtil","../support/buffer/InterleavedLayout","../webgl-engine/lib/DefaultVertexAttributeLocations","../../webgl/BufferObject","../../webgl/VertexArrayObject"],(function(e,t,a,r,i,s,n,o,h,d,c,u,l,_,m,p,v,f,D,g){"use strict";let w=function(){function e(e){this._view=e,this.canRender=!0,this._skyslot=15,this._hazeSlot=16,this._renderData={texDepth:o.create(),cameraPosition:d.create(),projectionInverse:s.create(),viewInverse:s.create(),heightParameters:u.create(),atmosphereParameters1:u.create(),atmosphereParameters2:u.create(),atmosphereParameters3:d.create(),invWavelength:x,invWavelengthScaled:R,radii:o.create(),scale:0,scaleDepth:S,lowerAlphaBlendBound:0,scaleOverScaleDepth:0,oneOverScaleDepth:0,scaleDepthBlue:B,oneOverScaleDepthBlue:V,scaleOverScaleDepthBlue:0,g:q,g2:q*q,miePhaseCoefficients:E,nearFar:o.create(),cameraHeight:0,cameraHeightSq:0,C:0,CSur:0,innerFadeDistance:0,altitudeFade:0},this._lowerElevationBoundRadius=0,this._lowerBoundEarthRadius=l.earth.radius,this._updateRadius(l.earth.radius)}var v=e.prototype;return v.destroy=function(){this._handles&&(this._handles.destroy(),this._handles=null),this._vao&&(this._vao.dispose(),this._vao=null)},v.when=function(){return Promise.resolve()},v.initializeRenderContext=function(e){const i=e.renderContext.rctx;this._handles=new t,a.isSome(this._view.basemapTerrain.rootTiles)&&this._updateElevation({spatialReference:this._view.basemapTerrain.spatialReference,tile:this._view.basemapTerrain.rootTiles[0],extent:this._view.basemapTerrain.rootTiles[0].extent,context:"ground"}),this._handles.add(r.on(this._view,"basemapTerrain","elevation-change",(e=>this._updateElevation(e)),(()=>this._updateElevation()))),this._handles.add(r.on(this._view,"basemapTerrain","elevation-bounds-change",(()=>this._updateVisibleElevationBounds()),(()=>this._updateVisibleElevationBounds())));const s=new m.RealisticAtmosphereTechniqueConfiguration;s.haze=!1,this._atmosphereTechnique=e.shaderTechniqueRep.acquire(m.RealisticAtmosphereTechnique,s),s.haze=!0,this._atmosphereHazeTechnique=e.shaderTechniqueRep.acquire(m.RealisticAtmosphereTechnique,s),this._vao=this._createVertexArrayObject(i)},v.uninitializeRenderContext=function(){this.destroy()},v.render=function(e){return(e.slot===this._hazeSlot||e.slot===this._skyslot)&&0===e.pass&&(this._update(e.camera),e.slot===this._skyslot&&this._renderSky(e),e.slot===this._hazeSlot&&this._renderHaze(e),!0)},v._renderSky=function(e){const t=e.rctx,a=this._atmosphereTechnique.program;t.useProgram(a),this._atmosphereTechnique.bindPipelineState(t),a.setUniform3fv("atmosphereParameters3",this._renderData.atmosphereParameters3),this._renderCommon(a,e)},v._renderHaze=function(e){const t=e.rctx,a=e.offscreenRenderingHelper,r=this._atmosphereHazeTechnique.program;t.useProgram(r),this._atmosphereHazeTechnique.bindPipelineState(t),a.renderDepthDetached((()=>{const t=a.depthTexture;r.bindTexture(t,"depthTex"),this._renderCommon(r,e)}))},v._renderCommon=function(e,t){const a=t.rctx;e.setUniform3fv("invWavelength",this._renderData.invWavelength),e.setUniform3fv("invWavelengthScaled",this._renderData.invWavelengthScaled),t.scenelightingData.setLightDirectionUniform(e),e.setUniform4fv("heightParameters",this._renderData.heightParameters),e.setUniform3fv("cameraPosition",this._renderData.cameraPosition),e.setUniformMatrix4fv("projectionInverse",this._renderData.projectionInverse),e.setUniformMatrix4fv("viewInverse",this._renderData.viewInverse),e.setUniform2fv("nearFar",this._renderData.nearFar),e.setUniform2fv("radii",this._renderData.radii),e.setUniform4fv("atmosphereParameters1",this._renderData.atmosphereParameters1),e.setUniform4fv("atmosphereParameters2",this._renderData.atmosphereParameters2),e.setUniform1f("innerFadeDistance",this._renderData.innerFadeDistance),e.setUniform1f("altitudeFade",this._renderData.altitudeFade),a.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),a.drawArrays(5,0,4)},v._createVertexArrayObject=function(e){const t=H.createBuffer(4);return t.position.setVec(0,[-1,-1]),t.position.setVec(1,[1,-1]),t.position.setVec(2,[-1,1]),t.position.setVec(3,[1,1]),t.uv0.setVec(0,[0,0]),t.uv0.setVec(1,[1,0]),t.uv0.setVec(2,[0,1]),t.uv0.setVec(3,[1,1]),new g(e,f.Default3D,{geometry:p.glLayout(H)},{geometry:D.createVertex(e,35044,t.buffer)})},v._adjustRadiusForTesselation=function(e){const t=16,a=4,r=Math.PI/2**a/t;return e*Math.cos(r)},v._updateElevation=function(e){const t=e?e.tile:a.unwrapOr(this._view.basemapTerrain.rootTiles,[null])[0];if(a.isNone(t)||0!==t.lij[0])return;const r=this._adjustRadiusForTesselation(l.earth.radius+t.elevationBounds[0]);r!==this._lowerElevationBoundRadius&&(this._lowerElevationBoundRadius=r,this._lowerBoundEarthRadius=-1,this._updateVisibleElevationBounds())},v._updateVisibleElevationBounds=function(){const e=this._adjustRadiusForTesselation(l.earth.radius+this._view.basemapTerrain.elevationBounds.min);(this._lowerBoundEarthRadius<0||e<this._lowerBoundEarthRadius)&&this._updateRadius(e)},v._updateRadius=function(e){this._lowerBoundEarthRadius=e;const t=e,a=t/10*10.25,r=1/(a-t),i=r/S,s=r/B,o=.3*(a-t)+t,d=this._renderData;c.set(d.atmosphereParameters1,r,S,i,y),c.set(d.atmosphereParameters2,q,B,s,V),h.set(d.atmosphereParameters3,q*q,E,o),n.set(d.radii,t,a),d.scale=r,d.lowerAlphaBlendBound=o,d.scaleOverScaleDepth=i,d.scaleOverScaleDepthBlue=s;const u=_.innerAtmosphereDepth;d.innerFadeDistance=2*Math.sqrt((2*t-u)*u)},v._update=function(e){e&&(this._renderData.cameraHeight=h.length(e.eye),this._renderData.cameraHeightSq=this._renderData.cameraHeight*this._renderData.cameraHeight,this._renderData.C=this._renderData.cameraHeightSq-this._renderData.radii[1]*this._renderData.radii[1],this._renderData.CSur=this._renderData.cameraHeightSq-this._renderData.radii[0]*this._renderData.radii[0],this._renderData.heightParameters=u.fromValues(this._renderData.cameraHeight,this._renderData.cameraHeightSq,this._renderData.C,this._renderData.CSur),h.copy(this._renderData.cameraPosition,e.eye),i.invert(this._renderData.projectionInverse,e.projectionMatrix),i.invert(this._renderData.viewInverse,e.viewMatrix),n.set(this._renderData.nearFar,e.near,e.far),this._renderData.altitudeFade=_.computeInnerAltitudeFade(this._renderData.cameraHeight-this._lowerBoundEarthRadius))},e.isSupported=function(e){return e.renderContext.rctx.capabilities.depthTexture},e}();const b=.001,T=4*.005*Math.PI,P=4*b*Math.PI,x=d.fromValues(1/.65**4,1/.57**4,1/.475**4),R=d.clone(x);h.scale(R,R,T),h.add(R,R,d.fromValues(P,P,P));const S=.25,B=.05,y=1/S,V=1/B,q=-.99999,E=(1-q*q)/(2+q*q)*1.5,H=v.newLayout().vec2f("position").vec2f("uv0");e.RealisticAtmosphere=w,Object.defineProperty(e,"__esModule",{value:!0})}));
