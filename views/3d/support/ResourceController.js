/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import r from"../../../core/Handles.js";import{destroyMaybe as s,removeMaybe as a}from"../../../core/maybe.js";import{watch as o,sync as i}from"../../../core/reactiveUtils.js";import{addFrameTask as h}from"../../../core/scheduling.js";import{secondsFromMilliseconds as l}from"../../../core/time.js";import{property as n}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{maxDownloadSlots as d,downloadSlotsPerClient as u}from"./index.js";import{newMemoryController as c}from"./MemoryController.js";import{StreamDataLoader as _}from"./StreamDataLoader.js";import{ImmediateTask as p,State as y,newScheduler as g,TaskPriority as C}from"../../support/Scheduler.js";let T=class extends t{constructor(){super(...arguments),this.updating=!1}};function f(e){return new v.ResourceController({view:e})}var v;e([n({readOnly:!0})],T.prototype,"updating",void 0),T=e([m("esri.views.3d.support.ResourceController")],T),function(t){let f=class extends T{constructor(){super(...arguments),this._scheduler=null,this._memoryController=null,this._streamDataLoader=null,this._scheduleTask=p,this._cameraChangeTime=0,this._handles=new r,this._frameTask=null,this._state=y.IDLE}initialize(){this._cameraChangeTime=performance.now(),this._scheduler=g(),this._memoryController=c(this.view),this._streamDataLoader=new _,this._streamDataLoader.setup(d,u,this._scheduler),this._handles.add([o((()=>this.view.state?.camera),((e,t)=>this._cameraChangedHandler(e,t)),i),o((()=>this.view.stationary),(()=>this._stationaryChangedHandler()))]),this._frameTask=h({update:e=>this._frame(e)}),this._scheduleTask=this._scheduler.registerTask(C.RESOURCE_CONTROLLER)}destroy(){this._handles=s(this._handles),this._scheduleTask.remove(),this._frameTask=a(this._frameTask),this._streamDataLoader=s(this._streamDataLoader),this._memoryController=s(this._memoryController),this._scheduler=s(this._scheduler)}get updating(){return!!(this._memoryController?.updating||this._streamDataLoader?.updating||this._scheduleTask?.updating)}get scheduler(){return this._scheduler}get memoryController(){return this._memoryController}schedule(e,t,r){return this._scheduleTask.schedule(e,t,r)}createStreamDataRequester(e){const t=this._streamDataLoader;return{request:(r,s,a)=>t.request(r,s,e,a),get busy(){return!t.hasDownloadSlots(e)}}}_frame(e){this.view.suspended||this.view.stateManager&&(this.view.stateManager.step(l(e.deltaTime)),!this._scheduler)||(this._updateState(),this._scheduler.state=this._state,this._scheduler.updateBudget(e)?(this._memoryController.update(),this._scheduler.frame()):this._memoryController.updating&&this._memoryController.update())}_cameraChangedHandler(e,t){e&&t&&e.almostEquals(t)||(this._cameraChangeTime=performance.now(),this._updateState(),this._scheduler.state=this._state)}_stationaryChangedHandler(){this.memoryController.resetStableQuality()}_updateState(){this.view.animation?this._state=y.ANIMATING:this.view.interacting?this._state=y.INTERACTING:(this._state===y.ANIMATING&&(this._cameraChangeTime=0),performance.now()-this._cameraChangeTime<=v?this._state=y.INTERACTING:this._state=y.IDLE)}get test(){return{getQueueStats:e=>this._streamDataLoader.test.loadQueue.getStatsForType(e),state:this._state}}};e([n({constructOnly:!0})],f.prototype,"view",void 0),e([n()],f.prototype,"_scheduler",void 0),e([n()],f.prototype,"_memoryController",void 0),e([n()],f.prototype,"_streamDataLoader",void 0),e([n()],f.prototype,"_scheduleTask",void 0),e([n({readOnly:!0})],f.prototype,"updating",null),f=e([m("esri.views.3d.support.ResourceController")],f),t.ResourceController=f;const v=300}(v||(v={}));export{T as ResourceControllerMain,f as newResourceController};
