/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isAbortError as e,eachAlways as t}from"../../../../core/promiseUtils.js";import{addQueryParameters as s}from"../../../../core/urlUtils.js";import{open as r}from"../../../../core/workers/workers.js";import i from"./GlyphMosaic.js";import o from"./GlyphSource.js";import l from"./SpriteMosaic.js";import{perfAdd as a}from"./decluttering/debugging.js";import n from"../../tiling/TileKey.js";class c{constructor(e,t,s){this._layer=e,this._styleRepository=t,this.devicePixelRatio=s,this._spriteMosaic=null,this._glyphMosaic=null,this._connection=null}destroy(){this._connection&&(this._connection.close(),this._connection=null),this._styleRepository=null,this._layer=null,this._spriteMosaic&&(this._spriteMosaic=null),this._glyphMosaic&&(this._glyphMosaic=null)}get spriteMosaic(){return this._spriteSourcePromise.then((()=>this._spriteMosaic))}get glyphMosaic(){return this._glyphMosaic}async start(e){this._spriteSourcePromise=this._layer.loadSpriteSource(this.devicePixelRatio,e),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new l(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const t=new o(this._layer.currentStyleInfo.glyphsUrl?s(this._layer.currentStyleInfo.glyphsUrl,{...this._layer.customParameters,token:this._layer.apiKey}):null);this._glyphMosaic=new i(1024,1024,t),this._broadcastPromise=r("WorkerTileHandler",{client:this,schedule:e.schedule,signal:e.signal}).then((t=>{this._connection=t,this._connection.broadcast("setStyle",this._layer.currentStyleInfo.style,e)}))}async updateStyle(e){return await this._broadcastPromise,this._broadcastPromise=Promise.all(this._connection.broadcast("updateStyle",e)),this._broadcastPromise}setSpriteSource(e){const t=new l(1024,1024,250);return t.setSpriteSource(e),this._spriteMosaic=t,this._spriteSourcePromise=Promise.resolve(e),t}async setStyle(e,t){await this._broadcastPromise,this._styleRepository=e,this._spriteSourcePromise=this._layer.loadSpriteSource(this.devicePixelRatio,null),this._spriteSourcePromise.then((e=>{this._spriteMosaic=new l(1024,1024,250),this._spriteMosaic.setSpriteSource(e)}));const r=new o(this._layer.currentStyleInfo.glyphsUrl?s(this._layer.currentStyleInfo.glyphsUrl,{...this._layer.customParameters,token:this._layer.apiKey}):null);return this._glyphMosaic=new i(1024,1024,r),this._broadcastPromise=Promise.all(this._connection.broadcast("setStyle",t)),this._broadcastPromise}fetchTileData(e,t){return this._getRefKeys(e,t).then((e=>{const s=this._layer.sourceNameToSource,r=[];for(const t in s)r.push(t);return this._getSourcesData(r,e,t)}))}parseTileData(e,t){const s=e&&e.data;if(!s)return Promise.resolve(null);const{sourceName2DataAndRefKey:r,transferList:i}=s;return 0===Object.keys(r).length?Promise.resolve(null):this._broadcastPromise.then((()=>this._connection.invoke("createTileAndParse",{key:e.key.id,sourceName2DataAndRefKey:r,styleLayerUIDs:e.styleLayerUIDs},{...t,transferList:i})))}async getSprites(e){return await this._spriteSourcePromise,this._spriteMosaic.getSpriteItems(e)}getGlyphs(e){return this._glyphMosaic.getGlyphItems(e.font,e.codePoints)}perfReport({key:e,milliseconds:t}){a(e,t,"ms")}async _getTilePayload(t,s,r){const i=n.pool.acquire(t.id),o=this._layer.sourceNameToSource[s],{level:l,row:a,col:c}=i;n.pool.release(i);try{return{protobuff:await o.requestTile(l,a,c,r),sourceName:s}}catch(h){if(e(h))throw h;return{protobuff:null,sourceName:s}}}_getRefKeys(e,s){const r=this._layer.sourceNameToSource,i=new Array;for(const t in r){const o=r[t].getRefKey(e,s);i.push(o)}return t(i)}_getSourcesData(e,s,r){const i=[];for(let t=0;t<s.length;t++)if(null==s[t].value||null==e[t])i.push(null);else{const o=this._getTilePayload(s[t].value,e[t],r);i.push(o)}return t(i).then((e=>{const t={},r=[];for(let i=0;i<e.length;i++)if(e[i].value&&e[i].value&&e[i].value.protobuff&&e[i].value.protobuff.byteLength>0){const o=s[i].value.id;t[e[i].value.sourceName]={refKey:o,protobuff:e[i].value.protobuff},r.push(e[i].value.protobuff)}return{sourceName2DataAndRefKey:t,transferList:r}}))}}export{c as TileHandler};
