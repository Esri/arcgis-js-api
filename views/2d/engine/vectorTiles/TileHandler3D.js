/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../core/maybe","../../../../core/MemCache","../../../../core/promiseUtils","../../../../chunks/mat3f32","../../../../geometry/support/aaBoundingRect","./VectorTile","./TileHandler","./decluttering/jobsUtil","../../tiling/TileKey"],(function(e,t,i,o,n,r,s,l,a,u){"use strict";let c=function(l){function c(e,t,i,o,n){var r;return(r=l.call(this,e,t,i)||this)._memCache=o,r._loader=n,r._ongoingTileRequests=new Map,r._ongoingRequestToController=new Map,r}e._inheritsLoose(c,l);var g=c.prototype;return g.destroy=function(){this._ongoingRequestToController.forEach((e=>e.abort())),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear()},g.getVectorTile=function(){var l=e._asyncToGenerator((function*(e,l,c,g){const h=new u(e,l,c,0);let T=this._memCache.get(h.id);if(t.isSome(T))return T.retain(),T;const _=yield this._getVectorTileData(h);if(o.throwIfAborted(g),!this._vectorTileLayer)return null;if(T=this._memCache.get(h.id),t.isSome(T))return T.retain(),T;const d=this._vectorTileLayer.tileInfo.getTileBounds(r.create(),h);return T=new s.VectorTile(h,d[0],d[3],512,512,this._styleRepository,this._memCache),t.isSome(_)&&_.tileData?(T.setData(_.tileData),T.retain(),this._memCache.put(h.id,T,T.memoryUsage*T.referenced,i.MIN_PRIORITY)):T.setData(null),T.neededForCoverage=!0,T.transforms.tileUnitsToPixels=n.fromValues(1/8,0,0,0,1/8,0,0,0,1),a.declutterSingleTile(T,this._styleRepository),T}));function c(e,t,i,o){return l.apply(this,arguments)}return c}(),g._getVectorTileData=function(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const i=new AbortController,o={signal:i.signal},n=this._getParsedVectorTileData(e,o).then((e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e))).catch((()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null)));return this._ongoingTileRequests.set(t,n),this._ongoingRequestToController.set(t,i),n},g._getParsedVectorTileData=function(e,t){return this.fetchTileData(e,t).then((i=>this.parseTileData({key:e,data:i},t)))},g.request=function(e,t){return this._loader.request(e,"binary",t)},c}(l.TileHandler);return c}));
