/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../core/maybe.js";import{MIN_PRIORITY as t}from"../../../../core/MemCache.js";import{throwIfAborted as o}from"../../../../core/promiseUtils.js";import{f as s}from"../../../../chunks/mat3f32.js";import{create as i}from"../../../../geometry/support/aaBoundingRect.js";import{TileHandler as r}from"./TileHandler.js";import{VectorTile as n}from"./VectorTile.js";import{declutterSingleTile as l}from"./decluttering/jobsUtil.js";import a from"../../tiling/TileKey.js";class g extends r{constructor(e,t,o,s,i){super(e,t,o),this._memCache=s,this._loader=i,this._ongoingTileRequests=new Map,this._ongoingRequestToController=new Map}destroy(){this._ongoingRequestToController.forEach((e=>e.abort())),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear()}async getVectorTile(r,g,h,m){const u=new a(r,g,h,0);let c=this._memCache.get(u.id);if(e(c))return c.retain(),c;const _=await this._getVectorTileData(u);if(o(m),!this._layer)return null;if(c=this._memCache.get(u.id),e(c))return c.retain(),c;const T=this._layer.tileInfo.getTileBounds(i(),u);return c=new n(u,T[0],T[3],512,512,this._styleRepository,this._memCache),e(_)?(c.setData(_),c.retain(),this._memCache.put(u.id,c,c.memoryUsage*c.referenced,t)):c.setData(null),c.neededForCoverage=!0,c.transforms.tileUnitsToPixels=s(1/8,0,0,0,1/8,0,0,0,1),l(c,this._styleRepository),c}_getVectorTileData(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const o=new AbortController,s={signal:o.signal},i=this._getParsedVectorTileData(e,s).then((e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e))).catch((()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null)));return this._ongoingTileRequests.set(t,i),this._ongoingRequestToController.set(t,o),i}_getParsedVectorTileData(e,t){return this.fetchTileData(e,t).then((o=>this.parseTileData({key:e,data:o},t)))}request(e,t){return this._loader.request(e,"binary",t)}}export{g as default};
