/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../core/maybe","../../../../core/promiseUtils","../../../../geometry/support/aaBoundingRect","../../../../core/MemCache","../../tiling/TileKey","../../../../chunks/mat3f32","./VectorTile","./TileHandler","./decluttering/jobsUtil"],(function(e,t,i,o,n,r,s,l,a,u){"use strict";return function(a){function c(e,t,i,o,n){var r;return(r=a.call(this,e,t,i)||this)._memCache=o,r._loader=n,r._ongoingTileRequests=new Map,r._ongoingRequestToController=new Map,r}e._inheritsLoose(c,a);var g=c.prototype;return g.destroy=function(){this._ongoingRequestToController.forEach((e=>e.abort())),this._ongoingRequestToController.clear(),this._ongoingTileRequests.clear()},g.getVectorTile=async function(e,a,c,g){const h=new r(e,a,c,0);let T=this._memCache.get(h.id);if(t.isSome(T))return T.retain(),T;const _=await this._getVectorTileData(h);if(i.throwIfAborted(g),!this._vectorTileLayer)return null;if(T=this._memCache.get(h.id),t.isSome(T))return T.retain(),T;const d=this._vectorTileLayer.tileInfo.getTileBounds(o.create(),h);return T=new l.VectorTile(h,this._styleRepository,d,[512,512],this._memCache),t.isSome(_)&&_.tileData?(T.setData(_.tileData),T.retain(),this._memCache.put(h.id,T,T.getMemoryUsage()*T.referenced,n.MIN_PRIORITY)):T.setData(null),T.neededForCoverage=!0,T.transforms.tileUnitsToPixels=s.fromValues(1/8,0,0,0,1/8,0,0,0,1),u.declutterSingleTile(T,this._styleRepository),T},g._getVectorTileData=function(e){const t=e.id;if(this._ongoingTileRequests.has(t))return this._ongoingTileRequests.get(t);const i=new AbortController,o={signal:i.signal},n=this._getParsedVectorTileData(e,o).then((e=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),e))).catch((()=>(this._ongoingTileRequests.delete(t),this._ongoingRequestToController.delete(t),null)));return this._ongoingTileRequests.set(t,n),this._ongoingRequestToController.set(t,i),n},g._getParsedVectorTileData=function(e,t){return this.fetchTileData(e,t).then((i=>this.parseTileData({key:e,data:i},t)))},g.request=function(e,t){return this._loader.request(e,"binary",t)},c}(a.TileHandler)}));
