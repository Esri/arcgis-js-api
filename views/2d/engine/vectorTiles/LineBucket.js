/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../core/has","../webgl/mesh/templates/util","../webgl/TurboLine","./BaseBucket"],(function(e,t,r,n,i){"use strict";const l=1/3.8;let s=function(t){function i(e,r,n,i){var l;if((l=t.call(this,e,r)||this).type=2,l._tessellationOptions={},l.tessellationProperties={_lineVertexBuffer:null,_lineIndexBuffer:null,_hasPattern:null,_ddValues:null,_capType:null,_joinType:null,_miterLimitCosine:null,_roundLimitCosine:null},e.hasDataDrivenLine!==n.isDataDriven())throw new Error("incompatible line buffer");return l.tessellationProperties._lineVertexBuffer=n,l.tessellationProperties._lineIndexBuffer=i,l.tessellationProperties._hasPattern=e.getPaintValue("line-pattern",l.zoom)||e.getPaintValue("line-dasharray",l.zoom).length>0,l._isThinLine=e.isThinLine,l._isThinLine?l._tessellationCallbacks={vertex:x(l.tessellationProperties),bridge:a(l.tessellationProperties)}:l._tessellationCallbacks={vertex:d(l.tessellationProperties),bridge:u(l.tessellationProperties)},l}e._inheritsLoose(i,t);var s=i.prototype;return s.processFeatures=function(e){this._lineIndexStart=3*this.tessellationProperties._lineIndexBuffer.index,this._lineIndexCount=0;const t=this.layer,i=this.zoom,l=t.hasDataDrivenLine;e&&e.setExtent(this.layerExtent);let s=[1,1,1,1],x=1,a=1;for(const n of this._features){let d;if(!this.tessellationProperties._hasPattern&&t.hasDataDrivenColor&&(s=t.getPaintValue("line-color",i,n)),t.hasDataDrivenOpacity&&(x=t.getPaintValue("line-opacity",i,n)),t.hasDataDrivenWidth&&(a=t.getPaintValue("line-width",i,n)),l&&(d={color:s,opacity:x,size:Math.max(Math.min(a,256),0)},d.size<=0||d.opacity<=0||d.color[3]<=0))continue;this.tessellationProperties._capType=t.getLayoutValue("line-cap",i,n),this.tessellationProperties._joinType=t.getLayoutValue("line-join",i,n),this.tessellationProperties._miterLimitCosine=r.getLimitCosine(t.getLayoutValue("line-miter-limit",i,n)),this.tessellationProperties._roundLimitCosine=r.getLimitCosine(t.getLayoutValue("line-round-limit",i,n));const u=n.getGeometry(e);this._processFeature(u,d)}n.cleanup()},s.serialize=function(){let e=7;e+=this.layerUIDs.length,e+=this.tessellationProperties._lineVertexBuffer.array.length,e+=this.tessellationProperties._lineIndexBuffer.array.length;let t=0;const r=new Uint32Array(e),n=new Int32Array(r.buffer);r[t++]=this.type,r[t++]=this.layerUIDs.length;for(let e=0;e<this.layerUIDs.length;e++)r[t++]=this.layerUIDs[e];r[t++]=this._lineIndexStart,r[t++]=this._lineIndexCount,r[t++]=this.tessellationProperties._lineVertexBuffer.isDataDriven()?1:0,r[t++]=this.tessellationProperties._lineVertexBuffer.array.length;for(let e=0;e<this.tessellationProperties._lineVertexBuffer.array.length;e++)n[t++]=this.tessellationProperties._lineVertexBuffer.array[e];r[t++]=this.tessellationProperties._lineIndexBuffer.array.length;for(let e=0;e<this.tessellationProperties._lineIndexBuffer.array.length;e++)r[t++]=this.tessellationProperties._lineIndexBuffer.array[e];return r.buffer},s._processFeature=function(e,t){if(!e)return;const r=e.length;for(let n=0;n<r;n++)this._processGeometry(e[n],t)},s._processGeometry=function(e,t){if(e.length<2)return;let r,i,s=e[0],x=1;for(;x<e.length;)r=e[x].x-s.x,i=e[x].y-s.y,r*r+i*i<1e-6?e.splice(x,1):(s=e[x],++x);if(e.length<2)return;const a=3*this.tessellationProperties._lineIndexBuffer.index;this._tessellationOptions.trackDistance=this.tessellationProperties._hasPattern,this._tessellationOptions.initialDistance=0,this._tessellationOptions.thin=this._isThinLine,this._tessellationOptions.wrapDistance=65535,this._tessellationOptions.outerBisectorAutoSplitThreshold=l,this._tessellationOptions.enableOuterBisectorSplit=this.tessellationProperties._hasPattern,this._tessellationOptions.innerBisectorAutoSplitThreshold=l,this._tessellationOptions.enableInnerBisectorSplit=this.tessellationProperties._hasPattern,this.tessellationProperties._ddValues=t,n.tessellate(e,this._tessellationOptions,this._tessellationCallbacks),this._lineIndexCount+=3*this.tessellationProperties._lineIndexBuffer.index-a},e._createClass(i,[{key:"lineIndexStart",get:function(){return this._lineIndexStart}},{key:"lineIndexCount",get:function(){return this._lineIndexCount}}]),i}(i);const x=e=>t=>{t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance,e._ddValues),t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance,e._ddValues),t.exit0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance,e._ddValues),t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance,e._ddValues)},a=e=>t=>{e._lineIndexBuffer.add(t.leftExit0,t.rightEntry0,t.leftExit2),e._lineIndexBuffer.add(t.rightEntry0,t.rightEntry2,t.leftExit2)},d=e=>t=>{const r=2===e._joinType?e._miterLimitCosine:e._roundLimitCosine,i=t.isCap&&0!==e._capType;let l=!1;t.cosine>.97?(t.exit0=t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance,e._ddValues),t.exit2=t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance,e._ddValues)):t.cosine<1-.97?(t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance,e._ddValues),t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance,e._ddValues),t.exit0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance,e._ddValues),t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance,e._ddValues)):t.canSplit?(n.splitVertex(),t.sign>0?(t.splitInner?(t.exit0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.leftInner.x,t.leftInner.y,0,-1,t.distance,e._ddValues),t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.rightInner.x,t.rightInner.y,0,-1,t.distance,e._ddValues)):(t.exit0=t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance,e._ddValues)),t.cosine<r?(l=!t.isCap,t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance,e._ddValues),t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance,e._ddValues)):t.splitOuter?(l=l||t.gapOuter,t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.leftOuter.x,-t.leftOuter.y,0,1,t.distance,e._ddValues),t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.rightOuter.x,-t.rightOuter.y,0,1,t.distance,e._ddValues)):(t.entry2=t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance,e._ddValues))):(t.splitInner?(t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.leftInner.x,-t.leftInner.y,0,1,t.distance,e._ddValues),t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.rightInner.x,-t.rightInner.y,0,1,t.distance,e._ddValues)):(t.exit2=t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance,e._ddValues)),t.cosine<r?(l=!t.isCap,t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance,e._ddValues),t.exit0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance,e._ddValues)):t.splitOuter?(l=l||t.gapOuter,t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.leftOuter.x,t.leftOuter.y,0,-1,t.distance,e._ddValues),t.exit0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.rightOuter.x,t.rightOuter.y,0,-1,t.distance,e._ddValues)):(t.exit0=t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance,e._ddValues)))):t.sign>0?(t.exit0=t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance,e._ddValues),t.cosine<r?(l=!t.isCap,t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.prevNormal.x,-t.prevNormal.y,0,1,t.distance,e._ddValues),t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.nextNormal.x,-t.nextNormal.y,0,1,t.distance,e._ddValues)):(t.entry2=t.exit2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance,e._ddValues))):(t.exit2=t.entry2=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.bisector.x/t.cosine,-t.bisector.y/t.cosine,0,1,t.distance,e._ddValues),t.cosine<r?(l=!t.isCap,t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.prevNormal.x,t.prevNormal.y,0,-1,t.distance,e._ddValues),t.exit0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.nextNormal.x,t.nextNormal.y,0,-1,t.distance,e._ddValues)):(t.exit0=t.entry0=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.bisector.x/t.cosine,t.bisector.y/t.cosine,0,-1,t.distance,e._ddValues)));let s;if(t.canSplit&&(t.splitInner||t.splitOuter)||l||i?(s=t.entry1=t.exit1=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,0,0,0,0,t.distance,e._ddValues)):s=t.entry1=t.exit1=null,l&&1!==e._joinType)e._lineIndexBuffer.add(s,t.sign>0?t.exit2:t.entry0,t.sign>0?t.entry2:t.exit0);else if(i&&1===e._capType||l&&1===e._joinType){let r,n,i,l,x,a;if(t.isCap){const e=Math.PI;x=Math.ceil(e/.8),a=e/x,t.isFirstVertex?(r=t.prevNormal.x,n=t.prevNormal.y,i=t.entry0,l=t.entry2):t.isLastVertex&&(r=-t.nextNormal.x,n=-t.nextNormal.y,i=t.exit2,l=t.exit0)}else{const e=2*Math.acos(t.cosine);x=Math.ceil(e/.8),a=e/x,r=t.sign>0?-t.prevNormal.x:t.nextNormal.x,n=t.sign>0?-t.prevNormal.y:t.nextNormal.y,i=t.sign>0?t.entry2:t.exit0,l=t.sign>0?t.exit2:t.entry0}const d=Math.cos(a),u=Math.sin(a),f=u*r+d*n;let o,c;r=d*r-u*n,n=f;for(let a=0;a<x;++a){if(o=c,a<x-1)if(t.isCap){const i=t.isFirstVertex?-1:1;c=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,r,n,i,0,t.distance,e._ddValues)}else c=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,r,n,0,t.sign,t.distance,e._ddValues);e._lineIndexBuffer.add(0===a?i:o,s,a===x-1?l:c);const f=u*r+d*n;r=d*r-u*n,n=f}}else if(i&&2===e._capType){const r=t.isFirstVertex?1:-1;let n,i;e._hasPattern?(n=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.prevNormal.x-r*t.inbound.x,t.prevNormal.y-r*t.inbound.y,-r,-1,t.distance,e._ddValues),i=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.prevNormal.x-r*t.inbound.x,-t.prevNormal.y-r*t.inbound.y,-r,1,t.distance,e._ddValues)):(n=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,t.prevNormal.x-r*t.inbound.x,t.prevNormal.y-r*t.inbound.y,0,-1,t.distance,e._ddValues),i=e._lineVertexBuffer.index,e._lineVertexBuffer.add(t.currentVertex.x,t.currentVertex.y,-t.prevNormal.x-r*t.inbound.x,-t.prevNormal.y-r*t.inbound.y,0,1,t.distance,e._ddValues)),r>0?(e._lineIndexBuffer.add(s,t.entry2,i),e._lineIndexBuffer.add(s,i,n),e._lineIndexBuffer.add(s,n,t.entry0)):(e._lineIndexBuffer.add(s,i,t.exit2),e._lineIndexBuffer.add(s,n,i),e._lineIndexBuffer.add(s,t.exit0,n))}},u=e=>t=>{e._lineIndexBuffer.add(t.leftExit0,t.rightEntry0,null!=t.leftExit1?t.leftExit1:t.leftExit2),e._lineIndexBuffer.add(t.rightEntry0,null!=t.rightEntry1?t.rightEntry1:t.rightEntry2,null!=t.leftExit1?t.leftExit1:t.leftExit2),null!=t.leftExit1&&null!=t.rightEntry1?(e._lineIndexBuffer.add(t.leftExit1,t.rightEntry1,t.leftExit2),e._lineIndexBuffer.add(t.rightEntry1,t.rightEntry2,t.leftExit2)):null!=t.leftExit1?e._lineIndexBuffer.add(t.leftExit1,t.rightEntry2,t.leftExit2):null!=t.rightEntry1&&e._lineIndexBuffer.add(t.rightEntry1,t.rightEntry2,t.leftExit2)};return s}));
