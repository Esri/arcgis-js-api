/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{create as e}from"../../../../geometry/support/aaBoundingRect.js";import{getWorldWidth as s}from"../../viewpointUtils.js";import{brushes as r}from"../brushes.js";import{RasterTile as i}from"./RasterTile.js";import{WGLDrawPhase as t}from"../webgl/enums.js";import o from"../webgl/TileContainer.js";class n extends o{constructor(){super(...arguments),this.isCustomTilingScheme=!1}createTile(e){const s=this._getTileBounds(e),[r,t]=this._tileInfoView.tileInfo.size;return new i(e,s[0],s[3],r,t)}prepareRenderPasses(e){const s=e.registerRenderPass({name:"imagery (tile)",brushes:[r.raster],target:()=>this.children.map((e=>e.bitmap)),drawPhase:t.MAP});return[...super.prepareRenderPasses(e),s]}doRender(e){this.visible&&e.drawPhase===t.MAP&&super.doRender(e)}_getTileBounds(r){const i=this._tileInfoView.getTileBounds(e(),r);if(this.isCustomTilingScheme&&r.world){const{tileInfo:e}=this._tileInfoView,t=s(e.spatialReference);if(t){const{resolution:s}=e.lodAt(r.level),o=t/s%e.size[0],n=o?(e.size[0]-o)*s:0;i[0]-=n*r.world,i[2]-=n*r.world}}return i}}export{n as RasterTileContainer};
