/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../../core/Error.js";import{on as t}from"../../../../core/events.js";import r from"../../../../core/Logger.js";import{isPowerOfTwo as s}from"../../../../core/mathUtils.js";import{isSome as i,isNone as o}from"../../../../core/maybe.js";import{watch as n,when as a,initial as h}from"../../../../core/reactiveUtils.js";import{DisplayObject as m}from"../DisplayObject.js";import{BufferObject as l}from"../../../webgl/BufferObject.js";import{PixelFormat as d,PixelType as c,TextureSamplingMode as p,TextureWrapMode as u,Usage as g}from"../../../webgl/enums.js";import{Texture as f}from"../../../webgl/Texture.js";import{VertexArrayObject as w}from"../../../webgl/VertexArrayObject.js";import y from"../../../webgl/capabilities/isWebGL2Context.js";class _ extends m{constructor(s){super(),this.elementView=s,this.isWrapAround=!1,this._vertices=new Float32Array(20),this._handles=[],this._handles.push(n((()=>this.elementView.element.opacity),(e=>this.opacity=e),h),n((()=>[this.elementView.coords]),(()=>{this.requestRender()}),h),a((()=>this.elementView.element.loaded),(()=>{const e=this.elementView.element;this.ready(),"video"===e.type&&i(e.content)&&this._handles.push(t(e.content,"play",(()=>this.requestRender())))}),h)),s.element.load().catch((t=>{r.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new e("element-load-error","Element cannot be displayed",{element:s,error:t}))}))}destroy(){this._handles.forEach((e=>e.remove())),this.texture?.dispose(),this.texture=null}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const{context:t}=e,r=this.elementView.element.content;if(i(r)){const e=r instanceof HTMLImageElement,i=r instanceof HTMLVideoElement,o=e?r.naturalWidth:i?r.videoWidth:r.width,n=e?r.naturalHeight:i?r.videoHeight:r.height;this.texture?i&&!r.paused&&(this.texture.setData(r),this.requestRender(),(y(t.gl)||s(o)&&s(n))&&this.texture.generateMipmap()):(this.texture=new f(t,{pixelFormat:d.RGBA,dataType:c.UNSIGNED_BYTE,samplingMode:p.LINEAR,wrapMode:u.CLAMP_TO_EDGE,width:o,height:n},r),(y(t.gl)||s(o)&&s(n))&&this.texture.generateMipmap(),i&&!r.paused&&this.requestRender())}super.beforeRender(e)}_createTransforms(){return null}updateDrawCoords(e,t){const r=this.elementView.coords;if(o(r))return;const[s,i,n,a]=r.rings[0],h=this._vertices,{x:m,y:l}=e,d=0!==t;d?h.set([i[0]-m,i[1]-l,s[0]-m,s[1]-l,n[0]-m,n[1]-l,a[0]-m,a[1]-l,a[0]-m,a[1]-l,i[0]+t-m,i[1]-l,i[0]+t-m,i[1]-l,s[0]+t-m,s[1]-l,n[0]+t-m,n[1]-l,a[0]+t-m,a[1]-l]):h.set([i[0]-m,i[1]-l,s[0]-m,s[1]-l,n[0]-m,n[1]-l,a[0]-m,a[1]-l]),this.isWrapAround=d}getVAO(e,t,r){if(o(this.elementView.coords))return null;const s=this._vertices;if(this._vao)this._geometryVbo.setData(s);else{this._geometryVbo=l.createVertex(e,g.DYNAMIC_DRAW,s);const i=l.createVertex(e,g.STATIC_DRAW,new Uint16Array([0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,1,1,0,1,1]));this._vao=new w(e,r,t,{geometry:this._geometryVbo,tex:i})}return this._vao}}export{_ as default};
