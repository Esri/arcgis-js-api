/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../../../core/Error.js";import e from"../../../../core/has.js";import i from"../../../../core/Logger.js";import{isNone as s,mapMany as r,isSome as a,applySome as d,unwrap as h,forEachSome as n,mapOr as o,unwrapOr as u}from"../../../../core/maybe.js";import{createResolver as l}from"../../../../core/promiseUtils.js";import{ATTRIBUTE_DATA_VV as p,TEXTURE_BINDING_ATTRIBUTE_DATA_0 as x,TEXTURE_BINDING_ATTRIBUTE_DATA_1 as _,TEXTURE_BINDING_ATTRIBUTE_DATA_2 as g,TEXTURE_BINDING_ATTRIBUTE_DATA_3 as c,TEXTURE_BINDING_ATTRIBUTE_DATA_4 as T,TEXTURE_BINDING_ATTRIBUTE_DATA_5 as f,TEXTURE_BINDING_GPGPU as b,ATTRIBUTE_DATA_FILTER_FLAGS as m,ATTRIBUTE_DATA_GPGPU as y,ATTRIBUTE_DATA_ANIMATION as w,ATTRIBUTE_DATA_DD1 as z}from"./definitions.js";import{getDisplayIdTexel as E}from"./DisplayId.js";import{getPixelArrayCtor as U,getPixelBytes as D}from"./Utils.js";import{createDebugLogger as S,DEBUG_ATTR_UPDATES as A}from"./util/debug.js";import{TextureWrapMode as j,PixelFormat as k,PixelType as M,TextureSamplingMode as N,TextureType as O,TargetType as F,DepthStencilTargetType as R}from"../../../webgl/enums.js";import{FramebufferObject as v}from"../../../webgl/FramebufferObject.js";import{Texture as B}from"../../../webgl/Texture.js";const V=i.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),L=S(A,V);class G{constructor(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:s,pixelType:r,textureOnly:a}=t,d=U(r);this.shared=i,this.pixelType=r,this.size=e,this.textureOnly=a,a||(this.data=new d(h(s))),this._resetRange()}destroy(){d(this._texture,(t=>t.dispose()));for(const t in this._fbos)d(this._fbos[t],(e=>{"0"===t&&e.detachColorTexture(),e.dispose()})),this._fbos[t]=null;this._texture=null}get _textureDesc(){return{target:O.TEXTURE_2D,wrapMode:j.CLAMP_TO_EDGE,pixelFormat:k.RGBA,dataType:this.pixelType,samplingMode:N.NEAREST,width:this.size,height:this.size}}setData(t,e,i){const s=E(t),r=h(this.data),a=s*this.texelSize+e;!r||a>=r.length||(r[a]=i,this.dirtyStart=Math.min(this.dirtyStart,s),this.dirtyEnd=Math.max(this.dirtyEnd,s))}getData(t,e){if(s(this.data))return null;const i=E(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]}getTexture(t){return u(this._texture,(()=>this._initTexture(t)))}getFBO(t,e=0){if(s(this._fbos[e])){const i={colorTarget:F.TEXTURE,depthStencilTarget:R.NONE},s=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new v(t,i,s)}return this._fbos[e]}get locked(){return!(this.pixelType!==M.UNSIGNED_BYTE||!this.shared||this.textureOnly||!e("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}get hasDirty(){const t=this.dirtyStart;return this.dirtyEnd>=t}updateTexture(e,i){if(!this.locked){try{const i=this.dirtyStart,s=this.dirtyEnd;if(!this.hasDirty)return;this._resetRange();const r=h(this.data).buffer,a=this.getTexture(e),d=4,n=(i-i%this.size)/this.size,o=(s-s%this.size)/this.size,u=n,l=this.size,p=o,x=n*this.size*d,_=(l+p*this.size)*d-x,g=U(this.pixelType),c=new g(r,x*g.BYTES_PER_ELEMENT,_),T=this.size,f=p-u+1;if(f>this.size)return void V.error(new t("mapview-webgl","Out-of-bounds index when updating AttributeData"));a.updateData(0,0,u,T,f,c)}catch(s){}i()}}update(t){const{data:e,start:i,end:s}=t;if(a(e)){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const a=1<<i%this.texelSize;t.layout&a&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,s)}resize(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const s=U(this.pixelType);this.destroy(),this.data=new s(h(t.buffer))}_resetRange(){this.dirtyStart=2147483647,this.dirtyEnd=0}_initTexture(t){const e=new B(t,this._textureDesc,u(this.data,void 0));if(a(this._lastTexture)&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,a=this._lastTexture.descriptor.pixelFormat,d=this.getFBO(t),h=D(r),n=new(U(r))(new ArrayBuffer(i*s*h*this.texelSize)),o=t.getBoundFramebufferObject(),{x:u,y:l,width:p,height:x}=t.getViewport();t.bindFramebuffer(d),d.readPixels(0,0,i,s,a,r,n),e.updateData(0,0,0,2*i,s/2,n),t.setViewport(u,l,p,x),t.bindFramebuffer(o)}return this.destroy(),this._texture=e,this._texture}}class P{constructor(t){this._onUpdate=t,this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}initialize(t){const{blocks:e,shared:i,size:d}=t;if(this.shared=i,this.size=d,L("Initializing AttributeStoreView",t),s(this._data))this._data=r(e,(t=>new G(t,d,i)));else for(let r=0;r<this._data.length;r++){const t=this._data[r],h=e[r];a(h)&&(s(t)?this._data[r]=new G(h,d,i):t.resize(h,d))}this._initialized=!0}destroy(){d(this._data,(t=>r(t,(t=>t.destroy())))),d(this._defaultTexture,(t=>t.dispose()))}isEmpty(){const t=this._data;return s(t)}isUpdating(){const t=a(this._pendingAttributeUpdate),i=t;return e("esri-2d-log-updating")&&console.log(`Updating AttributeStoreView ${i}\n  -> hasPendingUpdate ${t}`),i}getBlock(t){if(s(this._data))return null;return this._data[t]}setLabelMinZoom(t,e){this.setData(t,0,1,e)}getLabelMinZoom(t){return this.getData(t,0,1,255)}getFilterFlags(t){return this.getData(t,0,0,0)}getVVSize(t){return this.getData(t,p,0,0)}getData(t,e,i,r){if(!this._data)return 0;const d=h(this._data)[e];if(s(d))return 0;const n=d.getData(t,i);return a(n)?n:r}setData(t,e,i,s){const r=h(this._data)[e];h(r).setData(t,i,s)}lockTextureUpload(){this._locked=!0}unlockTextureUpload(){this._locked=!1}forceTextureUpload(){this._forceNextUpload=!0}async requestUpdate(e){if(this._pendingAttributeUpdate)return void V.error(new t("mapview-webgl","Tried to update attribute data with a pending update"));const i=l();return L("AttributeStoreView Update Requested",e),this._pendingAttributeUpdate={data:e,resolver:i},i.promise}update(){if(this._initialized&&a(this._pendingAttributeUpdate)){e("esri-2d-update-debug")&&console.debug("AttributeStoreView::update");const{data:t,resolver:i}=this._pendingAttributeUpdate,s=h(this._data);for(let e=0;e<t.blocks.length;e++){const i=t.blocks[e],r=s[e];d(r,(t=>d(i,(i=>{L(`Updating block ${e}`,i),t.update(i)}))))}this._pendingAttributeUpdate=null,i(),this._onUpdate()}}bindTextures(t,e=!0){this.update();const i=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(i,x),void(e&&(t.bindTexture(i,_),t.bindTexture(i,g),t.bindTexture(i,c),t.bindTexture(i,T),t.bindTexture(i,f),t.bindTexture(i,b)));const s=h(this._data);this._locked&&!this._forceNextUpload||(n(s,(e=>e.updateTexture(t,(()=>this._onUpdate())))),this._forceNextUpload=!1),t.bindTexture(o(s[m],i,(e=>e.getTexture(t))),x),e&&(t.bindTexture(o(s[y],i,(e=>e.getTexture(t))),b),t.bindTexture(o(s[w],i,(e=>e.getTexture(t))),_),t.bindTexture(o(s[p],i,(e=>e.getTexture(t))),g),t.bindTexture(o(s[z],i,(e=>e.getTexture(t))),c),t.bindTexture(o(s[T],i,(e=>e.getTexture(t))),T),t.bindTexture(o(s[f],i,(e=>e.getTexture(t))),f))}_getDefaultTexture(t){if(s(this._defaultTexture)){const e={wrapMode:j.CLAMP_TO_EDGE,pixelFormat:k.RGBA,dataType:M.UNSIGNED_BYTE,samplingMode:N.NEAREST,width:1,height:1};this._defaultTexture=new B(t,e,new Uint8Array(4))}return this._defaultTexture}}export{P as AttributeStoreView};
