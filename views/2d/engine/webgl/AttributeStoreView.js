/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/has","../../../../core/maybe","../../../../core/Logger","../../../../core/Error","../../../../core/promiseUtils","./definitions","../../../../chunks/builtins","../../../webgl/Texture","../../../webgl/FramebufferObject","../../../webgl/RenderingContext","./Utils","./util/debug"],(function(t,e,i,s,r,n,a,o,u,h,d,l,T,c){"use strict";const _=r.getLogger("esri.views.2d.engine.webgl.AttributeStoreView"),f=c.createDebugLogger(c.DEBUG_ATTR_UPDATES,_),p=t=>2147483647&t;let x=function(){function t(t,e,i){this._texture=null,this._lastTexture=null,this._fbos={},this.texelSize=4;const{buffer:r,pixelType:n,textureOnly:a}=t,o=T.getPixelArrayCtor(n);this.shared=i,this.pixelType=n,this.size=e,this.textureOnly=a,a||(this.data=new o(s.unwrap(r))),this._resetRange()}var r=t.prototype;return r.destroy=function(){s.andThen(this._texture,(t=>t.dispose()));for(const t in this._fbos)s.andThen(this._fbos[t],(e=>{"0"===t&&e.detachColorTexture(),e.dispose()})),this._fbos[t]=null;this._texture=null},r.setData=function(t,e,i){const r=p(t),n=s.unwrap(this.data),a=r*this.texelSize+e;!n||a>=n.length||(n[a]=i,this.dirtyStart=Math.min(this.dirtyStart,r),this.dirtyEnd=Math.max(this.dirtyEnd,r))},r.getData=function(t,e){if(s.isNone(this.data))return null;const i=p(t)*this.texelSize+e;return!this.data||i>=this.data.length?null:this.data[i]},r.getTexture=function(t){return s.unwrapOr(this._texture,(()=>this._initTexture(t)))},r.getFBO=function(t,e=0){if(s.isNone(this._fbos[e])){const i={colorTarget:0,depthStencilTarget:0},s=0===e?this.getTexture(t):this._textureDesc;this._fbos[e]=new d(t,i,s)}return this._fbos[e]},r.updateTexture=function(t){if(!this.locked)try{const e=this.dirtyStart,i=this.dirtyEnd;if(e>i)return;this._resetRange();const r=s.unwrap(this.data).buffer,a=this.getTexture(t),o=4,u=(e-e%this.size)/this.size,h=(i-i%this.size)/this.size,d=u,l=this.size,c=h,f=u*this.size*o,p=(l+c*this.size)*o-f,x=T.getPixelArrayCtor(this.pixelType),g=x.BYTES_PER_ELEMENT;try{new x(r,f*g,p)}catch(t){console.debug(t)}const b=new x(r,f*g,p),y=this.size,w=c-d+1;if(w>this.size)return void _.error(new n("mapview-webgl","Out-of-bounds index when updating AttributeData"));a.updateData(0,0,d,y,w,b)}catch(t){console.debug(t)}},r.update=function(t){const{data:e,start:i,end:r}=t;if(s.isSome(e)){const s=this.data,r=i*this.texelSize;for(let i=0;i<e.length;i++){const n=1<<i%this.texelSize;t.layout&n&&(s[r+i]=e[i])}}this.dirtyStart=Math.min(this.dirtyStart,i),this.dirtyEnd=Math.max(this.dirtyEnd,r)},r.resize=function(t,e){const i=this.size;if(this.size=e,this.textureOnly)return void(i!==this.size&&(this._lastTexture=this._texture,this._texture=null));const r=T.getPixelArrayCtor(this.pixelType);this.destroy(),this.data=new r(s.unwrap(t.buffer))},r._resetRange=function(){this.dirtyStart=2147483647,this.dirtyEnd=0},r._initTexture=function(t){const e=new h(t,this._textureDesc,s.unwrapOr(this.data,void 0));if(s.isSome(this._lastTexture)&&this._fbos[0]){const i=this._lastTexture.descriptor.width,s=this._lastTexture.descriptor.height,r=this._lastTexture.descriptor.dataType,n=this._lastTexture.descriptor.pixelFormat,a=this.getFBO(t),o=T.getPixelBytes(r),u=new(T.getPixelArrayCtor(r))(new ArrayBuffer(i*s*o*this.texelSize)),h=t.getBoundFramebufferObject(),{x:d,y:l,width:c,height:_}=t.getViewport();t.bindFramebuffer(a),a.readPixels(0,0,i,s,n,r,u),e.updateData(0,0,0,2*i,s/2,u),t.setViewport(d,l,c,_),t.bindFramebuffer(h)}return this.destroy(),this._texture=e,this._texture},e._createClass(t,[{key:"_textureDesc",get:function(){return{target:3553,wrapMode:33071,pixelFormat:6408,dataType:this.pixelType,samplingMode:9728,width:this.size,height:this.size}}},{key:"locked",get:function(){return!(5121!==this.pixelType||!this.shared||this.textureOnly||!i("esri-atomics")||!this.data)&&1===Atomics.load(this.data,0)}}]),t}(),g=function(){function t(){this._initialized=!1,this._forceNextUpload=!1,this._locked=!1}var e=t.prototype;return e.initialize=function(t){const{blocks:e,shared:i,size:r}=t;if(this.shared=i,this.size=r,f("Initializing AttributeStoreView",t),s.isNone(this._data))this._data=s.mapMany(e,(t=>new x(t,r,i)));else for(let t=0;t<this._data.length;t++){const n=this._data[t],a=e[t];s.isSome(a)&&(s.isNone(n)?this._data[t]=new x(a,r,i):n.resize(a,r))}this._initialized=!0},e.destroy=function(){s.andThen(this._data,(t=>s.mapMany(t,(t=>t.destroy())))),s.andThen(this._defaultTexture,(t=>t.dispose()))},e.getBlock=function(t){if(s.isNone(this._data))return null;return this._data[t]},e.setLabelMinZoom=function(t,e){this.setData(t,0,1,e)},e.getLabelMinZoom=function(t){return this.getData(t,0,1,255)},e.getFilterFlags=function(t){return this.getData(t,0,0,0)},e.getVVSize=function(t){return this.getData(t,o.ATTRIBUTE_DATA_VV,0,0)},e.getData=function(t,e,i,r){if(!this._data)return 0;const n=s.unwrap(this._data)[e];if(s.isNone(n))return 0;const a=n.getData(t,i);return s.isSome(a)?a:r},e.setData=function(t,e,i,r){const n=s.unwrap(this._data)[e];s.unwrap(n).setData(t,i,r)},e.lockTextureUpload=function(){this._locked=!0},e.unlockTextureUpload=function(){this._locked=!1},e.forceTextureUpload=function(){this._forceNextUpload=!0},e.requestUpdate=async function(t){if(this._pendingAttributeUpdate)return void _.error(new n("mapview-webgl","Tried to update attribute data with a pending update"));const e=a.createResolver();return f("AttributeStoreView Update Requested",t),this._pendingAttributeUpdate={data:t,resolver:e},e.promise},e.update=function(){if(this._initialized&&s.isSome(this._pendingAttributeUpdate)){const{data:t,resolver:e}=this._pendingAttributeUpdate,i=s.unwrap(this._data);for(let e=0;e<t.blocks.length;e++){const r=t.blocks[e],n=i[e];s.andThen(n,(t=>s.andThen(r,(i=>{f(`Updating block ${e}`,i),t.update(i)}))))}this._pendingAttributeUpdate=null,e()}},e.bindTextures=function(t){this.update();const e=this._getDefaultTexture(t);if(!this._initialized)return t.bindTexture(e,o.TEXTURE_BINDING_ATTRIBUTE_DATA_0),t.bindTexture(e,o.TEXTURE_BINDING_ATTRIBUTE_DATA_1),t.bindTexture(e,o.TEXTURE_BINDING_ATTRIBUTE_DATA_2),void t.bindTexture(e,o.TEXTURE_BINDING_ATTRIBUTE_DATA_3);const i=s.unwrap(this._data);this._locked&&!this._forceNextUpload||(s.forEachSome(i,(e=>e.updateTexture(t))),this._forceNextUpload=!1),t.bindTexture(s.mapOr(i[0],e,(e=>e.getTexture(t))),o.TEXTURE_BINDING_ATTRIBUTE_DATA_0),t.bindTexture(s.mapOr(i[1],e,(e=>e.getTexture(t))),o.TEXTURE_BINDING_ATTRIBUTE_DATA_1),t.bindTexture(s.mapOr(i[2],e,(e=>e.getTexture(t))),o.TEXTURE_BINDING_ATTRIBUTE_DATA_2),t.bindTexture(s.mapOr(i[3],e,(e=>e.getTexture(t))),o.TEXTURE_BINDING_ATTRIBUTE_DATA_3)},e._getDefaultTexture=function(t){if(s.isNone(this._defaultTexture)){const e={wrapMode:33071,pixelFormat:6408,dataType:5121,samplingMode:9728,width:1,height:1};this._defaultTexture=new h(t,e,new Uint8Array(4))}return this._defaultTexture},t}();t.AttributeStoreView=g,Object.defineProperty(t,"__esModule",{value:!0})}));
