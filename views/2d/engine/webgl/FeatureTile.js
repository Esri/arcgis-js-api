/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/_rollupPluginBabelHelpers","../../../../core/CircularArray","../../../../core/has","../../../../core/maybe","../../../../chunks/mat2df32","./enums","./Utils","./WGLTile","./collisions/MetricReader","./cpuMapped/Geometry"],(function(e,t,r,s,i,n,a,o,d,h,c){"use strict";const u=50,_=4,l=100;let f=0,p=function(e){function d(t,s,i,a,o,d){var h;return(h=e.call(this,t,s,i,a)||this).instanceId=f++,h.patchCount=0,h._renderState={current:{geometry:new Map,metrics:null},next:null,swap:!1,swapFrames:0,locked:!1},h._patches=new r(l),h._bufferPatches=new r(l),h._lastCommitTime=0,h.transforms.labelMat2d=n.create(),h._store=o,h._requestLabelUpdate=d,h}t._inheritsLoose(d,e);var p=d.prototype;return p.destroy=function(){e.prototype.destroy.call(this),this._renderState.current.geometry.forEach((e=>e.destroy())),i.isSome(this._renderState.next)&&this._renderState.next.geometry.forEach((e=>e.destroy())),this._renderState.current=null,this._renderState.next=null},p.getGeometry=function(e){return this._renderState.current.geometry.get(e)},p.patch=function(e,t){this.patchCount++,e.clear&&this._patches.size>=u&&this._dropPatches();const r=e,s=r.addOrUpdate&&this.key.id!==r.addOrUpdate.tileKeyOrigin;t&&s?this._bufferPatches.enqueue(r):(r.sort=r.sort&&!t,this._patches.enqueue(r)),this.requestRender()},p.commit=function(e){if(this._lastCommitTime!==e.time){this._lastCommitTime=e.time;for(let e=0;e<_;e++)this._updateMesh(),this.isReady&&this._updateBufferMesh();this._renderState.swap&&(this._swapRenderStates(),this.requestRender())}},p.lock=function(){this._renderState.locked=!0},p.unlock=function(){this._renderState.locked=!1,this._flushUpdates(),this._swap()},p._swapRenderStates=function(){if(this._renderState.next){if(this._renderState.locked)return this._renderState.swap=!0,void this.requestRender();this._renderState.swap=!0,this._swap()}},p._swap=function(){this._renderState.swap&&(this._renderState.swap=!1,i.isSome(this._renderState.next)&&(this._renderState.current.geometry.forEach((e=>e.destroy())),this._renderState.current=this._renderState.next,this._renderState.next=null,this._requestLabelUpdate()))},p._flushUpdates=function(){let e=this._patches.maxSize;for(;this._patches.size&&e--;)this._updateMesh(),this._swap()},p._updateBufferMesh=function(){const e=this._bufferPatches.peek();if(!i.isSome(e)||!e.clear||null===this._renderState.next)for(;this._bufferPatches.size;){const e=this._bufferPatches.dequeue();i.isSome(e)&&this._patchBuffer(e)}},p._updateMesh=function(){const e=this._patches.dequeue();if(i.isSome(e)){if(s("esri-2d-update-debug")){const t=e,r=t.addOrUpdate?.tileKeyOrigin,s=this.key.id===r?"SELF":r;let i="";for(let e=0;e<5;e++)i+=t.addOrUpdate?.data[e]?.records?.byteLength?1:0;console.debug(this.key.id,"FeatureTile:patch",`[clear: ${t.clear} origin: ${s}, end:${t.end} data:${i}]`)}!0===e.clear&&(i.isSome(this._renderState.next)&&(this._renderState.next.geometry.forEach((e=>e.destroy())),this._renderState.next=null),this._renderState.next={geometry:new Map,metrics:null},s("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Creating new renderState")),this.requestRender(),this._patch(e),e.end&&(s("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Encountered end message"),this.ready(),this._swapRenderStates())}},p._patch=function(e){o.forEachGeometryType((t=>{this._remove(t,e.remove),this._insert(t,e,!1)}))},p._patchBuffer=function(e){o.forEachGeometryType((t=>{this._insert(t,e,!0)}))},p._insert=function(e,t,r){try{const n=i.unwrapOr(this._renderState.next,this._renderState.current),o=t.addOrUpdate?.data[e],d=n.geometry;if(i.isNone(o))return;d.has(e)||(s("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Creating geometry buffer ${e}`),d.set(e,new c.Geometry(e,this.stage))),s("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Inserting into ${e}, version=${t.addOrUpdate?.version} stride=${o.stride}`),d.get(e).insert(o,t.sort,r),e===a.WGLGeometryType.LABEL&&this._insertLabelMetrics(t.type,o.metrics,t.clear)}catch(n){}},p._insertLabelMetrics=function(e,t,r){const s=i.unwrapOr(this._renderState.next,this._renderState.current);if(i.isNone(t))return;const n=h.MetricReader.from(t);if(i.isNone(s.metrics))s.metrics=n;else{if("update"===e){const e=n.getCursor();for(;e.next();)s.metrics.delete(e.id)}s.metrics.link(n)}},p._remove=function(e,t){const r=i.unwrapOr(this._renderState.next,this._renderState.current).geometry.get(e);t&&t.length&&r&&(r.remove(t),this._removeLabelMetrics(t))},p._removeLabelMetrics=function(e){const{metrics:t}=i.unwrapOr(this._renderState.next,this._renderState.current);if(!i.isNone(t)&&e.length)for(const r of e)for(;t.delete(r););},p._dropPatches=function(){const e=new Array;let t=!1;for(;this._patches.size;){const r=this._patches.dequeue();if(i.isNone(r))break;if(r.clear){if(t)break;t=!0}e.push(r)}this._patches.clear(),e.forEach((e=>this._patches.enqueue(e)))},t._createClass(d,[{key:"labelMetrics",get:function(){return this._renderState.current.metrics}},{key:"hasData",get:function(){return!!this._renderState.current.geometry.size}}]),d}(d.WGLTile);e.FeatureTile=p,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
