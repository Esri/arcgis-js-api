/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../../core/CircularArray.js";import t from"../../../../core/has.js";import{isSome as r,unwrapOr as s,isNone as i}from"../../../../core/maybe.js";import{a,m as n}from"../../../../chunks/mat2d.js";import{c as h}from"../../../../chunks/mat2df32.js";import{t as d}from"../../../../chunks/vec2.js";import{c as o}from"../../../../chunks/vec2f32.js";import{WGLGeometryType as c}from"./enums.js";import{forEachGeometryType as u}from"./Utils.js";import{WGLTile as _}from"./WGLTile.js";import{MetricReader as p}from"./collisions/MetricReader.js";import{Geometry as m}from"./cpuMapped/Geometry.js";const l=50,f=4,S=100;let g=0;class y extends _{constructor(t,r,s,i,a){super(t,r,s),this.instanceId=g++,this.patchCount=0,this._renderState={current:{geometry:new Map,metrics:null},next:null,swap:!1,swapFrames:0,locked:!1},this._patches=new e(S),this._bufferPatches=new e(S),this._lastCommitTime=0,this.transforms.labelMat2d=h(),this._store=i,this._requestLabelUpdate=a}destroy(){super.destroy(),this._renderState.current.geometry.forEach((e=>e.destroy()))}get labelMetrics(){return this._renderState.current.metrics}get hasData(){return!!this._renderState.current.geometry.size}getGeometry(e){return this._renderState.current.geometry.get(e)}setTransform(e,t){super.setTransform(e,t);const r=this.transforms.labelMat2d,s=e.getScreenTransform(r,t),i=o();d(i,[this.x,this.y],s),a(r,i),n(r,e.viewMat2d,r)}patch(e,r){this.patchCount++,t("esri-2d-update-debug")&&!0===e.clear&&console.debug(this.key.id,"FeatureTile:patch:clear",e.clear),e.clear&&this._patches.size>=l&&this._dropPatches();const s=e,i=s.addOrUpdate&&this.key.id!==s.addOrUpdate.tileKeyOrigin;r&&i?this._bufferPatches.enqueue(s):(s.sort=s.sort&&!r,this._patches.enqueue(s)),this.requestRender()}commit(e){if(this._lastCommitTime!==e.time){this._lastCommitTime=e.time;for(let e=0;e<f;e++)this._updateMesh(),this.isReady&&this._updateBufferMesh();this._renderState.swap&&(this._swapRenderStates(),this.requestRender())}}lock(){this._renderState.locked=!0}unlock(){this._renderState.locked=!1,this._flushUpdates(),this._swap()}_swapRenderStates(){if(this._renderState.next){if(this._renderState.locked)return this._renderState.swap=!0,void this.requestRender();this._renderState.swap=!0,this._swap()}}_swap(){this._renderState.swap&&(this._renderState.swap=!1,r(this._renderState.next)&&(this._renderState.current.geometry.forEach((e=>e.destroy())),this._renderState.current=this._renderState.next,this._renderState.next=null,this._requestLabelUpdate()))}_flushUpdates(){let e=this._patches.maxSize;for(;this._patches.size&&e--;)this._updateMesh(),this._swap()}_updateBufferMesh(){const e=this._bufferPatches.peek();if(!r(e)||!e.clear||null===this._renderState.next)for(;this._bufferPatches.size;){const e=this._bufferPatches.dequeue();r(e)&&this._patchBuffer(e)}}_updateMesh(){const e=this._patches.dequeue();r(e)&&(!0===e.clear&&(r(this._renderState.next)&&(this._renderState.next.geometry.forEach((e=>e.destroy())),this._renderState.next=null),this._renderState.next={geometry:new Map,metrics:null},t("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Creating new renderState")),this.requestRender(),this._patch(e),e.end&&(t("esri-2d-update-debug")&&console.debug(this.key.id,"FeatureTile:_updateMesh - Encountered end message"),this.ready(),this._swapRenderStates()))}_patch(e){u((t=>{this._remove(t,e.remove),this._insert(t,e,!1)}))}_patchBuffer(e){u((t=>{this._insert(t,e,!0)}))}_insert(e,r,a){try{const n=s(this._renderState.next,this._renderState.current),h=r.addOrUpdate?.data[e],d=n.geometry;if(i(h))return;d.has(e)||(t("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Creating geometry buffer ${e}`),d.set(e,new m(e,this.stage))),t("esri-2d-update-debug")&&console.debug(this.key.id,`FeatureTile:_insert - Inserting into ${e}, version=${r.addOrUpdate.version} stride=${h.stride}`),d.get(e).insert(h,r.sort,a),e===c.LABEL&&this._insertLabelMetrics(r.type,h.metrics,r.clear)}catch(n){}}_insertLabelMetrics(e,t,r){const a=s(this._renderState.next,this._renderState.current);if(i(t))return;const n=p.from(t);if(i(a.metrics))a.metrics=n;else{if("update"===e){const e=n.getCursor();for(;e.next();)a.metrics.delete(e.id)}a.metrics.link(n)}}_remove(e,t){const r=s(this._renderState.next,this._renderState.current).geometry.get(e);t&&t.length&&r&&(r.remove(t),this._removeLabelMetrics(t))}_removeLabelMetrics(e){const{metrics:t}=s(this._renderState.next,this._renderState.current);if(!i(t)&&e.length)for(const r of e)for(;t.delete(r););}_dropPatches(){const e=new Array;let t=!1;for(;this._patches.size;){const r=this._patches.dequeue();if(i(r))break;if(r.clear){if(t)break;t=!0}e.push(r)}this._patches.clear(),e.forEach((e=>this._patches.enqueue(e)))}}export{y as FeatureTile};
