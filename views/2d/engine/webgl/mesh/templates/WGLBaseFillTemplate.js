/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
define(["../../../../../../chunks/_rollupPluginBabelHelpers","../../../../../../core/maybe","../../../../../../layers/graphics/featureConversionUtils","../../enums","../../number","../../materialKey/MaterialKey","./templateUtils","./WGLLineTemplate"],(function(e,t,i,r,n,o,s,l){"use strict";const a=100,c=1;return m=>function(m){function u(...e){var t;return(t=m.call(this,...e)||this).forceLibtess=!1,t._bitset=0,t._lineTemplate=null,t.geometryType=r.WGLGeometryType.FILL,t}e._inheritsLoose(u,m);var y=u.prototype;return y._maybeAddLineTemplate=function(e){this._lineTemplate=l.fromFillOutline(e)},y._write=function(e,i,r){const n="esriGeometryPoint"===i.geometryType,s=o.FillMaterialKey.load(this._materialKey);e.recordStart(i.getDisplayId(),this._materialKey,this.geometryType,n),this._writeGeometry(e,i,s,r,n),s.outlinedFill&&t.isSome(this._lineTemplate)&&this._lineTemplate.writeGeometry(e,i,r,n),e.recordEnd()},y._writeGeometry=function(e,i,r,n,o){const l=this._getGeometry(i,n,o);if(t.isNone(l))return;const c=e.indexCount();if(!(l.maxLength>a)&&!this.forceLibtess&&s.triangulate(e,l)){return void(!(c===e.indexCount())&&this._writeVertices(e,i,l.coords,l.lengths,r))}const m=s.triangulateLibtess(e,l);!(c===e.indexCount())&&this._writeVertices(e,i,m,[m.length/2],r)},y._writeVertices=function(e,t,i,r,o){const s=t.getDisplayId(),l=this._bitset<<24|s;let a=0;const m=r.reduce(((e,t)=>e+t)),u=o.dotDensity?4:10;e.vertexEnsureSize(u*m);for(const y of r){const r=y+a;for(let s=a;s<r;s++){const r=i[2*s],a=i[2*s+1],m=n.i1616to32(c*r,c*a);e.vertexBounds(r,a,0,0),e.vertexWrite(m),e.vertexWrite(l),o.dotDensity?e.vertexWriteF32(1/Math.abs(t.readGeometryArea())):(e.vertexWrite(this.fillColor),o.simple||(e.vertexWrite(this.tl),e.vertexWrite(this.br)),e.vertexWrite(this.aux2),e.vertexWrite(this.aux3),o.simple||e.vertexWrite(this._minMaxZoom))}a+=y}},y._getGeometry=function(e,t,r){const n=t?i.deltaDecodeGeometry(i.convertFromGeometry(t),2):e.readGeometryForDisplay();if(!n)return null;const o=r?256:8;return s.clipMarshall(n,o)},u}(m)}));
