/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["../../../../../../chunks/_rollupPluginBabelHelpers","../../../../../../core/maybe","../../../../../../layers/graphics/featureConversionUtils","../../enums","../../number","../../materialKey/MaterialKey","./templateUtils","./WGLLineTemplate"],(function(e,t,r,i,n,o,s,l){"use strict";const a=100,c=1;return u=>function(u){function m(...e){var t;return(t=u.call(this,...e)||this).forceLibtess=!1,t._bitset=0,t._lineTemplate=null,t.geometryType=i.WGLGeometryType.FILL,t}e._inheritsLoose(m,u);var h=m.prototype;return h._maybeAddLineTemplate=function(e){this._lineTemplate=l.fromFillOutline(e)},h._write=function(e,r,i,n){const s="esriGeometryPoint"===r.geometryType,l=o.FillMaterialKey.load(this._materialKey);e.recordStart(r.getDisplayId(),this._materialKey,this.geometryType,s),this._writeGeometry(e,r,l,n,s),l.outlinedFill&&t.isSome(this._lineTemplate)&&this._lineTemplate.writeGeometry(e,r,n,s),e.recordEnd()},h._writeGeometry=function(e,r,i,n,o){const l=this._getGeometry(r,n,o);if(t.isNone(l))return;const c=[];if(!(l.maxLength>a)&&!this.forceLibtess&&s.triangulate(c,l))return void(c.length&&this._writeVertices(e,r,l.coords,l.lengths,i,c));const u=s.triangulateLibtess(l);this._writeVertices(e,r,u,[u.length/2],i)},h._writeVertex=function(e,t,r,i,o,s){const l=n.i1616to32(c*i,c*o);e.vertexBounds(i,o,0,0),e.vertexWrite(l),e.vertexWrite(t),r.dotDensity?e.vertexWriteF32(1/Math.abs(s.readGeometryArea())):(e.vertexWrite(this.fillColor),r.simple||(e.vertexWrite(this.tl),e.vertexWrite(this.br)),e.vertexWrite(this.aux2),e.vertexWrite(this.aux3),r.simple||e.vertexWrite(this._minMaxZoom))},h._writeVertices=function(e,t,r,i,n,o){const s=t.getDisplayId(),l=this._bitset<<24|s,a=i.reduce(((e,t)=>e+t)),c=n.dotDensity?4:10,u=e.vertexCount();e.vertexEnsureSize(c*a);let m=0;if(o)for(const h of o){const i=r[2*h],o=r[2*h+1];this._writeVertex(e,l,n,i,o,t),m++}else for(let h=0;h<r.length;h+=2){const i=Math.round(r[h]),o=Math.round(r[h+1]);this._writeVertex(e,l,n,i,o,t),m++}e.indexEnsureSize(m);for(let h=0;h<m;h++)e.indexWrite(h+u)},h._getGeometry=function(e,t,i){const n=t?r.deltaDecodeGeometry(r.convertFromGeometry(t),2):e.readGeometryForDisplay();if(!n)return null;const o=i?256:8;return s.clipMarshall(n,o)},m}(u)}));
