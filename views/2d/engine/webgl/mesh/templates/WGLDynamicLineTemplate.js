/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as t}from"../../../../../../core/maybe.js";import{pt2px as e}from"../../../../../../core/screenUtils.js";import{premultiplyAlphaRGBA as i}from"../../color.js";import{MIN_MAX_ZOOM_PRECISION_FACTOR as s,BITSET_GENERIC_LOCK_COLOR as r,BITSET_LINE_SCALE_DASH as o,BITSET_GENERIC_CONSIDER_ALPHA_ONLY as a,SPRITE_PADDING as l}from"../../definitions.js";import{i1616to32 as h}from"../../number.js";import{LineMaterialKey as n}from"../../materialKey/MaterialKey.js";import{isFunction as c,getLimitCosine as m,getMinMaxZoom as p}from"./util.js";import _ from"./WGLBaseLineTemplate.js";import f from"./WGLDynamicMeshTemplate.js";import{ok as d}from"../../util/Result.js";class y extends(_(f)){constructor(l,n,p){super(l),this._minMaxZoom=h(Math.round(n*s),Math.round(p*s)),this._cimLineLayer=l;let _=0;c(l.width)||(_=.5*e(l.width));const f=(t,i,s)=>c(l.width)?.5*e(l.width(t,i,s)):_;this._dynamicPropertyMap.set("_halfWidth",f),c(l.cap)?this._dynamicPropertyMap.set("_capType",l.cap):this._capType=l.cap,c(l.join)?this._dynamicPropertyMap.set("_joinType",l.join):this._joinType=l.join;const d=l.color;if(c(d)){const t=(t,e,s)=>i(d(t,e,s));this._dynamicPropertyMap.set("_fillColor",t)}else this._fillColor=d&&i(d)||0;const y=l.miterLimit;if(c(y)){const t=(t,e,i)=>m(y(t,e,i));this._dynamicPropertyMap.set("_miterLimitCosine",t)}else this._miterLimitCosine=m(y);if(t(l.effects)){const t=l.effects;c(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}this._scaleFactor=l.scaleFactor||1,this._isDashed=null!=l.dashTemplate;const P=l.colorLocked?r:0,u=l.scaleDash?o:0,j=l.sampleAlphaOnly?a:0;this.tessellationProperties._bitset=P|u|j,this._materialKey=l.materialKey,this._initializeTessellator(!0)}static fromCIMLine(t,e){const[i,s]=p(t.scaleInfo,e);return new y(t,i,s)}bindFeature(t,e,i){const s=t.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,r)=>{this[r]=t(s,e,i)})),this._halfWidth*=this._scaleFactor;const r=this._materialCache,o=(0,this._cimLineLayer.materialHash)(s,e,i),a=r.get(o);let c=null;if(a&&d(a.spriteMosaicItem)&&(c=a.spriteMosaicItem),c){this._hasPattern=!0;const{rect:t,width:e,height:i}=c,s=t.x+l,r=t.y+l,o=s+e,a=r+i;this.tessellationProperties._tl=h(s,r),this.tessellationProperties._br=h(o,a)}else this._hasPattern=!1,this.tessellationProperties._tl=0,this.tessellationProperties._br=0;this.tessellationProperties._fillColor=this._fillColor,this.tessellationProperties._halfWidth=this._halfWidth,this.tessellationProperties.offset=0,this.tessellationProperties._halfReferenceWidth=this.tessellationProperties._halfWidth;const m=n.load(this._materialKey);c&&(m.sdf=c.sdf,m.pattern=!0,m.textureBinding=c.textureBinding),this._materialKey=m.data}}export{y as default};
