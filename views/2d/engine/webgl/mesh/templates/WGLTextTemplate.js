/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{bidiText as t}from"../../../../../../core/BidiText.js";import{pt2px as e,toPt as i}from"../../../../../../core/screenUtils.js";import{Alignment as o}from"../../../../../../symbols/cim/enums.js";import{getJustification as s,getXAnchorDirection as n,getYAnchorDirection as r}from"../../alignmentUtils.js";import{premultiplyAlphaRGBAArray as a,premultiplyAlphaRGBA as l}from"../../color.js";import{GLYPH_SIZE as m,MIN_MAX_ZOOM_PRECISION_FACTOR as h}from"../../definitions.js";import{i1616to32 as f}from"../../number.js";import{MaterialKeyBase as c}from"../../materialKey/MaterialKey.js";import{DEFAULT_MIN_ZOOM as _,DEFAULT_MAX_ZOOM as d,getMinMaxZoom as x}from"./util.js";import z from"./WGLBaseTextTemplate.js";import u from"./WGLMeshTemplate.js";const M=5;class p extends(z(u)){constructor(t,a,l,_,d,x,z,u,p,g,j,S,y,b,T,V,A,C,I=!1,K,R){super(),this._xOffset=e(y),this._yOffset=e(b),this._decoration=g||"none",this._color=d,this._haloColor=x,this._haloSize=Math.min(Math.floor(M*e(i(l))),127),this._size=Math.min(Math.round(e(a)),127);const v=Math.min(Math.round(e(_||a)),127);this._referenceSize=Math.round(Math.sqrt(256*v)),this._scale=this._size/m,this._angle=S,this._justify=s(z||"center"),this._xAlignD=n(z||"center"),this._yAlignD=r(u||"baseline"),this._baseline="baseline"===(u||"baseline"),this._bitset=(p===o.MAP?1:0)|(j?1:0)<<1;const B=c.load(t);B.sdf=!0,this._materialKey=B.data,this._lineWidth=e(T)||512,this._lineHeight=V||1,this._textPlacement=A,this._effects=C,this._isCIM=I,this._minMaxZoom=f(Math.round(K*h),Math.round(R*h))}static fromText(e,i){const s=new p(e.materialKey,e.font.size,e.haloSize||0,e.font.size,e.color&&a(e.color)||0,e.haloColor&&a(e.haloColor)||0,e.horizontalAlignment,e.verticalAlignment,o.SCREEN,e.font.decoration,!1,e.angle||0,e.xoffset,e.yoffset,e.lineWidth,e.lineHeight,null,null,!1,_,d),[,n]=t(e.text);return s.bindTextInfo(i,n),s._vertexBoundsScale=e.maxVVSize?e.maxVVSize/e.font.size:1,s}static fromCIMText(e,i,o){const s=e.scaleFactor||1,n=e.size*e.sizeRatio*s,[r,a]=x(e.scaleInfo,o),m=new p(e.materialKey,n,e.outlineSize*e.sizeRatio,e.referenceSize,l(e.color),l(e.outlineColor),e.horizontalAlignment,e.verticalAlignment,e.alignment,e.decoration,e.colorLocked,e.angle,e.offsetX*e.sizeRatio*s,e.offsetY*e.sizeRatio*s,512,1,e.markerPlacement,e.effects,!0,r,a),[,h]=t(e.text);return m.bindTextInfo(i,h),m._vertexBoundsScale=e.maxVVSize?e.maxVVSize/n:1,m}}export{p as default};
