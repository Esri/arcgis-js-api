/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isSome as t}from"../../../../../../core/maybe.js";import{pt2px as e}from"../../../../../../core/screenUtils.js";import{premultiplyAlphaRGBA as s}from"../../color.js";import{MIN_MAX_ZOOM_PRECISION_FACTOR as i,BITSET_GENERIC_LOCK_COLOR as o,BITSET_FILL_RANDOM_PATTERN_OFFSET as r,BITSET_GENERIC_CONSIDER_ALPHA_ONLY as a,SPRITE_PADDING as l}from"../../definitions.js";import{radToByte as h}from"../../GeometryUtils.js";import{i1616to32 as n,i8888to32 as c}from"../../number.js";import{FillMaterialKey as f}from"../../materialKey/MaterialKey.js";import{isFunction as m,getMinMaxZoom as p}from"./util.js";import _ from"./WGLBaseFillTemplate.js";import y from"./WGLDynamicMeshTemplate.js";import{ok as d}from"../../util/Result.js";class u extends(_(y)){constructor(l,c,p){if(super(l),this._minMaxZoom=n(Math.round(c*i),Math.round(p*i)),m(l.color)){const t=(t,e,i)=>{const o=l.color(t,e,i);return o&&s(o)||0};this._dynamicPropertyMap.set("fillColor",t)}else{const t=l.color;this.fillColor=t&&s(t)||0}const _="CIMMarkerPlacementInsidePolygon"===l.cim.placement?.type&&l.cim.placement.shiftOddRows?2:1,y=l.height;if(m(y)){const t=(t,e,s)=>y(t,e,s)*_;this._dynamicPropertyMap.set("_height",t)}else this._height=(y||0)*_;const d=l.offsetX;if(m(d)){const t=(t,s,i)=>e(d(t,s,i));this._dynamicPropertyMap.set("_offsetX",t)}else this._offsetX=e(d||0);const u=l.offsetY;if(m(u)){const t=(t,s,i)=>e(-u(t,s,i));this._dynamicPropertyMap.set("_offsetY",t)}else this._offsetY=e(-u||0);const M=l.scaleX;m(M)?this._dynamicPropertyMap.set("_scaleX",M):this._scaleX=M||1;const g=l.angle;if(m(g)){const t=(t,e,s)=>h(g(t,e,s));this._dynamicPropertyMap.set("_angle",t)}else this._angle=h(g)||0;if(t(l.effects)){const t=l.effects;m(t)?this._dynamicPropertyMap.set("_effects",t):this._effects=t}this._cimFillLayer=l,this._bitset=(l.colorLocked?o:0)|(l.applyRandomOffset?r:0)|(l.sampleAlphaOnly?a:0),this._fillMaterialKey=f.load(l.materialKey)}static fromCIMFill(t,e){const[s,i]=p(t.scaleInfo,e);return new u(t,s,i)}bindFeature(t,s,i){const o=t.readLegacyFeature();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(o,s,i)}));const r=this._fillMaterialKey,a=this._materialCache,h=(0,this._cimFillLayer.materialHash)(o,s,i),f=a.get(h);let m=null;if(f&&d(f.spriteMosaicItem)&&(m=f.spriteMosaicItem),m){const{rect:t,width:s,height:i}=m,o=t.x+l,a=t.y+l,h=o+s,f=a+i;let p=Math.round(e(this._height));p<=0&&(p=f-a);let _=Math.round(e(this._height/i*s||0));_<=0&&(_=h-o);const y=this._scaleX,d=1;this.tl=n(o,a),this.br=n(h,f),this.aux2_1=n(_,p),this.aux2_2=n(this._offsetX,this._offsetY),this.aux3=c(y,d,this._angle,0),r.sdf=m.sdf,r.pattern=!0,r.textureBinding=m.textureBinding}else this.tl=0,this.br=0,this.aux2_1=0,this.aux2_2=0,this.aux3=0,r.sdf=!1,r.pattern=!1,r.textureBinding=0;this._materialKey=r.data}}export{u as default};
