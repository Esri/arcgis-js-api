/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../../../../../core/Error.js";import e from"../../../../../../core/Logger.js";import{isSome as i,unwrapOr as s}from"../../../../../../core/maybe.js";import{pt2px as r}from"../../../../../../core/screenUtils.js";import{c as o}from"../../../../../../chunks/mat2df32.js";import{c as a}from"../../../../../../chunks/vec2f32.js";import{Alignment as h}from"../../../../../../symbols/cim/enums.js";import{premultiplyAlphaRGBA as c}from"../../color.js";import{MIN_MAX_ZOOM_PRECISION_FACTOR as n,SPRITE_PADDING as m}from"../../definitions.js";import{i1616to32 as l,i8888to32 as f}from"../../number.js";import{MarkerMaterialKey as _}from"../../materialKey/MaterialKey.js";import{isFunction as p,getMinMaxZoom as y}from"./util.js";import d from"./WGLBaseMarkerTemplate.js";import M from"./WGLDynamicMeshTemplate.js";import{ok as u}from"../../util/Result.js";const g=a(),k=o(),P=e.getLogger("esri.views.2d.engine.webgl.WGLDynamicMarkerTemplate");class L extends(d(M)){constructor(t,e,o){super(t),this._cimMarkerLayer=t,this._minMaxZoom=l(Math.round(e*n),Math.round(o*n));const a=t.color;if(p(a)){const t=(t,e,i)=>c(a(t,e,i));this._dynamicPropertyMap.set("_fillColor",t)}else this._fillColor=c(a);const m=t.outlineColor;if(p(m)){const t=(t,e,i)=>c(m(t,e,i));this._dynamicPropertyMap.set("_outlineColor",t)}else this._outlineColor=c(m);const f=t.size;if(p(f)){const t=(t,e,i)=>r(f(t,e,i));this._dynamicPropertyMap.set("_size",t)}else this._size=r(f)||0;const _=t.scaleX;p(_)?this._dynamicPropertyMap.set("_scaleX",_):this._scaleX=_||1;const y=t.offsetX;if(p(y)){const t=(t,e,i)=>r(y(t,e,i));this._dynamicPropertyMap.set("xOffset",t)}else this.xOffset=r(y)||0;const d=t.offsetY;if(p(d)){const t=(t,e,i)=>r(d(t,e,i));this._dynamicPropertyMap.set("yOffset",t)}else this.yOffset=r(d)||0;const M=t.outlineWidth;if(p(M)){const t=(t,e,i)=>r(M(t,e,i));this._dynamicPropertyMap.set("_outlineWidth",t)}else this._outlineWidth=r(M)||0;const u=t.rotation;if(p(u)?this._dynamicPropertyMap.set("_angle",u):this._angle=u||0,i(t.effects)){const e=t.effects;p(e)?this._dynamicPropertyMap.set("_effects",e):this._effects=e}if(i(t.markerPlacement)){const e=t.markerPlacement;p(e)?this._dynamicPropertyMap.set("_markerPlacement",e):this._markerPlacement=e}this._scaleFactor=s(t.scaleFactor,1),this._bitSet=(t.alignment===h.MAP?1:0)|(t.colorLocked?1:0)<<1|(t.scaleSymbolsProportionally?1:0)<<3,this._materialKey=t.materialKey}static fromCIMMarker(t,e){const[i,s]=y(t.scaleInfo,e);return new L(t,i,s)}bindFeature(e,i,s){const o=e.readLegacyFeature(),a=e.getObjectId();this._dynamicPropertyMap.forEach(((t,e)=>{this[e]=t(o,i,s)}));const h=this._cimMarkerLayer.materialHash,c="function"==typeof h?h(o,i,s,a):h,n=this._materialCache.get(c);if(!n||!u(n.spriteMosaicItem)||!n.spriteMosaicItem)return void P.error(new t("mapview-cim","Encountered an error when binding feature"));const p=n.spriteMosaicItem,y=this._cimMarkerLayer.sizeRatio,d=p.width/p.height*this._scaleX,M=this._cimMarkerLayer.rotateClockwise?this._angle:-this._angle;let L=this._size,x=L*d;const j=this.xOffset,b=this.yOffset;this.xOffset*=this._scaleFactor,this.yOffset*=this._scaleFactor;const w=this._cimMarkerLayer.scaleSymbolsProportionally&&this._cimMarkerLayer.frameHeight?this._size/r(this._cimMarkerLayer.frameHeight):1,O=this._outlineWidth*w,z=r(this._cimMarkerLayer.referenceSize);let W=0,C=0;const F=this._cimMarkerLayer.anchorPoint;F&&(this._cimMarkerLayer.isAbsoluteAnchorPoint?this._size&&(W=-F.x/(this._size*d),C=F.y/this._size):(W=F.x,C=F.y)),this._sizeOutlineWidth=f(Math.round(Math.min(Math.sqrt(128*x),255)),Math.round(Math.min(Math.sqrt(128*L),255)),Math.round(Math.min(Math.sqrt(128*O),255)),Math.round(Math.min(Math.sqrt(128*z),255))),this.angle=M;const I=Math.round(64*y);this._bitestAndDistRatio=l(this._bitSet,I);const K=p.rect.x+m,X=p.rect.y+m,B=K+p.width,R=X+p.height;this._texUpperLeft=l(K,X),this._texUpperRight=l(B,X),this._texBottomLeft=l(K,R),this._texBottomRight=l(B,R);const S=_.load(this._materialKey);S.sdf=p.sdf,S.pattern=!0,S.textureBinding=p.textureBinding,this._materialKey=S.data,this._anchorX=.5-(.5+W)*p.width/p.width,this._anchorY=.5-(.5+C)*p.height/p.height,x*=y,L*=y,x*=this._scaleFactor,L*=this._scaleFactor,x*=p.rect.width/p.width,L*=p.rect.height/p.height,this._computedWidth=x,this._computedHeight=L,this._applyTransformation(k,g),this.xOffset=j,this.yOffset=b}}export{L as default};
