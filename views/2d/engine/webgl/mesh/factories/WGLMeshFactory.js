/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import"../../../../../../core/has.js";import{isSome as e}from"../../../../../../core/maybe.js";import{isAborted as t}from"../../../../../../core/promiseUtils.js";import{loadLibtess as r}from"../../../../../../geometry/libtess.js";import{isAggregateId as s}from"../../DisplayId.js";import i from"../templates/WGLLabelTemplate.js";import o from"../templates/WGLMarkerTemplate.js";import{isDynamicId as a}from"../templates/WGLTemplateStore.js";class l{constructor(e,t,s){this._loadPromise=r(),this._geometryType=e,this._idField=t,this._templateStore=s}update(t,r){e(t.mesh.labels)&&(this._labelTemplates=this._createLabelTemplates(t.mesh.labels,r)),this._schema=t}_createLabelTemplates(e,t){const r=new Map;if("simple"===e.type){for(const s of e.classes){const e=i.fromLabelClass(s,t);r.set(s.index,e)}return r}for(const s in e.classes){const o=e.classes[s];for(const e of o){const s=i.fromLabelClass(e,t);r.set(e.index,s)}}return r}get templates(){return this._templateStore}async analyze(r,i,o,l,n,m,p){if(t(p))return;let f;"dictionary"===o.type&&(f=await o.analyze(this._idField,r.copy(),i,n,m,p));let c=0;for(;r.next();){let t;if(t=f?f[c++]:e(l)&&s(r.getDisplayId())&&1!==r.readAttribute("cluster_count")?l.match(this._idField,r,this._geometryType,n,m):o.match(this._idField,r,this._geometryType,n,m),r.setGroupId(t),a(t)){const e=this._templateStore.getDynamicTemplateGroup(t);for(const t of e)t&&t.analyze&&t.analyze(this._templateStore,r,n,m)}}return await this._loadPromise,this._templateStore.finalize(p)}async analyzeGraphics(e,r,s,i,o,l){if(t(l))return;const n=e.getCursor();for(s&&await s.analyze(this._idField,n.copy(),r,i,o,l);n.next();){let e=n.getGroupId();if(null!=e&&-1!==e||(e=s.match(this._idField,n,n.geometryType,i,o),n.setGroupId(e)),a(e)){const t=this._templateStore.getDynamicTemplateGroup(e);for(const e of t)e&&e.analyze&&e.analyze(this._templateStore,n,i,o)}n.setGroupId(e)}return await this._loadPromise,this._templateStore.finalize(l)}writeGraphic(e,t,r,s){const i=t.getGroupId(),o=t.getDisplayId(),l=this._templateStore.getTemplateGroup(i);if(e.featureStart(t.insertAfter,0),null!=o){if(a(i))for(const e of l)e&&e.bindFeature(t,null,null);if(l){for(const i of l)i&&i.write(e,t,r,s);e.featureEnd()}}}writeCursor(t,r,s,i,o,l,n){const m=r.getGroupId(),p=r.getDisplayId(),f=this._templateStore.getTemplateGroup(m),c=this._schema.mesh.sortKey;let d=0;if(e(c)&&(d=null!=c.fieldIndex?r.getComputedNumericAtIndex(c.fieldIndex):null!=c.field?r.readAttribute(c.field):r.readAttribute(this._idField),d*="asc"===c.order?1:-1),t.featureStart(0,null==d||isNaN(d)?0:d),null!=p&&f){if(a(m))for(const e of f)e.bindFeature(r,s,i);for(const e of f)e.write(t,r,o,n);if(e(l)&&t.hasRecords){const e=l&&this._findLabelRef(f);this._writeLabels(t,r,l,e,o,n)}t.featureEnd()}}_findLabelRef(e){for(const t of e)if(t instanceof o)return t;return null}_writeLabels(t,r,s,i,o,a){for(const l of s)if(e(l)&&l){const{glyphs:e,rtl:s,index:n}=l,m=this._labelTemplates.get(n);m.setZoomLevel(o),m.bindReferenceTemplate(i),m.bindTextInfo(e,s),m.write(t,r,null,a)}}}export{l as WGLMeshFactory};
