/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../core/Accessor.js";import{property as s}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as r}from"../../../core/accessorSupport/decorators/subclass.js";import{j as o}from"../../../chunks/vec2.js";import{QueueProcessor as i}from"../../support/QueueProcessor.js";function n(e,t){return e.length=0,t.forEach((t=>e.push(t))),e}const u=new Set,c=[],a=new Map,h=[0,0];let l=class extends t{constructor(e){super(e),this._keyToItem=new Map,this.concurrency=6,this.strategy="scale-first",this.tileInfoView=null}initialize(){const{concurrency:e,process:t,strategy:s}=this;this._queue=new i({concurrency:e,process:(e,s)=>{const r=this._keyToItem.get(e);return t(r,{signal:s})},peeker:"scale-first"===s?e=>this._peekByScaleFirst(e):e=>this._peekByCenterFirst(e)})}destroy(){this.clear(),this._queue.destroy(),this._queue=null}get length(){return this._queue?this._queue.length:0}get onGoingCount(){return this._keyToItem.size}get updating(){return this.length>0||this.onGoingCount>0}abort(e){const t="string"==typeof e?e:e.id;this._queue.abort(t)}clear(){this._queue.clear(),this._keyToItem.clear(),this.notifyChange("updating")}has(e){return"string"==typeof e?this._keyToItem.has(e):this._keyToItem.has(e.id)}isOngoing(e){const t="string"==typeof e?e:e.id;return this.has(t)&&this._queue.isOngoing(t)}pause(){this._queue.pause()}push(e){const t=e.key.id;if(this._queue.has(t))return this._queue.get(t);const s=this._queue.push(t),r=()=>{this._keyToItem.delete(t),this.notifyChange("updating")};return this._keyToItem.set(t,e),s.then(r,r),this.notifyChange("updating"),s}reset(){this._queue.reset()}resume(){this._queue.resume()}_peekByScaleFirst(e){if(!this.state)return e.values().next().value;const t=this.tileInfoView;let s=Number.NEGATIVE_INFINITY,r=Number.POSITIVE_INFINITY;e.forEach((e=>{const t=this._keyToItem.get(e),o=this.tileInfoView.getTileScale(t.key);a.has(o)||(a.set(o,[]),s=Math.max(o,s),r=Math.min(o,r)),a.get(o).push(t.key),u.add(o)}));let o=this.state.scale;a.has(o)||(n(c,u),c.sort(((e,t)=>e-t)),o=c.reduce(((e,t)=>Math.abs(t-o)<Math.abs(e-o)?t:e),c[0])),o=Math.min(o,s),o=Math.max(o,r);const i=a.get(o),h=t.getClosestInfoForScale(o),l=h.getColumnForX(this.state.center[0]),p=h.getRowForY(this.state.center[1]);return i.sort(((e,t)=>{const s=h.denormalizeCol(e.col,e.world),r=h.denormalizeCol(t.col,t.world);return Math.sqrt((l-s)*(l-s)+(p-e.row)*(p-e.row))-Math.sqrt((l-r)*(l-r)+(p-t.row)*(p-t.row))})),u.clear(),a.clear(),i[0].id}_peekByCenterFirst(e){if(!this.state)return e.values().next().value;const t=this.tileInfoView,s=this.state.center;let r=Number.POSITIVE_INFINITY,i=null;return e.forEach((e=>{const n=this._keyToItem.get(e);t.getTileCoords(h,n.key);const u=o(h,s);u<r&&(r=u,i=n.key)})),i.id}};e([s({constructOnly:!0})],l.prototype,"concurrency",void 0),e([s({constructOnly:!0})],l.prototype,"process",void 0),e([s()],l.prototype,"state",void 0),e([s({constructOnly:!0})],l.prototype,"strategy",void 0),e([s({constructOnly:!0})],l.prototype,"tileInfoView",void 0),e([s({readOnly:!0})],l.prototype,"updating",null),l=e([r("esri.views.2d.tiling.TileQueue")],l);const p=l;export{p as default};
