/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../core/Error.js";import{isSome as r,isNone as t}from"../../core/maybe.js";function s(){return Promise.all([import("./webglDeps.js"),import("./mapViewDeps.js")])}const a=()=>s().then((()=>import("./layers/TileLayerView2D.js"))),i=()=>s().then((()=>import("./layers/FeatureLayerView2D.js"))),o={"base-dynamic":()=>s().then((()=>import("./layers/BaseDynamicLayerView2D.js"))),"base-tile":a,"bing-maps":a,csv:i,"geo-rss":()=>s().then((()=>import("./layers/GeoRSSLayerView2D.js"))),feature:i,geojson:i,graphics:()=>s().then((()=>import("./layers/GraphicsLayerView2D.js"))),group:()=>s().then((()=>import("./layers/GroupLayerView2D.js"))),imagery:()=>s().then((()=>import("./layers/ImageryLayerView2D.js"))),"imagery-tile":()=>s().then((()=>import("./layers/ImageryTileLayerView2D.js"))),kml:()=>s().then((()=>import("./layers/KMLLayerView2D.js"))),"map-image":()=>s().then((()=>import("./layers/MapImageLayerView2D.js"))),"map-notes":()=>s().then((()=>import("./layers/MapNotesLayerView2D.js"))),media:()=>s().then((()=>import("./layers/MediaLayerView2D.js"))),"ogc-feature":()=>s().then((()=>import("./layers/OGCFeatureLayerView2D.js"))),"open-street-map":a,route:()=>s().then((()=>import("./layers/RouteLayerView2D.js"))),stream:()=>s().then((()=>import("./layers/StreamLayerView2D.js"))),"subtype-group":()=>s().then((()=>import("./layers/SubtypeGroupLayerView2D.js"))),tile:a,"vector-tile":()=>s().then((()=>import("./layers/VectorTileLayerView2D.js"))),wcs:()=>s().then((()=>import("./layers/ImageryTileLayerView2D.js"))),"web-tile":a,wfs:i,wms:()=>s().then((()=>import("./layers/WMSLayerView2D.js"))),wmts:()=>s().then((()=>import("./layers/WMTSLayerView2D.js"))),"line-of-sight":null,"base-elevation":null,"building-scene":null,elevation:null,"integrated-mesh":null,"point-cloud":null,voxel:null,scene:null,unknown:null,unsupported:null};function l(r){const t=r.declaredClass?r.declaredClass.slice(r.declaredClass.lastIndexOf(".")+1):"Unknown",s=t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase();return new e(`${s}:view-not-supported`,`${t} is not supported in 2D`)}const n={hasLayerViewModule:e=>r(o[e.type]),importLayerView:e=>{const r=o[e.type];if(t(r))throw l(e);return r(e)}};export{n as layerView2DImporter};
