/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/has","../../../core/maybe","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass","../../../core/urlUtils","../../../core/uuid","../../../portal/support/resourceExtension","../../../geometry/SpatialReference","../../../geometry/support/webMercatorUtils","../../../geometry/Extent","../../../core/Collection","../../../kernel","../../../request","../../../core/Handles","../../../geometry/projection","../../../rest/utils","../../../support/GraphicsCollection","../../../layers/support/kmlUtils","../../layers/LayerView","./graphics/GraphicsView2D","./graphics/GraphicContainer","../engine/Bitmap","../engine/BitmapContainer","./LayerView2D"],(function(e,i,t,s,a,o,l,n,r,h,p,c,u,y,d,m,g,w,_,V,b,f,v,S,I,P,C,k){"use strict";let x=function(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]},M=function(i){function t(){var e;return(e=i.apply(this,arguments)||this)._handles=new w,e._bitmapIndex=new Map,e._mapImageContainer=new C.BitmapContainer,e._kmlVisualData=new x,e.allVisiblePoints=new b.GraphicsCollection,e.allVisiblePolylines=new b.GraphicsCollection,e.allVisiblePolygons=new b.GraphicsCollection,e.allVisibleMapImages=new d,e}e._inheritsLoose(t,i);var a=t.prototype;return a.hitTest=function(e,i){if(this.suspended||!this._pointsView&&!this._polylinesView&&!this._polygonsView)return Promise.resolve(null);const t=[this._pointsView.hitTest(e,i),this._polylinesView.hitTest(e,i),this._polygonsView.hitTest(e,i)];return Promise.all(t).then((e=>e.filter((e=>(e&&(e.layer=this.layer,e.sourceLayer=this.layer),!!e)))[0]||null))},a.update=function(e){this._polygonsView&&this._polygonsView.processUpdate(e),this._polylinesView&&this._polylinesView.processUpdate(e),this._pointsView&&this._pointsView.processUpdate(e)},a.attach=function(){this._handles.add([this.allVisibleMapImages.on("change",(e=>{e.added.forEach((e=>this._addMapImage(e))),e.removed.forEach((e=>this._removeMapImage(e)))}))]),this.container.addChild(this._mapImageContainer),this._polygonsView=new S({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new I(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new S({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new I(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new S({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new I(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.watch("layer.visibleSublayers",(e=>{for(const[i,t]of this._kmlVisualData.allSublayers)t.visibility=0;for(const i of e){const e=this._kmlVisualData.allSublayers.get(i.id);e&&(e.visibility=1)}this._refreshCollections()})),this._fetchingPromise=this._fetchService().then((()=>{this._fetchingPromise=null,this.notifyChange("updating")}))},a.detach=function(){this._handles.removeAll(),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)},a.moveStart=function(){},a.viewChange=function(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()},a.moveEnd=function(){},a.isUpdating=function(){return null!=this._fetchingPromise||this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating},a._addMapImage=function(e){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&g(e.href,{responseType:"image"}).then((({data:i})=>{let t=y.fromJSON(e.extent);u.canProject(t,this.view.spatialReference)&&(t=u.project(t,this.view.spatialReference));const s=new P.Bitmap(i,"standard");s.x=t.xmin,s.y=t.ymax,s.resolution=t.width/i.naturalWidth,s.rotation=e.rotation,this._mapImageContainer.addChild(s),this._bitmapIndex.set(e,s)}))},a._getViewDependentUrl=async function(e,i){const{viewFormat:t,viewBoundScale:a,httpQuery:o}=e;if(s.isSome(t)){if(s.isNone(i))throw new Error("Loading this network link requires a view state.");let l;if(await _.load(),s.isSome(a)&&1!==a){const e=new y(i.extent);e.expand(a),l=e}else l=i.extent;l=_.project(l,c.WGS84);const n=_.project(l,c.WebMercator),h=l.xmin,p=l.xmax,u=l.ymin,d=l.ymax,g=i.size[0]*i.pixelRatio,w=i.size[1]*i.pixelRatio,b=Math.max(n.width,n.height),f={"[bboxWest]":h.toString(),"[bboxEast]":p.toString(),"[bboxSouth]":u.toString(),"[bboxNorth]":d.toString(),"[lookatLon]":l.center.x.toString(),"[lookatLat]":l.center.y.toString(),"[lookatRange]":b.toString(),"[lookatTilt]":"0","[lookatHeading]":i.rotation.toString(),"[lookatTerrainLon]":l.center.x.toString(),"[lookatTerrainLat]":l.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":l.center.x.toString(),"[cameraLat]":l.center.y.toString(),"[cameraAlt]":b.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":g.toString(),"[vertPixels]":w.toString(),"[terrainEnabled]":"0","[clientVersion]":m.version,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},v=e=>{for(const i in e)for(const t in f)e[i]=e[i].replace(t,f[t])},S=r.queryToObject(t);v(S);let I={};s.isSome(o)&&(I=r.queryToObject(o),v(I));const P=V.parseUrl(e.href);P.query={...P.query,...S,...I};return`${P.path}?${r.objectToQuery(S)}`}return e.href},a._fetchService=async function(){const e=new x;await this._loadVisualData(this.layer.url,e),this._kmlVisualData=e,this._refreshCollections()},a._refreshCollections=function(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e))),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e=>this._isSublayerVisible(e.sublayerId))).map((({item:e})=>e)))},a._isSublayerVisible=function(e){const i=this._kmlVisualData.allSublayers.get(e);return!!i.visibility&&(-1===i.parentFolderId||this._isSublayerVisible(i.parentFolderId))},a._loadVisualData=function(e,i){return this._fetchParsedKML(e).then((async e=>{for(const t of e.sublayers){i.allSublayers.set(t.id,t);const e=t.points?await f.getGraphics(t.points):[],s=t.polylines?await f.getGraphics(t.polylines):[],a=t.polygons?await f.getGraphics(t.polygons):[],o=t.mapImages||[];if(i.allPoints.push(...e.map((e=>({item:e,sublayerId:t.id})))),i.allPolylines.push(...s.map((e=>({item:e,sublayerId:t.id})))),i.allPolygons.push(...a.map((e=>({item:e,sublayerId:t.id})))),i.allMapImages.push(...o.map((e=>({item:e,sublayerId:t.id})))),t.networkLink){const e=await this._getViewDependentUrl(t.networkLink,this.view.state);await this._loadVisualData(e,i)}}}))},a._fetchParsedKML=function(e){return f.fetchService(e,this.view.spatialReference,this.layer.refreshInterval).then((e=>f.parseKML(e.data)))},a._removeMapImage=function(e){const i=this._bitmapIndex.get(e);i&&(this._mapImageContainer.removeChild(i),this._bitmapIndex.delete(e))},t}(k.LayerView2DMixin(v));return i.__decorate([l.property()],M.prototype,"_pointsView",void 0),i.__decorate([l.property()],M.prototype,"_polylinesView",void 0),i.__decorate([l.property()],M.prototype,"_polygonsView",void 0),i.__decorate([l.property()],M.prototype,"_fetchingPromise",void 0),i.__decorate([l.property()],M.prototype,"updating",void 0),M=i.__decorate([n.subclass("esri.views.2d.layers.KMLLayerView2D")],M),M}));
