/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/has","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass","../../../core/urlUtils","../../../core/uuid","../../../portal/support/resourceExtension","../../../geometry/support/coordsUtils","../../../geometry/support/aaBoundingRect","../../../core/libs/earcut/earcut","../../layers/RefreshableLayerView","../../../layers/graphics/data/projectionSupport","../tiling/TileKey","../tiling/PagedTileQueue","../tiling/TileInfoView","../tiling/TileQueue","../tiling/TileStrategy","../../layers/LayerView","./support/util","../engine/webgl/TurboLine","./graphics/graphicsUtils","./LayerView2D","./support/DisplayGL"],(function(e,t,s,r,i,n,o,c,a,l,u,f,h,d,p,y,x,g,v,T,w,_,m,O,b,R){"use strict";const M=new Set,S=[],L=[];let j=function(e,t,s,r,i,n,o,c=[0,0],a=f.create()){this.id=e,this.level=t,this.row=s,this.col=r,this.world=i,this.resolution=n,this.scale=o,this.coords=c,this.bounds=a},z=function(t){function s(s){var r;return(r=t.call(this,s)||this)._tileMap=new Map,r.container=new R.DisplayGL(e._assertThisInitialized(r)),r.layer=null,r.tiles=[],r._renderTarget={framebufferObject:null,viewport:[0,0,0,0]},r}e._inheritsLoose(s,t);var r=s.prototype;return r.attach=function(){},r.detach=function(){},r.requestRender=function(){this.container.requestRender()},r.tilesChanged=function(e,t){},r.doRefresh=async function(){},r.isUpdating=function(){return!1},r.update=function(e){const t=this._tileInfoView,s=this.tiles;if(t){const r=t.getTileCoverage(e.state,0),{spans:i,lodInfo:n}=r,{level:o}=n;if(i.length)for(const{row:e,colFrom:t,colTo:r}of i)for(let i=t;i<=r;i++){const t=n.normalizeCol(i),r=n.getWorldForColumn(i),c=`${o}/${e}/${t}/${r}`;if(!this._tileMap.has(c)){const i=new j(c,o,e,t,r,n.resolution,n.scale);n.getTileCoords(i.coords,i,!1),n.getTileBounds(i.bounds,i,!0),this._tileMap.set(c,i),s.push(i),S.push(i)}M.add(c)}}for(let e=s.length-1;e>=0;e--){const t=s[e];M.has(t.id)||(s.splice(e,1),L.push(t),this._tileMap.delete(t.id))}(S.length||L.length)&&(this.tilesChanged(S,L),S.length=L.length=0),M.clear(),this.requestRender()},r.moveStart=function(){},r.viewChange=function(){this.requestUpdate()},r.moveEnd=function(){},r.bindRenderTarget=function(){this.context.bindFramebuffer(this.context.FRAMEBUFFER,this._renderTarget.framebufferObject),this.context.viewport(this._renderTarget.viewport[0],this._renderTarget.viewport[1],this._renderTarget.viewport[2],this._renderTarget.viewport[3])},r.getRenderTarget=function(){return this._renderTarget},r.tessellateExtent=async function(e){const t={vertices:[],indices:[]},s=await this._projectAndNormalizeGeometry(e),r=t.vertices.length;return t.vertices.push({x:s.xmin,y:s.ymin,xOffset:0,yOffset:0,uTexcoord:0,vTexcoord:0,distance:0}),t.vertices.push({x:s.xmax,y:s.ymin,xOffset:0,yOffset:0,uTexcoord:1,vTexcoord:0,distance:0}),t.vertices.push({x:s.xmin,y:s.ymax,xOffset:0,yOffset:0,uTexcoord:0,vTexcoord:1,distance:0}),t.vertices.push({x:s.xmax,y:s.ymax,xOffset:0,yOffset:0,uTexcoord:1,vTexcoord:1,distance:0}),t.indices.push(r+0,r+1,r+2,r+1,r+3,r+2),t},r.tessellatePoint=async function(e,t){const s=await this._projectAndNormalizeGeometry(e);return this._tessellatePoints([s],t)},r.tessellateMultipoint=async function(e,t){const s=await this._projectAndNormalizeGeometry(e),r=s.points.map((e=>({x:e[0],y:e[1],spatialReference:s.spatialReference})));return this._tessellatePoints(r,t)},r._tessellatePoints=async function(e,t){const s={vertices:[],indices:[]};for(const r of e){const e=s.vertices.length;s.vertices.push({x:r.x,y:r.y,xOffset:t.x,yOffset:t.y+t.height,uTexcoord:0,vTexcoord:0,distance:0}),s.vertices.push({x:r.x,y:r.y,xOffset:t.x+t.width,yOffset:t.y+t.height,uTexcoord:1,vTexcoord:0,distance:0}),s.vertices.push({x:r.x,y:r.y,xOffset:t.x,yOffset:t.y,uTexcoord:0,vTexcoord:1,distance:0}),s.vertices.push({x:r.x,y:r.y,xOffset:t.x+t.width,yOffset:t.y,uTexcoord:1,vTexcoord:1,distance:0}),s.indices.push(e+0,e+1,e+2,e+1,e+3,e+2)}return s},r.tessellatePolyline=async function(e,t){const s={vertices:[],indices:[]},r=(await this._projectAndNormalizeGeometry(e)).paths;if(!r||!r.length)return s;let i;const n=new m.StandardTessellationCallbacks(((e,r,n,o,c,a,l,u,f)=>{const h=s.vertices.length;return s.vertices.push({x:e,y:-r,xOffset:c*t/2,yOffset:a*t/2,uTexcoord:f/i,vTexcoord:(u+1)/2,distance:f}),h}),((e,t,r)=>{s.indices.push(e,t,r)}));for(const e of r){i=0;for(let t=1;t<e.length;++t){const s=e[t][0]-e[t-1][0],r=e[t][1]-e[t-1][1];i+=Math.sqrt(s*s+r*r)}const t=e.map((e=>({x:e[0],y:-e[1]})));m.tessellate(t,C,n)}return s},r.tessellatePolygon=async function(e){const t={vertices:[],indices:[]},s=await this._projectAndNormalizeGeometry(e),r=s.rings;if(!r||!r.length)return t;u.closeRings(s);for(const e of s.rings)for(const t of e)t[1]=-t[1];let i=1/0,n=1/0,o=-1/0,c=-1/0;return _.analyzeRings(s.rings,(()=>{}),((e,t,s)=>{for(let r=e;r<t;r+=2)i=Math.min(i,s[r]),n=Math.min(n,s[r+1]),o=Math.max(o,s[r]),c=Math.max(c,s[r+1])})),_.analyzeRings(s.rings,(()=>{}),((e,s,r,a)=>{this._invokeEarcut(t,e,s,r,a,[i,n,o,c])})),t},r._invokeEarcut=function(e,t,s,r,i,n){const o=r.slice(t,s),c=h.earcut(o,i,2),a=e.vertices.length;for(let t=0;t<o.length;t+=2){const s=o[t],r=o[t+1];e.vertices.push({x:s,y:-r,xOffset:0,yOffset:0,uTexcoord:(s-n[0])/(n[2]-n[0]),vTexcoord:1-(r-n[1])/(n[3]-n[1]),distance:0})}for(let t=0;t<c.length;++t)e.indices.push(a+c[t])},r._projectAndNormalizeGeometry=async function(e){await p.checkProjectionSupport(e.spatialReference,this.view.spatialReference);const t=O.normalizeCentralMeridian(e);return p.project(t,e.spatialReference,this.view.spatialReference)},e._createClass(s,[{key:"_tileInfoView",get:function(){const e=this.layer&&this.layer.tileInfo;return e?new g(e):null}},{key:"context",get:function(){return this.view._stage.context.gl}}]),s}(d.RefreshableLayerView(b.LayerView2DMixin(w)));t.__decorate([n.property({dependsOn:["layer.loaded"]})],z.prototype,"_tileInfoView",null),t.__decorate([n.property()],z.prototype,"layer",void 0),t.__decorate([n.property({dependsOn:["view"]})],z.prototype,"context",null),z=t.__decorate([o.subclass("esri.views.2d.layers.BaseLayerViewGL2D")],z);const C={trackDistance:!0,wrapDistance:1e11,thin:!1,initialDistance:0,enableOuterBisectorSplit:!0,outerBisectorAutoSplitThreshold:1/3.8,enableInnerBisectorSplit:!0,innerBisectorAutoSplitThreshold:1/3.8};return z}));
