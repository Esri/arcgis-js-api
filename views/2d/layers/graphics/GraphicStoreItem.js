/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../core/maybe","../../../../geometry/support/centroid","../../../../geometry/support/jsonUtils","../../../../geometry/support/aaBoundingRect","../../../../layers/graphics/OptimizedGeometry","../../../../layers/graphics/featureConversionUtils","../../../../geometry/support/quantizationUtils","./graphicsUtils"],(function(e,t,o,s,i,n,r,l,u){"use strict";const h=new n,y=new n,a="esriGeometryPolyline";function g(e){e.coords.length=0,e.lengths.length=0}let c=function(){function n(){this.bounds=i.create(),this.graphic=null,this.size=[0,0,0,0]}n.acquire=function(e=null,t,o,s,i,r){let l;return 0===n._pool.length?l=new n:(l=n._pool.pop(),this._set.delete(l)),l.acquire(e,t,o,s,i,r),l},n.release=function(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))},n.getCentroidQuantized=function(e,i){if(s.isPolygon(e.geometry)){const s=e.symbol;if(t.isNone(s))return null;if(u.isMarkerSymbol(s.type)||u.isTextSymbol(s.type)){const t=o.polygonCentroid(e.geometry);return l.quantizePoint(i,{},{x:t[0],y:t[1]},!1,!1)}}return null};var c=n.prototype;return c.acquire=function(e=null,t,o,s,i,n){e&&this.set(e,t,o,s,i,n)},c.release=function(){this.graphic=null,this.symbolResource=null,this.geometry=null},c.set=function(e,t,o,s,i,n){this.graphic=e,this.geometry=o,this.symbolResource=t,this.updateBounds(s,i,n)},c.updateBounds=function(e,t,o){u.getBounds(this.bounds,this.size,this.symbolResource,this.geometry,e,t,o)},c.getGeometryQuantized=function(e){if(s.isPolygon(this.geometry)){const t=this.geometry.rings;if(1===t.length&&2===t[0].length)return l.quantizeGeometry(e,{paths:[[t[0][0],t[0][1]]]})}else if(s.isPolyline(this.geometry))return g(h),g(y),r.convertFromPolyline(h,this.geometry),r.generalizeOptimizedGeometry(y,h,this.geometry.hasZ,this.geometry.hasM,a,e.scale[0]),r.quantizeOptimizedGeometry(h,y,this.geometry.hasZ,this.geometry.hasM,a,e),r.convertToPolyline(h,this.geometry.hasZ,this.geometry.hasM);return l.quantizeGeometry(e,this.geometry)},e._createClass(n,[{key:"symbol",get:function(){return this.symbolResource.symbol}}]),n}();return c._pool=[],c._set=new Set,c}));
