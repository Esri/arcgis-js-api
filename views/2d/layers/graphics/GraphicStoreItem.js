/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../core/maybe","../../../../geometry/support/aaBoundingRect","../../../../geometry/support/centroid","../../../../geometry/support/jsonUtils","../../../../geometry/support/normalizeUtilsCommon","../../../../geometry/support/quantizationUtils","../../../../layers/graphics/featureConversionUtils","../../../../layers/graphics/OptimizedGeometry","./graphicsUtils"],(function(e,t,i,n,s,o,r,l,u,a){"use strict";const h=new u,c=new u,y="esriGeometryPolyline";function p(e){e.coords.length=0,e.lengths.length=0}let g=function(){function u(){this.bounds=i.create(),this.graphic=null}u.acquire=function(e=null,t,i,n,s){let o;return 0===u._pool.length?o=new u:(o=u._pool.pop(),this._set.delete(o)),o.acquire(e,t,i,n,s),o},u.release=function(e){e&&!this._set.has(e)&&(e.release(),this._pool.push(e),this._set.add(e))},u.getCentroidQuantized=function(e,i){if(s.isPolygon(e.geometry)){const s=e.symbol;if(t.isNone(s))return null;if(a.isMarkerSymbol(s.type)||a.isTextSymbol(s.type)){const t=n.polygonCentroid(e.geometry);return r.quantizePoint(i,{},{x:t[0],y:t[1]},!1,!1)}}return null};var g=u.prototype;return g.acquire=function(e=null,t,i,n,s){e&&this.set(e,t,i,n,s)},g.release=function(){this.graphic=null,this.symbolResource=null,this.geometry=null},g.set=function(e,t,i,n,s){this.graphic=e,this.geometry=i,this.symbolResource=t,this.bounds=n,s&&(this.size=s)},g.getGeometryQuantized=function(e,t,n,u){const a=this.geometry;if(s.isPolygon(a)){const t=a.rings;if(1===t.length&&2===t[0].length)return r.quantizeGeometry(e,{paths:[[t[0][0],t[0][1]]]})}else{if(s.isPolyline(a))return p(h),p(c),l.convertFromPolyline(h,a),l.generalizeOptimizedGeometry(c,h,a.hasZ,a.hasM,y,e.scale[0]),l.quantizeOptimizedGeometry(h,c,a.hasZ,a.hasM,y,e),l.convertToPolyline(h,a.hasZ,a.hasM);if(s.isMultipoint(a)){const s=.5*u*Math.max(Math.abs(this.size[0])+this.size[2]-this.size[0],Math.abs(this.size[1])+this.size[3]-this.size[1]),[l,h]=o.getSpatialReferenceMinMaxX(n),c=h-l,y=a.points.filter((e=>{if(e[0]+s>h||e[0]-s<l){const n=[...e];return e[0]+s>h?n[0]-=c:n[0]+=c,i.containsPointWithMargin(t,e,s)||i.containsPointWithMargin(t,n,s)}return i.containsPointWithMargin(t,e,s)}));return 0===y.length?{points:y}:r.quantizeGeometry(e,{points:y})}}return r.quantizeGeometry(e,this.geometry)},e._createClass(u,[{key:"symbol",get:function(){return this.symbolResource.symbol}}]),u}();return g._pool=[],g._set=new Set,g}));
