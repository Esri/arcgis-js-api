/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../../../chunks/_rollupPluginBabelHelpers","../../../../../chunks/tslib.es6","../../../../../core/has","../../../../../core/maybe","../../../../../core/Logger","../../../../../core/accessorSupport/ensureType","../../../../../core/accessorSupport/decorators/property","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/Error","../../../../../core/urlUtils","../../../../../core/uuid","../../../../../portal/support/resourceExtension","../../../../../core/promiseUtils","../../../../../geometry/SpatialReference","../../../../../core/accessorSupport/diffUtils","../../../engine/webgl/definitions","../../../engine/webgl/util/BidiText","../../../engine/webgl/mesh/factories/matcherUtils","../textUtils","../../../engine/webgl/mesh/templates/WGLTemplateStore","../../../engine/webgl/mesh/factories/WGLMeshFactory","../support/AttributeStore","../../../engine/webgl/collisions/CollisionGrid","./BaseProcessor"],(function(e,t,r,s,o,n,i,a,c,l,u,d,h,g,y,p,f,m,_,b,w,S,T,I){"use strict";o.getLogger("esri.views.2d.layers.features.processors.SymbolProcessor");let v=function(t){function o(){var e;return(e=t.apply(this,arguments)||this).type="symbol",e}e._inheritsLoose(o,t);var n=o.prototype;return n.destroy=function(){},n.update=async function(e,t){const s=t.schema.processors[0];if("symbol"!==s.type)return;const o=y.diff(this._schema,s);y.hasDiff(o,"mesh")&&(r("esri-2d-update-debug")&&console.debug("Applying Update - Processor:",o),e.mesh=!0,e.why.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo))},n.onTileData=function(e,t,r){return h.throwIfAborted(r),this._onTileData(e,t,r)},n.onTileError=function(e,t,r){const s=r.signal,o={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",o,{signal:s})},n._createFactory=function(e){const{geometryType:t,objectIdField:r,fields:s}=this.service,o={geometryType:t,fields:s,spatialReference:g.fromJSON(this.spatialReference)},n=new b.WGLTemplateStore(((e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t)),!1);return this._store=n,this._matcher=m.createMatcher(e.mesh.matcher,n,o),new w.WGLMeshFactory(t,r,n)},n._onTileData=async function(e,t,r){const{type:o,addOrUpdate:n,remove:i,end:a}=t;if(!n){const t={type:o,addOrUpdate:null,remove:i,clear:!1,end:a};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},r)}const c=this._processFeatures(e,n,r),l=r.signal;try{const t=await c,r=s.andThen(t,(e=>e.message)),n=s.andThen(t,(e=>e.transferList))||[],u={type:o,addOrUpdate:r,remove:i,clear:!1,end:a},d={transferList:s.unwrap(n)||[],signal:l};return h.throwIfAborted(d),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:u},d)}catch(t){this._handleError(e,t,r)}},n._processFeatures=async function(e,t,r){if(s.isNone(t)||!t.hasFeatures)return null;const o={transform:e.transform,hasZ:!1,hasM:!1},n=this._factory,i={viewingMode:"",scale:e.scale},a=await this._matcher;h.throwIfAborted(r);const c=this._getLabelInfos(e,t);return await n.analyze(t.getCursor(),a,o,i),h.throwIfAborted(r),this._writeFeatureSet(e,t,o,c,n)},n._writeFeatureSet=function(e,t,r,o,n){const i=n.createMeshData(t.getApproximateSize()),a={viewingMode:"",scale:e.scale},c=t.getCursor();for(;c.next();)try{const t=c.getDisplayId(),l=s.isSome(o)?o.get(t):null;n.writeCursor(i,c,r,a,e.level,l)}catch(e){}return this._encodeDisplayData(i)},n._encodeDisplayData=function(e){const t={},r=new Array;return e.encode(t,r),{message:t,transferList:r}},n._handleError=function(e,t,r){if(!h.isAbortError(t)){const s={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",s,{signal:r.signal})}},n._shouldDiscard=function(e,t){switch(this.service.geometryType){case"esriGeometryPoint":{const r=t.readLegacyPointGeometry();return!r||e.checkOverlap(r.x,r.y)}case"esriGeometryPolygon":{const r=t.readLegacyCentroid();return!r||e.checkOverlap(r.x,r.y)}default:return!1}},n._markUsed=function(e,t){switch(this.service.geometryType){case"esriGeometryPoint":{const{x:r,y:s}=t.readLegacyPointGeometry();return e.markUsed(r,s)}case"esriGeometryPolygon":{const{x:r,y:s}=t.readLegacyCentroid();return e.markUsed(r,s)}}},n._getLabelInfos=function(e,t){const r=this._schema.mesh.labels,o=s.andThen(r,(t=>t.filter((t=>function(e,t){return(!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}(t,e.scale)))));if(s.isNone(o)||0===o.length)return null;const n=new Map,i=new T.CollisionGrid(p.COLLISION_EARLY_REJECT_BUCKET_SIZE),a=t.getCursor();for(;a.next();){const e=a.getDisplayId();if(this._shouldDiscard(i,a)){n.has(e)||n.set(e,null);continue}let t=!1;const r=[],s=S.isAggregateId(e),c=s&&1!==a.readAttribute("cluster_count")?"aggregate":"feature";for(const n of o){if(n.target!==c)continue;const o=a.getStorage(),i=s&&"feature"===c?o.getComputedStringAtIndex(a.readAttribute("referenceId"),n.fieldIndex):o.getComputedStringAtIndex(e,n.fieldIndex);if(!i)continue;const l=f.bidiText(i.toString()),u=l[0],d=l[1];this._store.getMosaicItem(n.symbol,_.codepoints(u)).then((e=>{r[n.index]={glyphs:e.glyphMosaicItems,rtl:d,index:n.index}})),t=!0}n.set(e,r),t&&this._markUsed(i,a)}return n},e._createClass(o,[{key:"supportsTileUpdates",get:function(){return!0}}]),o}(I);return v=t.__decorate([a.subclass("esri.views.2d.layers.features.processors.SymbolProcessor")],v),v}));
