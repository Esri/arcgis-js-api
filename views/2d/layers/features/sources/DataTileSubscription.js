/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../../../core/CircularArray.js";import s from"../../../../../core/has.js";import{isSome as t,isNone as r,unwrap as i}from"../../../../../core/maybe.js";import{FeatureSetReaderJSON as d}from"../support/FeatureSetReaderJSON.js";import{UpdateToken as a}from"../support/UpdateToken.js";class o{constructor(s,t){this.requests={done:new Array,stream:new e(10)},this._edits=null,this._abortController=new AbortController,this._version=0,this._done=!1,this.didSend=!1,this.tile=s,this._version=t}get signal(){return this._abortController.signal}get options(){return{signal:this._abortController.signal}}get empty(){return!this.requests.done.length}get edits(){return this._edits}get done(){return this._done}end(){this._done=!0}clear(){this.requests.done=[]}applyUpdate(e){this.requests.done.forEach((s=>s.message.status.unset(e))),this._version=e.version,t(this._edits)&&this._edits.status.unset(e)}add(e){e.message.status=e.message.status??a.empty(),e.message.status.version=this._version,s("esri-2d-update-debug")&&console.debug(this.tile.id,"DataTileSubscription:add",this._version),e.message.end&&this.requests.done.forEach((e=>{t(e.message)&&e.message.end&&(e.message.end=!1)})),this.requests.done.push(e)}edit(e,s){const t=e.getQuantizationTransform(),o=e.fullSchema(),n=Array.from(e.features()),h=[...s,...n.map((e=>e.objectId))];if(this.removeIds(h),this._invalidate(),r(this._edits))return void(this._edits={type:"append",addOrUpdate:d.fromOptimizedFeatures(n,o,i(t)),id:this.tile.id,status:a.empty(),end:!0});this.requests.done.forEach((e=>e.message.end=!1));i(this._edits.addOrUpdate).append(e.features())}*readers(){for(const{message:e}of this.requests.done)t(e.addOrUpdate)&&(yield e.addOrUpdate);t(this._edits)&&t(this._edits.addOrUpdate)&&(yield this._edits.addOrUpdate)}_invalidate(){for(const e of this.requests.done)e.message.status=a.empty();t(this._edits)&&(this._edits.status=a.empty())}removeIds(e){this._invalidate();for(const{message:s}of this.requests.done){const r=s.addOrUpdate;t(r)&&(r.removeIds(e),r.isEmpty&&(s.addOrUpdate=null))}t(this._edits)&&t(this._edits.addOrUpdate)&&this._edits.addOrUpdate.removeIds(e),this.requests.done=this.requests.done.filter((e=>e.message.addOrUpdate||e.message.end))}abort(){this._abortController.abort()}}export{o as DataTileSubscription};
