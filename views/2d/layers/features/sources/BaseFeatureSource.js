/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/_rollupPluginBabelHelpers","../../../../../core/has","../../../../../core/maybe","../../../../../core/Logger","../../../../../core/Error","../../../../../core/promiseUtils","../../../../../request","../../../../../tasks/support/Query","../../../../support/QueueProcessor","../controllers/support/sources","./DataTileSource"],(function(e,t,r,s,n,o,i,u,a,c,l,d){"use strict";const h=n.getLogger("esri.views.2d.layers.features.sources.BaseFeatureSource");let f=function(e){function n(t){var s;return(s=e.call(this,t)||this).type="feature",s._adapter=l.createSourceAdapter(t.serviceInfo),s._queue=new c.QueueProcessor({concurrency:8,process:async e=>{i.throwIfAborted(e);const t=e.tile.key.id,{tile:n,signal:o}=e,u={query:r("esri-tiles-debug")?{tile:t.replace(/\//g,"."),depth:e.depth}:void 0,signal:o,transform:n.transform};return s._adapter.executeQuery(e.query,u)}}),s._patchQueue=new c.QueueProcessor({concurrency:8,process:async e=>{i.throwIfAborted(e);const t=e.tile.key.id,{tile:n,signal:o}=e,u={query:r("esri-tiles-debug")?{tile:t.replace(/\//g,"."),depth:e.depth}:void 0,signal:o,transform:n.transform};return s._adapter.executeQuery(e.query,u)}}),s}t._inheritsLoose(n,e);var d=n.prototype;return d.destroy=function(){this._adapter.destroy(),this._queue.destroy(),this._patchQueue.destroy()},d.setViewState=function(e){},d.subscribe=function(t){e.prototype.subscribe.call(this,t),this._fetchDataTile(t).catch((e=>{i.isAbortError(e)||h.error(new o("mapview-query-error","Encountered error when fetching tile",{tile:t,error:e}))}))},d.unsubscribe=function(t){e.prototype.unsubscribe.call(this,t)},d.pause=function(){this._queue.pause()},d.resume=function(){this._queue.resume()},d.query=async function(e,t){return this._adapter.executeQuery(e,t)},d.queryLastEditDate=async function(){const e=this._serviceInfo.source,t={...e.query,f:"json"};return(await u(e.path,{query:t,responseType:"json"})).data.editingInfo.lastEditDate},d.forEachRequest=function(e,t){const r=this._subscriptions.get(e),{requests:s,signal:n}=r;for(const e of s.done)t(e.request,{signal:n})},d._executePatchQuery=async function(e,t,r,n){const o=t.clone();o.outFields=[this._serviceInfo.objectIdField,...r],o.returnCentroid=!1,o.returnGeometry=!1;const i=s.isSome(o.start)?o.start/8e3:0,u=n.signal;return this._patchQueue.push({tile:e,query:o,signal:u,depth:i})},d._resendRequest=async function(e,t){const{query:r,request:n}=e,o=s.isSome(r.outFields)?r.outFields:[],u=this._sourceQueryInfo.outFields,a=u.filter((e=>-1===o.indexOf(e)));if(!s.isNone(n.features))if(a.length)try{const e=await this._executePatchQuery(n.tile,r,a,t);i.throwIfAborted(t),r.outFields=u,n.features.joinAttributes(e),this._onRequest({...n,end:n.end||t.end},"new",t)}catch(e){}else this._onRequest({...n,end:n.end||t.end},"new",t)},d.resend=async function({dataTileOnly:e}){let t=0,r=!1;const s=[];for(this._subscriptions.forEach((e=>{if(!e.requests.done.length){const t=e.tile;this._onRequest({tile:t,id:t.id,features:null,noData:!0,end:!1},"new",{dataTileOnly:!0})}}));!r;)r=!0,this._subscriptions.forEach((({requests:n,signal:o})=>{if(n.done.length>t){r=!1;const i=n.done.length===t+1;s.push(this._resendRequest(n.done[t],{signal:o,dataTileOnly:e,end:i}))}})),t++;await i.all(s)},d._createQuery=function(e,t){const r=new a({...this._serviceQueryInfo,...this._sourceQueryInfo,...t});return this._serviceInfo.capabilities.query.supportsQuantization||(t.quantizationParameters=null,r.maxAllowableOffset=e.resolution),t.quantizationParameters&&"esriGeometryPolyline"===this.geometryType&&(r.maxAllowableOffset=e.resolution),r.resultType="tile",r.geometry=e.extent,r},t._createClass(n,[{key:"updating",get:function(){return!!this._queue.length}}]),n}(d.DataTileSource);e.BaseFeatureSource=f,Object.defineProperty(e,"__esModule",{value:!0})}));
