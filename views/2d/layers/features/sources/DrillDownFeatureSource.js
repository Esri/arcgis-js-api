/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../../../core/has.js";import{throwIfAborted as t,isAbortError as r}from"../../../../../core/promiseUtils.js";import{BaseFeatureSource as s}from"./BaseFeatureSource.js";const i=e("esri-mobile"),a={maxDrillLevel:i?1:4,maxRecordCountFactor:i?1:3};class o extends s{constructor(e){super(e)}async _fetchDataTile(e){const s=this._serviceInfo.capabilities.query.supportsMaxRecordCountFactor,i=this._subscriptions.get(e.key.id),o=i.signal,n=e.getQuantizationParameters();let c=0;const d=async(u,l)=>{const p=this._queryInfo,m=this.createTileQuery(u,{maxRecordCountFactor:s?a.maxRecordCountFactor:void 0,returnExceededLimitFeatures:!1,quantizationParameters:n});c++;try{const r=await this._queue.push({tile:e,query:m,signal:o,depth:l});if(c--,t(o),!r)return;if(p!==this._queryInfo)return void d(u,l);if(r.exceededTransferLimit&&l<a.maxDrillLevel){for(const e of u.createChildTiles())d(e,l+1);return}const s={id:e.id,addOrUpdate:r,end:0===c,type:"append"};i.add({query:m,message:s}),this._onMessage(s)}catch(h){r(h)||this._onMessage({id:e.id,addOrUpdate:null,end:!0,type:"append"})}};d(e,0)}}export{o as DrillDownFeatureSource};
