/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import"../../../../../geometry.js";import e from"../../../../../core/Evented.js";import t from"../../../../../core/has.js";import{isNone as s,isSome as r,applySome as i}from"../../../../../core/maybe.js";import{diff as a,hasDiff as o}from"../../../../../core/accessorSupport/diffUtils.js";import{GeohashTree as h}from"../../../../../geohash/GeohashTree.js";import{setGeohashBuf as l,setGeohashXY as n}from"../../../../../geohash/geohashUtils.js";import{earth as u}from"../../../../../geometry/support/Ellipsoid.js";import{getInfo as c}from"../../../../../geometry/support/spatialReferenceUtils.js";import{quantizeX as g,quantizeY as d}from"../../../../../layers/graphics/featureConversionUtils.js";import{OptimizedFeatureWithGeometry as f,OptimizedFeature as p}from"../../../../../layers/graphics/OptimizedFeature.js";import _ from"../../../../../layers/graphics/OptimizedGeometry.js";import{checkProjectionSupport as m,project as y}from"../../../../../layers/graphics/data/projectionSupport.js";import{TILE_SIZE as I}from"../../../engine/webgl/definitions.js";import{DISPLAY_ID_TEXEL_MASK as v}from"../../../engine/webgl/DisplayId.js";import{Store2D as b}from"../Store2D.js";import{FeatureSetReaderJSON as R}from"./FeatureSetReaderJSON.js";import C from"../../../../../geometry/SpatialReference.js";const M=12,x=1;class L extends f{constructor(e,t,s,r,i){super(new _([],[t,s]),r,null,e),this.geohashBoundsInfo=i}get count(){return this.attributes.cluster_count}static create(e,t,s,r,i,a,o,h){const l=new L(t,s,r,a,o);return l.displayId=e.createDisplayId(!0),l.referenceId=h,l.tileLevel=i,l}update(e,t,s,r,i,a){return this.geometry.coords[0]=e,this.geometry.coords[1]=t,this.tileLevel=s,this.attributes=r,this.geohashBoundsInfo=i,this.referenceId=null,this.referenceId=a,this}toJSON(){return{objectId:this.objectId,referenceId:1===this.attributes.cluster_count?this.referenceId:null,attributes:{...this.attributes,clusterId:this.objectId},geometry:{x:this.geometry.coords[0],y:this.geometry.coords[1]}}}}function j(e){return 57.29577951308232*e}class w extends b{constructor(t,s,r,i){super(t,r),this.events=new e,this._geohashLevel=0,this._tileLevel=0,this._aggregateValueRanges={},this._aggregateValueRangesChanged=!1,this._geohashBuf=[],this._clusters=new Map,this._tiles=new Map,this._serviceInfo=i,this.geometryInfo=t.geometryInfo,this._spatialReference=s,this._projectionSupportCheck=m(s,C.WGS84),this._bitsets.geohash=r.getBitset(r.createBitset()),this._bitsets.inserted=r.getBitset(r.createBitset())}destroy(){this._tree.destroy()}async updateSchema(e,r){const i=this._schema;try{await super.updateSchema(e,r),await this._projectionSupportCheck}catch(n){}const l=a(i,r);r&&(!s(l)||e.source||e.storage.filters)?((o(l,"params.fields")||!this._tree||e.source)&&(this._tree&&this._tree.destroy(),this._tree=new h(this._statisticFields,this._serviceInfo),this._rebuildTree(),t("esri-2d-update-debug")&&console.debug("Aggregate mesh needs update due to tree changing")),t("esri-2d-update-debug")&&console.debug("Applying Update - ClusterStore:",l),e.targets[r.name]=!0,e.mesh=!1,this._aggregateValueRanges={}):i&&(e.mesh=!0)}clear(){this._rebuildTree()}sweepFeatures(e,t){this._bitsets.inserted.forEachSet((s=>{if(!e.has(s)){const e=t.lookupByDisplayIdUnsafe(s);this._remove(e)}}))}sweepAggregates(e,t,s){this._clusters.forEach(((r,i)=>{r&&r.tileLevel!==s&&(e.releaseDisplayId(r.displayId),t.unsetAttributeData(r.displayId),this._clusters.delete(i))}))}onTileData(e,t,r,i,a=!0){if(!this._schema||s(t.addOrUpdate))return t;const o=this._getTransforms(e,this._spatialReference);{const e=t.addOrUpdate.getCursor();for(;e.next();)this._update(e,i)}if(t.status.mesh||!a)return t;const h=new Array,l=this._schema.params.clusterRadius;this._getClustersForTile(h,e,l,r,o),t.addOrUpdate=R.fromOptimizedFeatures(h,this._serviceInfo),t.addOrUpdate.attachStorage(r),t.clear=!0,t.end=!0;{const s=t.addOrUpdate.getCursor();for(;s.next();){const t=s.getDisplayId();this._bitsets.computed.unset(t),this.setComputedAttributes(r,s,t,e.scale)}}return this._aggregateValueRangesChanged&&t.end&&(this.events.emit("valueRangesChanged",{valueRanges:this._aggregateValueRanges}),this._aggregateValueRangesChanged=!1),t}onTileUpdate({added:e,removed:t}){if(e.length){const t=e[0].level;this._tileLevel=t,this._setGeohashLevel(t)}if(!this._schema)return;const s=this._schema.params.clusterRadius;t.forEach((e=>{this._tiles.delete(e.key.id),this._markTileClustersForDeletion(e,s)}))}getAggregate(e){for(const t of this._clusters.values())if((t?.displayId&v)==(e&v))return t.toJSON();return null}getAggregates(){const e=[];for(const t of this._clusters.values())t?.tileLevel===this._tileLevel&&e.push(t.toJSON());return e}getDisplayId(e){const t=this._clusters.get(e);return t?t.displayId:null}getFeatureDisplayIdsForAggregate(e){const t=this._clusters.get(e);if(!t)return[];const s=t.geohashBoundsInfo;return this._tree.getRegionDisplayIds(s.xLL,s.yLL,s.xTR,s.yTR,s.level)}getDisplayIdForReferenceId(e){for(const t of this._clusters.values())if(t?.referenceId===e)return t.displayId;return null}getAggregateValueRanges(){return this._aggregateValueRanges}forEach(e){for(const[t,s]of this._clusters)s&&e(s,t)}size(){let e=0;return this.forEach((t=>e++)),e}_rebuildTree(){this._bitsets.computed.clear(),this._bitsets.inserted.clear(),this._tree&&this._tree.clear()}_remove(e){const t=e.getDisplayId(),s=e.getXHydrated(),r=e.getYHydrated(),i=this._geohashBuf[2*t],a=this._geohashBuf[2*t+1];this._bitsets.inserted.has(t)&&(this._bitsets.inserted.unset(t),this._tree.removeCursor(e,s,r,i,a,this._geohashLevel))}_update(e,t){const s=e.getDisplayId(),r=this._bitsets.inserted,i=t.isVisible(s);if(i===r.has(s))return;if(!i)return void this._remove(e);const a=e.getXHydrated(),o=e.getYHydrated();if(!this._setGeohash(s,a,o))return;const h=this._geohashBuf[2*s],l=this._geohashBuf[2*s+1];this._tree.insertCursor(e,s,a,o,h,l,this._geohashLevel),r.set(s)}_setGeohash(e,t,s){if(this._bitsets.geohash.has(e))return!0;const r=this._geohashBuf;if(this._spatialReference.isWebMercator){const i=j(t/u.radius),a=i-360*Math.floor((i+180)/360),o=j(Math.PI/2-2*Math.atan(Math.exp(-s/u.radius)));l(r,e,o,a,M)}else{const i=y({x:t,y:s},this._spatialReference,C.WGS84);if(!i)return!1;l(r,e,i.y,i.x,M)}return this._bitsets.geohash.set(e),!0}_getClustersForTile(e,t,a,o,h,l=!0){const n=this._schema.params.clusterPixelBuffer,u=2*a,c=this._getGeohashLevel(t.key.level),f=Math.ceil(2**t.key.level*I/u),_=Math.ceil(n/u)+0,m=Math.ceil(I/u),{row:y,col:v}=t.key,b=v*I,R=y*I,C=Math.floor(b/u)-_,M=Math.floor(R/u)-_,x=C+m+2*_,L=M+m+2*_,j=t.tileInfoView.getLODInfoAt(t.key.level);for(let I=C;I<=x;I++)for(let a=M;a<=L;a++){let n=I;j.wrap&&(n=I<0?I+f:I%f);const u=j.wrap&&I<0,_=j.wrap&&I%f!==I,m=this._lookupCluster(o,j,t.key.level,n,a,c);if(r(m)){const t=i(h,(e=>u?e.left:_?e.right:e.tile));if(l&&s(t))continue;if(!m.count)continue;if(r(t)&&l){const s=m.geometry.clone();let i=m.attributes;s.coords[0]=g(t,s.coords[0]),s.coords[1]=d(t,s.coords[1]),1===m.count&&r(m.referenceId)&&(i={...m.attributes,referenceId:m.referenceId});const a=new p(s,i);a.displayId=m.displayId,e.push(a)}}}}_getGeohashLevel(e){return Math.min(Math.ceil(e/2+2),M)}_setGeohashLevel(e){const t=this._getGeohashLevel(e),s=(Math.floor(t/x)+1)*x-1;if(this._geohashLevel!==s)return this._geohashLevel=s,this._rebuildTree(),void this._bitsets.geohash.clear()}_getTransforms(e,t){const s={originPosition:"upperLeft",scale:[e.resolution,e.resolution],translate:[e.bounds[0],e.bounds[3]]},r=c(t);if(!r)return{tile:s,left:null,right:null};const[i,a]=r.valid;return{tile:s,left:{...s,translate:[a,e.bounds[3]]},right:{...s,translate:[i-a+e.bounds[0],e.bounds[3]]}}}_getClusterId(e,t,s){return(15&e)<<28|(16383&t)<<14|16383&s}_markForDeletion(e,t,s){const r=this._getClusterId(e,t,s);this._clusters.delete(r)}_getClusterBounds(e,t,s){const r=this._schema.params.clusterRadius,i=2*r;let a=s%2?t*i:t*i-r;const o=s*i;let h=a+i;const l=o-i,n=2**e.level*I;e.wrap&&a<0&&(a=0),e.wrap&&h>n&&(h=n);const u=a/I,c=o/I,g=h/I,d=l/I;return[e.getXForColumn(u),e.getYForRow(c),e.getXForColumn(g),e.getYForRow(d)]}_lookupCluster(e,t,s,i,a,o){const h=this._getClusterId(s,i,a),l=this._clusters.get(h),[c,g,d,f]=this._getClusterBounds(t,i,a),p={x:c,y:g},_={x:d,y:f};let m=0,I=0,v=0,b=0;if(this._spatialReference.isWebMercator){{const e=j(p.x/u.radius);m=e-360*Math.floor((e+180)/360),I=j(Math.PI/2-2*Math.atan(Math.exp(-p.y/u.radius)))}{const e=j(_.x/u.radius);v=e-360*Math.floor((e+180)/360),b=j(Math.PI/2-2*Math.atan(Math.exp(-_.y/u.radius)))}}else{const e=y(p,this._spatialReference,C.WGS84),t=y(_,this._spatialReference,C.WGS84);if(!e||!t)return null;m=e.x,I=e.y,v=t.x,b=t.y}const R={geohashX:0,geohashY:0},M={geohashX:0,geohashY:0};n(R,I,m,o),n(M,b,v,o);const x=R.geohashX,w=R.geohashY,V=M.geohashX,S=M.geohashY,F={xLL:x,yLL:w,xTR:V,yTR:S,level:o},D=this._tree.getRegionStatistics(x,w,V,S,o),{count:T,xTotal:k,yTotal:B,referenceId:A}=D,G=T?k/T:0,O=T?B/T:0;if(0===T)return this._clusters.set(h,null),null;const U={cluster_count:T,...D.attributes},X=r(l)?l.update(G,O,s,U,F,A):L.create(e,h,G,O,s,U,F,A);return 0===T&&(X.geometry.coords[0]=(c+d)/2,X.geometry.coords[1]=(g+f)/2),this._clusters.set(h,X),this._updateAggregateValueRangeForCluster(X,X.tileLevel),X}_updateAggregateValueRangeForCluster(e,t){const s=this._aggregateValueRanges[t]||{minValue:1/0,maxValue:0},r=s.minValue,i=s.maxValue;s.minValue=Math.min(r,e.count),s.maxValue=Math.max(i,e.count),this._aggregateValueRanges[t]=s,r===s.minValue&&i===s.maxValue||(this._aggregateValueRangesChanged=!0)}_markTileClustersForDeletion(e,t){const s=2*t,r=Math.ceil(I/s),{row:i,col:a}=e.key,o=a*I,h=i*I,l=Math.floor(o/s),n=Math.floor(h/s);for(let u=l;u<l+r;u++)for(let t=n;t<n+r;t++)this._markForDeletion(e.key.level,u,t)}}export{L as ClusterInfo,w as ClusterStore};
