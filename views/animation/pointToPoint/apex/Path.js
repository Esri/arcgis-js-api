/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{outQuad as i,inQuad as e}from"../../easing.js";import{Path as t}from"../Path.js";import{Segment as n}from"../Segment.js";import{optimalDistance as o}from"./planning.js";class s extends t{constructor(i,e){super(),this._preallocSegments=[new n,new n,new n],this.update(i,e)}update(i,e){if(!i)return;this.definition?this.definition.copyFrom(i):this.definition=i.clone();let t=null;e&&e.apex&&(t=o(i,e.apex)),this.segments.length=0,this._ascensionSegment=null,this._descensionSegment=null,null==t?this._updateWithoutApex():this._updateWithApex(t,e.apex)}segmentInterpolateComponentsAt(t,n,o){return o=t.interpolateComponentsAt(n,o),t===this._ascensionSegment?o.zoom=i(o.zoom):t===this._descensionSegment&&(o.zoom=e(o.zoom)),o}_updateWithApex(i,e){const[t,n,o]=this._preallocSegments,s=null!=e.ascensionFactor?e.ascensionFactor:.5,d=Math.min(1-s,null!=e.ascensionFactor?e.descensionFactor:.5),a=1-s-d;t.definition?t.definition.copyFrom(this.definition):t.definition=this.definition.clone(),t.definition.compared.targetZoom=i,t.definition.compared.pan=this.definition.compared.pan*s,t.definition.compared.rotate=this.definition.compared.rotate*s,t.update(),this._ascensionSegment=t,this.segments.push(t),a>0&&(n.definition?n.definition.copyFrom(this.definition):n.definition=this.definition.clone(),n.definition.copyFrom(this.definition),n.definition.compared.sourceZoom=i,n.definition.compared.targetZoom=i,n.definition.compared.pan=this.definition.compared.pan*a,n.definition.compared.rotate=this.definition.compared.rotate*a,n.update(),this.segments.push(n)),o.definition?o.definition.copyFrom(this.definition):o.definition=this.definition.clone(),o.definition.compared.sourceZoom=i,o.definition.compared.pan=this.definition.compared.pan*d,o.definition.compared.rotate=this.definition.compared.rotate*d,o.update(),this._descensionSegment=o,this.segments.push(o)}_updateWithoutApex(){const[i]=this._preallocSegments;i.update(this.definition),this.segments.push(i)}}export{s as Path};
