/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.21/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../geometry","../../../TimeExtent","../../../core/jsonMap","../../../core/JSONSupport","../../../core/lang","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/has","../../../core/Logger","../../../core/accessorSupport/decorators/subclass","../../../core/accessorSupport/decorators/writer","../../../geometry/support/jsonUtils","../../../rest/support/Query"],(function(e,t,r,i,o,s,n,a,p,l,c,d,u,y,h){"use strict";var S;const w=new o.JSONMap({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelDisjoint:"disjoint",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),_=new o.JSONMap({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"});let m=S=function(t){function r(e){var r;return(r=t.call(this,e)||this).where=null,r.geometry=null,r.spatialRelationship="intersects",r.hiddenIds=new Set,r.distance=void 0,r.objectIds=null,r.units=null,r.timeExtent=null,r.enabled=!1,r}e._inheritsLoose(r,t);var i=r.prototype;return i.writeWhere=function(e,t){t.where=e||"1=1"},i.enable=function(){this._set("enabled",!0)},i.createQuery=function(e={}){const{where:t,geometry:r,spatialRelationship:i,timeExtent:o,objectIds:s,units:a,distance:p}=this;return new h({geometry:n.clone(r),objectIds:n.clone(s),spatialRelationship:i,timeExtent:n.clone(o),where:t,units:a,distance:p,...e})},i.clone=function(){const{where:e,geometry:t,spatialRelationship:r,hiddenIds:i,timeExtent:o,objectIds:s,units:a,distance:p}=this,l=new Set;return i.forEach((e=>l.add(e))),new S({geometry:n.clone(t),hiddenIds:l,objectIds:n.clone(s),spatialRelationship:r,timeExtent:n.clone(o),where:e,units:a,distance:p})},r}(s.JSONSupport);return t.__decorate([a.property({type:String})],m.prototype,"where",void 0),t.__decorate([u.writer("where")],m.prototype,"writeWhere",null),t.__decorate([a.property({types:r.geometryTypes,json:{read:y.fromJSON,write:!0}})],m.prototype,"geometry",void 0),t.__decorate([a.property({type:String,json:{read:{source:"spatialRel",reader:w.read},write:{target:"spatialRel",writer:w.write}}})],m.prototype,"spatialRelationship",void 0),t.__decorate([a.property({json:{write:(e,t,r)=>t[r]=Array.from(e),read:e=>new Set(e)}})],m.prototype,"hiddenIds",void 0),t.__decorate([a.property({type:Number,json:{write:{overridePolicy:e=>({enabled:e>0})}}})],m.prototype,"distance",void 0),t.__decorate([a.property({type:[Number],json:{write:!0}})],m.prototype,"objectIds",void 0),t.__decorate([a.property({type:String,json:{read:_.read,write:{writer:_.write,overridePolicy(e){return{enabled:e&&this.distance>0}}}}})],m.prototype,"units",void 0),t.__decorate([a.property({type:i,json:{write:!0}})],m.prototype,"timeExtent",void 0),t.__decorate([a.property({readOnly:!0})],m.prototype,"enabled",void 0),m=S=t.__decorate([d.subclass("esri.views.layers.support.FeatureFilter")],m),m}));
