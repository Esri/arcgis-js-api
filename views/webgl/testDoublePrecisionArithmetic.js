/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{unpackFloatRGBA as n}from"../../core/floatRGBA.js";import{f as e}from"../../chunks/vec3f64.js";import{BufferObject as o}from"./BufferObject.js";import{encodeDoubleArray as t}from"./doublePrecisionUtils.js";import{TargetType as r,DepthStencilTargetType as i,TextureType as a,TextureWrapMode as c,PixelFormat as s,PixelType as l,TextureSamplingMode as p,Usage as v,DataType as f,PrimitiveType as u}from"./enums.js";import{FramebufferObject as m}from"./FramebufferObject.js";import{VertexArrayObject as h}from"./VertexArrayObject.js";import{VertexElementDescriptor as d}from"./VertexElementDescriptor.js";function A(A,_){const g=new m(A,{colorTarget:r.TEXTURE,depthStencilTarget:i.NONE},{target:a.TEXTURE_2D,wrapMode:c.CLAMP_TO_EDGE,pixelFormat:s.RGBA,dataType:l.UNSIGNED_BYTE,samplingMode:p.NEAREST,width:1,height:1});function B(n,e){const o=`\n\n  precision highp float;\n\n  attribute vec2 position;\n\n  uniform vec3 u_highA;\n  uniform vec3 u_lowA;\n  uniform vec3 u_highB;\n  uniform vec3 u_lowB;\n\n  varying vec4 v_color;\n\n  ${_?"#define DOUBLE_PRECISION_REQUIRES_OBFUSCATION":""}\n\n  #ifdef DOUBLE_PRECISION_REQUIRES_OBFUSCATION\n\n  vec3 dpPlusFrc(vec3 a, vec3 b) {\n    return mix(a, a + b, vec3(notEqual(b, vec3(0))));\n  }\n\n  vec3 dpMinusFrc(vec3 a, vec3 b) {\n    return mix(vec3(0), a - b, vec3(notEqual(a, b)));\n  }\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = dpPlusFrc(hiA, hiB);\n    vec3 e = dpMinusFrc(t1, hiA);\n    vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;\n    return t1 + t2;\n  }\n\n  #else\n\n  vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {\n    vec3 t1 = hiA + hiB;\n    vec3 e = t1 - hiA;\n    vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;\n    return t1 + t2;\n  }\n\n  #endif\n\n  const float MAX_RGBA_FLOAT =\n    255.0 / 256.0 +\n    255.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 +\n    255.0 / 256.0 / 256.0 / 256.0 / 256.0;\n\n  const vec4 FIXED_POINT_FACTORS = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n\n  vec4 float2rgba(const float value) {\n    // Make sure value is in the domain we can represent\n    float valueInValidDomain = clamp(value, 0.0, MAX_RGBA_FLOAT);\n\n    // Decompose value in 32bit fixed point parts represented as\n    // uint8 rgba components. Decomposition uses the fractional part after multiplying\n    // by a power of 256 (this removes the bits that are represented in the previous\n    // component) and then converts the fractional part to 8bits.\n    vec4 fixedPointU8 = floor(fract(valueInValidDomain * FIXED_POINT_FACTORS) * 256.0);\n\n    // Convert uint8 values (from 0 to 255) to floating point representation for\n    // the shader\n    const float toU8AsFloat = 1.0 / 255.0;\n\n    return fixedPointU8 * toU8AsFloat;\n  }\n\n  void main() {\n    vec3 val = dpAdd(u_highA, u_lowA, -u_highB, -u_lowB);\n\n    v_color = float2rgba(val.z / 25.0);\n\n    gl_Position = vec4(position * 2.0 - 1.0, 0.0, 1.0);\n  }\n  `,r="\n  precision highp float;\n\n  varying vec4 v_color;\n\n  void main() {\n    gl_FragColor = v_color;\n  }\n  ",i=A.programCache.acquire(o,r,new Map([["position",0]])),a=new Float32Array(6);t(n,a,3);const c=new Float32Array(6);return t(e,c,3),A.useProgram(i),i.setUniform3f("u_highA",a[0],a[2],a[4]),i.setUniform3f("u_lowA",a[1],a[3],a[5]),i.setUniform3f("u_highB",c[0],c[2],c[4]),i.setUniform3f("u_lowB",c[1],c[3],c[5]),i}const E=o.createVertex(A,v.STATIC_DRAW,new Uint16Array([0,0,1,0,0,1,1,1])),b=new h(A,new Map([["position",0]]),{geometry:[new d("position",2,f.UNSIGNED_SHORT,0,4)]},{geometry:E}),F=e(5633261.287538229,2626832.878767164,1434988.0495278358),w=e(5633271.46742708,2626873.6381334523,1434963.231608387),T=B(F,w),O=A.getBoundFramebufferObject(),{x:U,y:I,width:R,height:N}=A.getViewport();A.bindFramebuffer(g),A.setViewport(0,0,1,1),A.bindVAO(b),A.drawArrays(u.TRIANGLE_STRIP,0,4);const S=new Uint8Array(4);g.readPixels(0,0,1,1,s.RGBA,l.UNSIGNED_BYTE,S),T.dispose(),b.dispose(!1),E.dispose(),g.dispose(),A.setViewport(U,I,R,N),A.bindFramebuffer(O);const D=(F[2]-w[2])/25,y=n(S);return Math.abs(D-y)}export{A as testDoublePrecisionArithmetic};
