/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../core/has","../../core/mathUtils","../../core/maybe","./checkWebGLError","./context-util","./enums","./capabilities/isWebGL2Context"],(function(e,t,i,r,o,a,s,n,p){"use strict";const l=4;let h=function(){function e(e,t,i=null){if(this._context=e,this.type="texture",this._glName=null,this._descriptor=void 0,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,e.instanceCounter.increment(n.ResourceType.Texture,this),this._descriptor={target:n.TextureType.TEXTURE_2D,samplingMode:n.TextureSamplingMode.LINEAR,wrapMode:n.TextureWrapMode.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1,...t},e.type!==s.ContextType.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),T(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===n.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}var i=e.prototype;return i.dispose=function(){this._context.gl&&this._glName&&(this._context.unbindTextureAllUnits(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(n.ResourceType.Texture,this))},i.release=function(){this.dispose()},i.resize=function(e,t){const i=this._descriptor;if(i.width!==e||i.height!==t){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");i.width=e,i.height=t,this._descriptor.target===n.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}},i._setDataCubeMap=function(e=null){for(let t=n.TextureType.TEXTURE_CUBE_MAP_POSITIVE_X;t<=n.TextureType.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)},i.setData=function(e){this._setData(e)},i._setData=function(t,i){if(!this._context||!this._context.gl)return;const r=this._context.gl;this._glName||(this._glName=r.createTexture()),void 0===t&&(t=null);const s=this._descriptor;null!=i||(i=s.target);const n=T(i);var h;null===t&&(s.width=s.width||l,s.height=s.height||l,n&&(s.depth=null!=(h=s.depth)?h:1));const u=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),e._validateTexture(this._context,s),this._configurePixelStorage();const c=s.pixelFormat;let E=s.internalFormat?s.internalFormat:this._deriveInternalFormat(c,s.dataType);if(d(t)){let e=t.width,o=t.height;const p=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,o=t.videoHeight),s.width&&s.height,n&&s.depth,s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(i,E,s.hasMipmap,e,o,p),this._texImage(i,0,E,e,o,p,t),a.checkWebGLError(r),s.hasMipmap&&this.generateMipmap(),void 0===s.width&&(s.width=e),void 0===s.height&&(s.height=o),n&&void 0===s.depth&&(s.depth=p)}else{const{width:e,height:l,depth:h}=s;if(null!=e&&null!=l||console.error("Width and height must be specified!"),n&&null==h&&console.error("Depth must be specified!"),s.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(i,E,s.hasMipmap,e,l,h),r.DEPTH24_STENCIL8&&E===r.DEPTH_STENCIL&&(E=r.DEPTH24_STENCIL8),m(t)){const o=t.levels,a=x(i,e,l,h),n=Math.min(a-1,o.length-1);p(r)?r.texParameteri(s.target,r.TEXTURE_MAX_LEVEL,n):s.hasMipmap=s.hasMipmap&&a===o.length;const u=E;if(!_(u))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel(((e,t,r,a)=>{const s=o[Math.min(e,o.length-1)];this._compressedTexImage(i,e,u,t,r,a,s)}),n)}else o.isSome(t)?(this._texImage(i,0,E,e,l,h,t),a.checkWebGLError(r),s.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((e,t,o,s)=>{this._texImage(i,e,E,t,o,s,null),a.checkWebGLError(r)}))}e._applySamplingMode(r,this._descriptor),e._applyWrapMode(r,this._descriptor),e._applyAnisotropicFilteringParameters(this._context,this._descriptor),a.checkWebGLError(r),this._context.bindTexture(u,e.TEXTURE_UNIT_FOR_UPDATES)},i.updateData=function(t,i,r,o,a,s){s||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const n=this._context.gl,p=this._descriptor,{pixelFormat:l,internalFormat:h,dataType:u,isImmutable:_,target:c}=p;if(_&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const T=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);(i<0||r<0||o>p.width||a>p.height||i+o>p.width||r+a>p.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),d(s)?n.texSubImage2D(c,t,i,r,l,u,s):m(s)?n.compressedTexSubImage2D(c,t,i,r,o,a,h,s.levels[t]):n.texSubImage2D(c,t,i,r,o,a,l,u,s),this._context.bindTexture(T,e.TEXTURE_UNIT_FOR_UPDATES)},i.updateData3D=function(t,i,r,o,a,s,n,l){l||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const h=this._context.gl;if(!p(h))throw new Error("3D textures are not supported in WebGL1");const u=this._descriptor,{pixelFormat:_,dataType:c,isImmutable:d,target:x,internalFormat:E}=u;if(d&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");T(x)||console.warn("Attempting to set 3D texture data on a non-3D texture");const g=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),(i<0||r<0||o<0||a>u.width||s>u.height||n>u.depth||i+a>u.width||r+s>u.height||o+n>u.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),m(l))l=l.levels[t],h.compressedTexSubImage3D(x,t,i,r,o,a,s,n,E,l);else{const e=l;h.texSubImage3D(x,t,i,r,o,a,s,n,_,c,e)}this._context.bindTexture(g,e.TEXTURE_UNIT_FOR_UPDATES)},i.generateMipmap=function(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,e._validateTexture(this._context,t)}t.samplingMode===n.TextureSamplingMode.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=n.TextureSamplingMode.LINEAR_MIPMAP_NEAREST):t.samplingMode===n.TextureSamplingMode.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=n.TextureSamplingMode.NEAREST_MIPMAP_NEAREST);const i=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES);this._context.gl.generateMipmap(t.target),this._context.bindTexture(i,e.TEXTURE_UNIT_FOR_UPDATES)},i.setSamplingMode=function(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)},i.setWrapMode=function(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,e._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)},i.applyChanges=function(){const t=this._context.gl,i=this._descriptor;this._samplingModeDirty&&(e._applySamplingMode(t,i),this._samplingModeDirty=!1),this._wrapModeDirty&&(e._applyWrapMode(t,i),this._wrapModeDirty=!1)},i._deriveInternalFormat=function(e,t){if(this._context.type===s.ContextType.WEBGL1)return e;switch(t){case n.PixelType.FLOAT:switch(e){case n.PixelFormat.RGBA:return n.SizedPixelFormat.RGBA32F;case n.PixelFormat.RGB:return n.SizedPixelFormat.RGB32F;default:throw new Error("Unable to derive format")}case n.PixelType.UNSIGNED_BYTE:switch(e){case n.PixelFormat.RGBA:return n.SizedPixelFormat.RGBA8;case n.PixelFormat.RGB:return n.SizedPixelFormat.RGB8}default:return e}},i._configurePixelStorage=function(){const e=this._context.gl,{unpackAlignment:t,flipped:i,preMultiplyAlpha:r}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)},i._texStorage=function(e,t,i,r,o,a){const s=this._context.gl;if(!p(s))throw new Error("Immutable textures are not supported in WebGL1");if(!u(t))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const n=i?x(e,r,o,a):1;T(e)?s.texStorage3D(e,n,t,r,o,a):s.texStorage2D(e,n,t,r,o),this._wasImmutablyAllocated=!0},i._texImage=function(e,t,i,r,a,n,p){const l=this._context.gl;let h=null;const u=this._context.type===s.ContextType.WEBGL2,_=T(e),{isImmutable:m,pixelFormat:c,dataType:x}=this._descriptor;if(u&&(h=l),u||!d(p))if(m){if(o.isSome(p)){const i=p;_?h.texSubImage3D(e,t,0,0,0,r,a,n,c,x,i):l.texSubImage2D(e,t,0,0,r,a,c,x,i)}}else{const s=o.unwrap(p);_?h.texImage3D(e,t,i,r,a,n,0,c,x,s):l.texImage2D(e,t,i,r,a,0,c,x,s)}else l.texImage2D(e,0,i,c,x,p)},i._compressedTexImage=function(e,t,i,r,a,n,p){const l=this._context.gl;let h=null;const u=T(e),_=this._descriptor.isImmutable;if(u){if(this._context.type!==s.ContextType.WEBGL2)throw new Error("3D textures are not supported in WebGL1");h=l}_?o.isSome(p)&&(u?h.compressedTexSubImage3D(e,t,0,0,0,r,a,n,i,p):l.compressedTexSubImage2D(e,t,0,0,r,a,i,p)):u?h.compressedTexImage3D(e,t,i,r,a,n,0,p):l.compressedTexImage2D(e,t,i,r,a,0,p)},i._forEachMipmapLevel=function(e,t=1/0){let{width:i,height:r,depth:o,hasMipmap:a,target:s}=this._descriptor;const p=s===n.TextureType.TEXTURE_3D;for(let n=0;e(n,i,r,o),a&&(1!==i||1!==r||p&&1!==o)&&!(n>=t);++n)i=Math.max(1,i>>1),r=Math.max(1,r>>1),p&&(o=Math.max(1,o>>1))},e._validateTexture=function(e,t){(t.width<0||t.height<0||t.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=p(e.gl),o=r.isPowerOfTwo(t.width)&&r.isPowerOfTwo(t.height);i||!t.isImmutable&&!T(t.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||o||("number"==typeof t.wrapMode?t.wrapMode!==n.TextureWrapMode.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):t.wrapMode.s===n.TextureWrapMode.CLAMP_TO_EDGE&&t.wrapMode.t===n.TextureWrapMode.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))},e._applySamplingMode=function(e,t){let i=t.samplingMode,r=t.samplingMode;i===n.TextureSamplingMode.LINEAR_MIPMAP_NEAREST||i===n.TextureSamplingMode.LINEAR_MIPMAP_LINEAR?(i=n.TextureSamplingMode.LINEAR,t.hasMipmap||(r=n.TextureSamplingMode.LINEAR)):i!==n.TextureSamplingMode.NEAREST_MIPMAP_NEAREST&&i!==n.TextureSamplingMode.NEAREST_MIPMAP_LINEAR||(i=n.TextureSamplingMode.NEAREST,t.hasMipmap||(r=n.TextureSamplingMode.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,i),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,r)},e._applyWrapMode=function(e,t){"number"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))},e._applyAnisotropicFilteringParameters=function(e,t){var i;const r=e.capabilities.textureFilterAnisotropic;if(!r)return;e.gl.texParameterf(t.target,r.TEXTURE_MAX_ANISOTROPY,null!=(i=t.maxAnisotropy)?i:1)},t._createClass(e,[{key:"glName",get:function(){return this._glName}},{key:"descriptor",get:function(){return this._descriptor}},{key:"isDirty",get:function(){return this._samplingModeDirty||this._wrapModeDirty}}]),e}();function u(e){return e in n.SizedPixelFormat}function _(e){return e in n.CompressedTextureFormat}function m(e){return o.isSome(e)&&"type"in e&&"compressed"===e.type}function c(e){return o.isSome(e)&&"byteLength"in e}function d(e){return o.isSome(e)&&!m(e)&&!c(e)}function T(e){return e===n.TextureType.TEXTURE_3D||e===n.TextureType.TEXTURE_2D_ARRAY}function x(e,t,i,r=1){let o=Math.max(t,i);return e===n.TextureType.TEXTURE_3D&&(o=Math.max(o,r)),Math.round(Math.log(o)/Math.LN2)+1}h.TEXTURE_UNIT_FOR_UPDATES=0,e.Texture=h,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
