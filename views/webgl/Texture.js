/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../core/has","../../core/mathUtils","../../core/maybe","./checkWebGLError","./context-util","./enums","./capabilities/isWebGL2Context"],(function(e,t,i,r,o,a,n,s,l){"use strict";const p={target:s.TextureType.TEXTURE_2D,samplingMode:s.TextureSamplingMode.LINEAR,wrapMode:s.TextureWrapMode.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1},h=4;let u=function(){function e(e,t,i=null){this._context=e,this.type="texture",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,e.instanceCounter.increment(s.ResourceType.Texture,this),this._descriptor={...p,...t};for(const r in p){void 0===this._descriptor[r]&&(this._descriptor[r]=p[r])}if(e.type!==n.ContextType.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),x(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===s.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}var i=e.prototype;return i.dispose=function(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(s.ResourceType.Texture,this))},i.release=function(){this.dispose()},i.resize=function(e,t){const i=this._descriptor;if(i.width!==e||i.height!==t){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");i.width=e,i.height=t,this._descriptor.target===s.TextureType.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}},i._setDataCubeMap=function(e=null){for(let t=s.TextureType.TEXTURE_CUBE_MAP_POSITIVE_X;t<=s.TextureType.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)},i.setData=function(e){this._setData(e)},i._setData=function(t,i){if(!this._context||!this._context.gl)return;const r=this._context.gl;this._glName||(this._glName=r.createTexture()),void 0===t&&(t=null);const n=this._descriptor,s=i??n.target,p=x(s);null===t&&(n.width=n.width||h,n.height=n.height||h,p&&(n.depth=n.depth??1));const u=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),e._validateTexture(this._context,n),this._configurePixelStorage(),a.checkWebGLError(r);const d=n.pixelFormat;let c=n.internalFormat??this._deriveInternalFormat(d,n.dataType);if(T(t)){let e=t.width,i=t.height;const o=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,i=t.videoHeight),n.width&&n.height,p&&n.depth,n.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,c,n.hasMipmap,e,i,o),this._texImage(s,0,c,e,i,o,t),a.checkWebGLError(r),n.hasMipmap&&this.generateMipmap(),void 0===n.width&&(n.width=e),void 0===n.height&&(n.height=i),p&&void 0===n.depth&&(n.depth=o)}else{const{width:e,height:i,depth:h}=n;if(null==e||null==i)throw new Error("Width and height must be specified!");if(p&&null==h)throw new Error("Depth must be specified!");if(n.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,c,n.hasMipmap,e,i,h),r.DEPTH24_STENCIL8&&c===r.DEPTH_STENCIL&&(c=r.DEPTH24_STENCIL8),m(t)){const o=t.levels,a=E(s,e,i,h),p=Math.min(a-1,o.length-1);l(r)?r.texParameteri(n.target,r.TEXTURE_MAX_LEVEL,p):n.hasMipmap=n.hasMipmap&&a===o.length;const u=c;if(!_(u))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel(((e,t,i,r)=>{const a=o[Math.min(e,o.length-1)];this._compressedTexImage(s,e,u,t,i,r,a)}),p)}else o.isSome(t)?(this._texImage(s,0,c,e,i,h,t),a.checkWebGLError(r),n.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((e,t,i,o)=>{this._texImage(s,e,c,t,i,o,null),a.checkWebGLError(r)}))}e._applySamplingMode(r,this._descriptor),e._applyWrapMode(r,this._descriptor),e._applyAnisotropicFilteringParameters(this._context,this._descriptor),a.checkWebGLError(r),this._context.bindTexture(u,e.TEXTURE_UNIT_FOR_UPDATES)},i.updateData=function(t,i,r,o,a,n,s=0){n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const p=this._context.gl,h=this._descriptor,{pixelFormat:u,dataType:d,target:_,isImmutable:c}=h,x=h.internalFormat??this._deriveInternalFormat(u,d);if(c&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const E=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES,!0);if((i<0||r<0||o>h.width||a>h.height||i+o>h.width||r+a>h.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),s){if(!l(p))return void console.error("Webgl2 must be enabled to use dataRowOffset!");p.pixelStorei(p.UNPACK_SKIP_ROWS,s)}if(T(n)?l(p)?p.texSubImage2D(_,t,i,r,o,a,u,d,n):p.texSubImage2D(_,t,i,r,u,d,n):m(n)?p.compressedTexSubImage2D(_,t,i,r,o,a,x,n.levels[t]):p.texSubImage2D(_,t,i,r,o,a,u,d,n),s){if(!l(p))return void console.error("Webgl2 must be enabled to use dataRowOffset!");p.pixelStorei(p.UNPACK_SKIP_ROWS,0)}this._context.bindTexture(E,e.TEXTURE_UNIT_FOR_UPDATES)},i.updateData3D=function(t,i,r,o,a,n,s,p){p||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const h=this._context.gl;if(!l(h))throw new Error("3D textures are not supported in WebGL1");const u=this._descriptor,{pixelFormat:d,dataType:_,isImmutable:c,target:T}=u,E=u.internalFormat??this._deriveInternalFormat(d,_);if(c&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");x(T)||console.warn("Attempting to set 3D texture data on a non-3D texture");const g=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),(i<0||r<0||o<0||a>u.width||n>u.height||s>u.depth||i+a>u.width||r+n>u.height||o+s>u.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),m(p))p=p.levels[t],h.compressedTexSubImage3D(T,t,i,r,o,a,n,s,E,p);else{const e=p;h.texSubImage3D(T,t,i,r,o,a,n,s,d,_,e)}this._context.bindTexture(g,e.TEXTURE_UNIT_FOR_UPDATES)},i.generateMipmap=function(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,e._validateTexture(this._context,t)}t.samplingMode===s.TextureSamplingMode.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=s.TextureSamplingMode.LINEAR_MIPMAP_NEAREST):t.samplingMode===s.TextureSamplingMode.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=s.TextureSamplingMode.NEAREST_MIPMAP_NEAREST);const i=this._context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES);this._context.gl.generateMipmap(t.target),this._context.bindTexture(i,e.TEXTURE_UNIT_FOR_UPDATES)},i.setSamplingMode=function(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)},i.setWrapMode=function(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,e._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)},i.applyChanges=function(){const t=this._context.gl,i=this._descriptor;this._samplingModeDirty&&(e._applySamplingMode(t,i),this._samplingModeDirty=!1),this._wrapModeDirty&&(e._applyWrapMode(t,i),this._wrapModeDirty=!1)},i._deriveInternalFormat=function(e,t){if(this._context.type===n.ContextType.WEBGL1)return e;switch(t){case s.PixelType.FLOAT:switch(e){case s.PixelFormat.RGBA:return s.SizedPixelFormat.RGBA32F;case s.PixelFormat.RGB:return s.SizedPixelFormat.RGB32F;default:throw new Error("Unable to derive format")}case s.PixelType.UNSIGNED_BYTE:switch(e){case s.PixelFormat.RGBA:return s.SizedPixelFormat.RGBA8;case s.PixelFormat.RGB:return s.SizedPixelFormat.RGB8}default:return e}},i._configurePixelStorage=function(){const e=this._context.gl,{unpackAlignment:t,flipped:i,preMultiplyAlpha:r}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)},i._texStorage=function(e,t,i,r,o,a){const n=this._context.gl;if(!l(n))throw new Error("Immutable textures are not supported in WebGL1");if(!d(t))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const s=i?E(e,r,o,a):1;if(x(e)){if(null==a)throw new Error("Missing depth dimension for 3D texture upload");n.texStorage3D(e,s,t,r,o,a)}else n.texStorage2D(e,s,t,r,o);this._wasImmutablyAllocated=!0},i._texImage=function(e,t,i,r,a,s,l){const p=this._context.gl;let h=null;const u=this._context.type===n.ContextType.WEBGL2,d=x(e),{isImmutable:_,pixelFormat:m,dataType:c}=this._descriptor;if(u&&(h=p),u||!T(l))if(_){if(o.isSome(l)){const i=l;if(d){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");h.texSubImage3D(e,t,0,0,0,r,a,s,m,c,i)}else p.texSubImage2D(e,t,0,0,r,a,m,c,i)}}else{const n=o.unwrap(l);if(d){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");h.texImage3D(e,t,i,r,a,s,0,m,c,n)}else p.texImage2D(e,t,i,r,a,0,m,c,n)}else p.texImage2D(e,0,i,m,c,l)},i._compressedTexImage=function(e,t,i,r,a,s,l){const p=this._context.gl;let h=null;const u=x(e),d=this._descriptor.isImmutable;if(u){if(this._context.type!==n.ContextType.WEBGL2)throw new Error("3D textures are not supported in WebGL1");h=p}if(d){if(o.isSome(l))if(u){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");h.compressedTexSubImage3D(e,t,0,0,0,r,a,s,i,l)}else p.compressedTexSubImage2D(e,t,0,0,r,a,i,l)}else if(u){if(null==s)throw new Error("Missing depth dimension for 3D texture upload");h.compressedTexImage3D(e,t,i,r,a,s,0,l)}else p.compressedTexImage2D(e,t,i,r,a,0,l)},i._forEachMipmapLevel=function(e,t=1/0){let{width:i,height:r,depth:o,hasMipmap:a,target:n}=this._descriptor;const l=n===s.TextureType.TEXTURE_3D;if(null==i||null==r||l&&null==o)throw new Error("Missing texture dimensions for mipmap calculation");for(let s=0;e(s,i,r,o),a&&(1!==i||1!==r||l&&1!==o)&&!(s>=t);++s)i=Math.max(1,i>>1),r=Math.max(1,r>>1),l&&(o=Math.max(1,o>>1))},e._validateTexture=function(e,t){(null!=t.width&&t.width<0||null!=t.height&&t.height<0||null!=t.depth&&t.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=l(e.gl),o=null!=t.width&&r.isPowerOfTwo(t.width)&&null!=t.height&&r.isPowerOfTwo(t.height);i||!t.isImmutable&&!x(t.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||o||("number"==typeof t.wrapMode?t.wrapMode!==s.TextureWrapMode.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):t.wrapMode.s===s.TextureWrapMode.CLAMP_TO_EDGE&&t.wrapMode.t===s.TextureWrapMode.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),t.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))},e._applySamplingMode=function(e,t){let i=t.samplingMode,r=t.samplingMode;i===s.TextureSamplingMode.LINEAR_MIPMAP_NEAREST||i===s.TextureSamplingMode.LINEAR_MIPMAP_LINEAR?(i=s.TextureSamplingMode.LINEAR,t.hasMipmap||(r=s.TextureSamplingMode.LINEAR)):i!==s.TextureSamplingMode.NEAREST_MIPMAP_NEAREST&&i!==s.TextureSamplingMode.NEAREST_MIPMAP_LINEAR||(i=s.TextureSamplingMode.NEAREST,t.hasMipmap||(r=s.TextureSamplingMode.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,i),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,r)},e._applyWrapMode=function(e,t){"number"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))},e._applyAnisotropicFilteringParameters=function(e,t){const i=e.capabilities.textureFilterAnisotropic;if(!i)return;e.gl.texParameterf(t.target,i.TEXTURE_MAX_ANISOTROPY,t.maxAnisotropy??1)},t._createClass(e,[{key:"glName",get:function(){return this._glName}},{key:"descriptor",get:function(){return this._descriptor}},{key:"isDirty",get:function(){return this._samplingModeDirty||this._wrapModeDirty}}]),e}();function d(e){return e in s.SizedPixelFormat}function _(e){return e in s.CompressedTextureFormat}function m(e){return o.isSome(e)&&"type"in e&&"compressed"===e.type}function c(e){return o.isSome(e)&&"byteLength"in e}function T(e){return o.isSome(e)&&!m(e)&&!c(e)}function x(e){return e===s.TextureType.TEXTURE_3D||e===s.TextureType.TEXTURE_2D_ARRAY}function E(e,t,i,r=1){let o=Math.max(t,i);return e===s.TextureType.TEXTURE_3D&&(o=Math.max(o,r)),Math.round(Math.log(o)/Math.LN2)+1}u.TEXTURE_UNIT_FOR_UPDATES=0,e.Texture=u,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
