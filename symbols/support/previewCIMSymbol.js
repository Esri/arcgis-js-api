/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../core/screenUtils","../cim/CIMSymbolHelper","../cim/CIMSymbolRasterizer","../cim/utils","./previewUtils","./renderUtils"],(function(e,t,l,i,n,o,r,s){"use strict";const a=new n.CIMSymbolRasterizer(null,!0),u=l.px2pt(r.SymbolSizeDefaults.size),y=l.px2pt(r.SymbolSizeDefaults.maxSize),c=l.px2pt(r.SymbolSizeDefaults.lineWidth),h=1;function m(e){const t=e?.size;if("number"==typeof t)return{width:t,height:t};return{width:null!=t&&"object"==typeof t&&"width"in t?t.width:null,height:null!=t&&"object"==typeof t&&"height"in t?t.height:null}}function p(e){return d.apply(this,arguments)}function d(){return(d=t._asyncToGenerator((function*(e,t={}){const{node:r,opacity:p,symbolConfig:d}=t,f="object"==typeof d&&"isSquareFill"in d&&d.isSquareFill,g=t.cimOptions||t,b=g.geometryType||o.mapCIMSymbolToGeometryType(e?.data?.symbol),S=m(t),{feature:w,fieldMap:M}=g;if(null==S.width||null==S.height){const t=yield i.OverrideHelper.resolveSymbolOverrides(e.data,w,null,M,b);if(!t)return null;(e=e.clone()).data={type:"CIMSymbolReference",symbol:t},e.data.primitiveOverrides=null;const l=[];i.CIMSymbolHelper.fetchResources(t,a.resourceManager,l),l.length>0&&(yield Promise.all(l));const{width:n,height:o}=i.CIMSymbolHelper.getEnvelope(t,null,a.resourceManager);S.width="esriGeometryPolygon"===b?u:"esriGeometryPolyline"===b?c:null!=n&&isFinite(n)?Math.min(n,y):u,S.height="esriGeometryPolygon"===b?u:null!=o&&isFinite(o)?Math.max(Math.min(o,y),h):u}const v=yield a.rasterizeCIMSymbolAsync(e,w,S,f||"esriGeometryPolygon"!==b?n.GeometryStyle.Preview:n.GeometryStyle.Legend,M,b);if(!v)return null;const{width:C,height:I}=v,x=document.createElement("canvas");x.width=C,x.height=I;x.getContext("2d").putImageData(v,0,0);const z=l.pt2px(S.width),G=l.pt2px(S.height),P=new Image(z,G);P.src=x.toDataURL(),null!=p&&(P.style.opacity=`${p}`);let D=P;if(null!=t.effectView){const e={shape:{type:"image",x:0,y:0,width:z,height:G,src:P.src},fill:null,stroke:null,offset:[0,0]};D=s.renderSymbol([[e]],[z,G],{effectView:t.effectView})}return r&&D&&r.appendChild(D),D}))).apply(this,arguments)}e.previewCIMSymbol=p,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
