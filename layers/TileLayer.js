/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../chunks/_rollupPluginBabelHelpers","../chunks/tslib.es6","../core/has","../core/maybe","../core/Logger","../core/accessorSupport/decorators/property","../core/accessorSupport/decorators/cast","../core/accessorSupport/decorators/reader","../core/accessorSupport/decorators/subclass","../core/accessorSupport/decorators/writer","../core/Error","../core/urlUtils","../core/uuid","../portal/support/resourceExtension","../geometry/SpatialReference","../geometry","../request","./Layer","../core/MultiOriginJSONSupport","./support/arcgisLayerUrl","./support/commonProperties","./mixins/OperationalLayer","./mixins/ArcGISService","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/PortalLayer","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","../core/HandleOwner","./mixins/ArcGISCachedService","./mixins/ArcGISMapService","./support/Sublayer","./mixins/SublayersOwner"],(function(e,r,t,a,o,i,s,n,l,c,p,u,d,y,h,_,f,v,S,m,g,b,O,w,L,T,R,A,x,M,P,I,U){"use strict";const C=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let W=function(r){function t(...e){var t;return(t=r.call(this,...e)||this).listMode="show",t.isReference=null,t.operationalLayerType="ArcGISTiledMapServiceLayer",t.resampling=!0,t.sourceJSON=null,t.spatialReference=null,t.path=null,t.sublayers=null,t.type="tile",t.url=null,t}e._inheritsLoose(t,r);var o=t.prototype;return o.normalizeCtorArgs=function(e,r){return"string"==typeof e?{url:e,...r}:e},o.load=function(e){const r=a.isSome(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).then((()=>this._fetchService(r)),(()=>this._fetchService(r)))),Promise.resolve(this)},o.readSpatialReference=function(e,r){return(e=e||r.tileInfo&&r.tileInfo.spatialReference)&&h.fromJSON(e)},o.writeSublayers=function(e,r,t,a){if(!this.loaded||!e)return;const o=e.slice().reverse().flatten((({sublayers:e})=>e&&e.toArray().reverse())).toArray(),i=[],s={writeSublayerStructure:!1,...a};o.forEach((e=>{const r=e.write({},s);i.push(r)}));i.some((e=>Object.keys(e).length>1))&&(r.layers=i)},o.castTileServers=function(e){return Array.isArray(e)?e.map((e=>u.urlToObject(e).path)):null},o.fetchTile=function(e,r,t,a={}){const{signal:o,timestamp:i}=a,s=this.getTileUrl(e,r,t),n={responseType:"image",signal:o};return null!=i&&(n.query={_ts:a.timestamp}),f(s,n).then((e=>e.data))},o.getTileUrl=function(e,r,t){const a=!this.tilemapCache&&this.supportsBlankTile,o=u.objectToQuery({...this.parsedUrl.query,blankTile:!a&&null,...this.customParameters}),i=this.tileServers;return`${i&&i.length?i[r%i.length]:this.parsedUrl.path}/tile/${e}/${r}/${t}${o?"?"+o:""}`},o._fetchService=function(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(null!=this.sourceJSON.bandCount&&null!=this.sourceJSON.pixelSizeX)throw new p("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new p("tile-layer:undefined-url","layer's url is not defined");const o=m.parse(this.parsedUrl.path);if(a.isSome(o)&&"ImageServer"===o.serverType)throw new p("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},responseType:"json",signal:e}).then(r,t)})).then((r=>{if(r.ssl&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),10.1===this.version&&!m.isHostedAgolService(this.url))return this._fetchServerVersion(this.url,e).then((e=>{this.read({currentVersion:e})})).catch((()=>{}))}))},o._fetchServerVersion=function(e,r){if(!m.isArcGISUrl(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return f(t,{query:{f:"json",...this.customParameters},responseType:"json",signal:r}).then((e=>{if(e.data&&e.data.currentVersion)return e.data.currentVersion;throw new p("tile-layer:version-not-available")}))},o._getMapName=function(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r&&r[2]},o._getDefaultAttribution=function(e){if(!e)return;let r;e=e.toLowerCase();for(let t=0,a=C.length;t<a;t++)if(r=C[t],r.toLowerCase().indexOf(e)>-1)return u.makeAbsolute("//static.arcgis.com/attribution/"+r)},o._getDefaultTileServers=function(e){const r=-1!==e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i),t=-1!==e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i);return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]},e._createClass(t,[{key:"attributionDataUrl",get:function(){var e;const r=null==(e=this.parsedUrl)?void 0:e.path.toLowerCase();return r&&this._getDefaultAttribution(this._getMapName(r))}},{key:"tileServers",get:function(){return this._getDefaultTileServers(this.parsedUrl.path)}}]),t}(w.BlendLayer(U.SublayersOwner(A.ScaleRangeLayer(R.RefreshableLayer(b.OperationalLayer(T.PortalLayer(M.ArcGISCachedService(P.ArcGISMapService(O.ArcGISService(S.MultiOriginJSONMixin(x.HandleOwnerMixin(L.CustomParametersMixin(v)))))))))))));return r.__decorate([i.property({readOnly:!0})],W.prototype,"attributionDataUrl",null),r.__decorate([i.property({type:["show","hide","hide-children"]})],W.prototype,"listMode",void 0),r.__decorate([i.property({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],W.prototype,"isReference",void 0),r.__decorate([i.property({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],W.prototype,"operationalLayerType",void 0),r.__decorate([i.property({type:Boolean})],W.prototype,"resampling",void 0),r.__decorate([i.property()],W.prototype,"sourceJSON",void 0),r.__decorate([i.property({type:h})],W.prototype,"spatialReference",void 0),r.__decorate([n.reader("spatialReference",["spatialReference","tileInfo"])],W.prototype,"readSpatialReference",null),r.__decorate([i.property({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],W.prototype,"path",void 0),r.__decorate([i.property({readOnly:!0})],W.prototype,"sublayers",void 0),r.__decorate([c.writer("sublayers",{layers:{type:[I]}})],W.prototype,"writeSublayers",null),r.__decorate([i.property({json:{read:!1,write:!1}})],W.prototype,"popupEnabled",void 0),r.__decorate([i.property()],W.prototype,"tileServers",null),r.__decorate([s.cast("tileServers")],W.prototype,"castTileServers",null),r.__decorate([i.property({readOnly:!0,json:{read:!1}})],W.prototype,"type",void 0),r.__decorate([i.property(g.url)],W.prototype,"url",void 0),W=r.__decorate([l.subclass("esri.layers.TileLayer")],W),W}));
