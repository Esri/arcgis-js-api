/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{JSONMap as e}from"../../../core/jsonMap.js";import{isNone as t,isSome as r}from"../../../core/maybe.js";import{getUnitString as i}from"../../../core/unitUtils.js";import{getGeometryExtent as o}from"../../../geometry/support/extentUtils.js";import{fromJSON as n}from"../../../geometry/support/jsonUtils.js";import{normalizeCentralMeridian as s}from"../../../geometry/support/normalizeUtils.js";import{isGeographic as l,isWebMercator as a,WGS84 as m}from"../../../geometry/support/spatialReferenceUtils.js";import{getCentroidOptimizedGeometry as c}from"../centroid.js";import{quantizeOptimizedGeometry as u,convertToPoint as f,generalizeOptimizedGeometry as p,removeZMValues as y,convertToPolyline as g,convertToPolygon as S,convertToMultipoint as R}from"../featureConversionUtils.js";import d from"../OptimizedGeometry.js";import{checkProjectionSupport as h,project as w}from"./projectionSupport.js";const j=new e({esriSRUnit_Meter:"meters",esriSRUnit_Kilometer:"kilometers",esriSRUnit_Foot:"feet",esriSRUnit_StatuteMile:"miles",esriSRUnit_NauticalMile:"nautical-miles",esriSRUnit_USNauticalMile:"us-nautical-miles"}),U=Object.freeze({}),M=new d,F=new d,G=new d,N={esriGeometryPoint:f,esriGeometryPolyline:g,esriGeometryPolygon:S,esriGeometryMultipoint:R};function O(e,r,i,o=e.hasZ,n=e.hasM){if(t(r))return null;const s=e.hasZ&&o,l=e.hasM&&n;if(i){const t=u(G,r,e.hasZ,e.hasM,"esriGeometryPoint",i,o,n);return f(t,s,l)}return f(r,s,l)}function _(e,t,r){return"esriGeometryPolygon"===e.geometryType&&t&&(t.centroid||t.geometry)?(t.centroid||(t.centroid=c(new d,t.geometry,e.hasZ,e.hasM)),O(e,t.centroid,r)):null}function J(e,i,o,n,s,l,a=i,m=o){const c=i&&a,f=o&&m,g=r(n)?"coords"in n?n:n.geometry:null;if(t(g))return null;if(s){let t=p(F,g,i,o,e,s,a,m);return l&&(t=u(G,t,c,f,e,l)),N[e](t,c,f)}if(l){const t=u(G,g,i,o,e,l,a,m);return N[e](t,c,f)}return y(M,g,i,o,a,m),N[e](M,c,f)}async function P(e,t,r){const{outFields:i,orderByFields:o,groupByFieldsForStatistics:n,outStatistics:s}=e;if(i)for(let l=0;l<i.length;l++)i[l]=i[l].trim();if(o)for(let l=0;l<o.length;l++)o[l]=o[l].trim();if(n)for(let l=0;l<n.length;l++)n[l]=n[l].trim();if(s)for(let l=0;l<s.length;l++)s[l].onStatisticField&&(s[l].onStatisticField=s[l].onStatisticField.trim());return e.geometry&&!e.outSR&&(e.outSR=e.geometry.spatialReference),v(e,t,r)}async function v(e,r,i){if(!e)return null;let{where:l}=e;if(e.where=l=l&&l.trim(),(!l||/^1 *= *1$/.test(l)||r&&r===l)&&(e.where=null),!e.geometry)return e;let a=await Z(e);if(e.distance=0,e.units=null,"esriSpatialRelEnvelopeIntersects"===e.spatialRel){const{spatialReference:t}=e.geometry;a=o(a),a.spatialReference=t}e.geometry=a,await h(a.spatialReference,i);const m=(await s(n(a)))[0];if(t(m))throw U;const c=m.toJSON(),u=await w(c,c.spatialReference,i);if(!u)throw U;return u.spatialReference=i,e.geometry=u,e}async function Z(e){const{geometry:t,distance:r,units:o}=e;if(null==r||"vertexAttributes"in t)return t;const n=t.spatialReference,s=o?j.fromJSON(o):i(n),c=n&&(l(n)||a(n))?t:await h(n,m).then((()=>w(t,m)));return(await b())(c.spatialReference,c,r,s)}async function b(){return(await import("../../../geometry/geometryEngineJSON.js")).geodesicBuffer}function x(e){return e&&z in e?JSON.parse(JSON.stringify(e,B)):e}const z="_geVersion",B=(e,t)=>e!==z?t:void 0;export{U as QUERY_ENGINE_EMPTY_RESULT,x as cleanFromGeometryEngine,_ as getCentroid,J as getGeometry,P as normalizeQuery,v as normalizeQueryLike,O as transformCentroid};
