/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../../core/Error.js";import{WhereClauseCache as i}from"../../../core/sql/WhereClauseCache.js";const s=new i(50,500),n="feature-store:unsupported-query",t=" as ",r=new Set(["esriFieldTypeOID","esriFieldTypeSmallInteger","esriFieldTypeInteger","esriFieldTypeSingle","esriFieldTypeDouble","esriFieldTypeLong","esriFieldTypeDate"]);function o(i,t){if(!t)return!0;const r=s.get(t,i);if(!r)throw new e(n,"invalid SQL expression",{where:t});if(!r.isStandardized)throw new e(n,"where clause is not standard",{where:t});return c(i,r.fieldNames,"where clause contains missing fields"),!0}function a(i,t,r){if(!t)return!0;const o=s.get(t,i);if(!o)throw new e(n,"invalid SQL expression",{having:t});if(!o.isAggregate)throw new e(n,"having does not contain a valid aggregate function",{having:t});const a=o.fieldNames;c(i,a,"having contains missing fields");if(!o.getExpressions().every((e=>{const{aggregateType:s,field:n}=e,t=i.has(n)&&i.get(n).name;return r.some((e=>{const{onStatisticField:n,statisticType:r}=e;return(i.has(n)&&i.get(n).name)===t&&r.toLowerCase().trim()===s}))})))throw new e(n,"expressions in having should also exist in outStatistics",{having:t});return!0}function l(e,i){return e?s.get(e,i):null}function c(i,s,t,r=!0){const o=[];for(const u of s)if("*"!==u&&!i.has(u))if(r){const s=d(u);try{const t=l(s,i);if(!t)throw new e(n,"invalid SQL expression",{where:s});if(!t.isStandardized)throw new e(n,"expression is not standard",{clause:t});c(i,t.fieldNames,"expression contains missing fields")}catch(a){const e=a&&a.details;if(e&&(e.clause||e.where))throw a;e&&e.missingFields?o.push(...e.missingFields):o.push(u)}}else o.push(u);if(o.length)throw new e(n,t,{missingFields:o})}function d(e){return e.split(t)[0]}function u(e){return e.split(t)[1]}function f(e,i){const s=i.get(e);return!!s&&!r.has(s.type)}export{u as getAliasFromFieldName,d as getExpressionFromFieldName,l as getWhereClause,f as hasInvalidFieldType,c as validateFields,a as validateHaving,o as validateWhere};
