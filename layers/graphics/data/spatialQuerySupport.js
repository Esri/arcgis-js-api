/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["require","exports","../../../core/Error","../../../geometry/support/spatialReferenceUtils","../../../geometry/support/contains","../../../geometry/support/intersects","../../../geometry/support/jsonUtils","../OptimizedGeometry","../featureConversionUtils","../contains","./projectionSupport","./utils"],(function(e,t,r,i,n,o,s,l,a,p,u,y){"use strict";const c="feature-store:unsupported-query",m={esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelDisjoint:"disjoint",esriSpatialRelEnvelopeIntersects:"intersects",esriSpatialRelIndexIntersects:null,esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:null},R={spatialRelationship:{esriSpatialRelIntersects:!0,esriSpatialRelContains:!0,esriSpatialRelWithin:!0,esriSpatialRelCrosses:!0,esriSpatialRelDisjoint:!0,esriSpatialRelTouches:!0,esriSpatialRelOverlaps:!0,esriSpatialRelEnvelopeIntersects:!0,esriSpatialRelIndexIntersects:!1,esriSpatialRelRelation:!1},queryGeometry:{esriGeometryPoint:!0,esriGeometryMultipoint:!0,esriGeometryPolyline:!0,esriGeometryPolygon:!0,esriGeometryEnvelope:!0},layerGeometry:{esriGeometryPoint:!0,esriGeometryMultipoint:!0,esriGeometryPolyline:!0,esriGeometryPolygon:!0,esriGeometryEnvelope:!1}};function f(e){return!0===R.spatialRelationship[e]}function S(e){return!0===R.queryGeometry[s.getJsonType(e)]}function g(e){return!0===R.layerGeometry[e]}function G(){return new Promise((function(t,r){e(["../../../geometry/geometryEngineJSON"],t,r)}))}function P(e,t,r,i,u){if(s.isPolygon(t)&&"esriGeometryPoint"===r&&("esriSpatialRelIntersects"===e||"esriSpatialRelContains"===e)){const e=a.convertFromPolygon(new l,t,!1,!1);return Promise.resolve((t=>p.polygonContainsPoint(e,!1,!1,t)))}if(s.isPolygon(t)&&"esriGeometryMultipoint"===r){const r=a.convertFromPolygon(new l,t,!1,!1);if("esriSpatialRelContains"===e)return Promise.resolve((e=>p.polygonContainsMultipoint(r,!1,!1,e,i,u)))}if(s.isExtent(t)&&"esriGeometryPoint"===r&&("esriSpatialRelIntersects"===e||"esriSpatialRelContains"===e))return Promise.resolve((e=>n.extentContainsPoint(t,y.getGeometry(r,i,u,e))));if(s.isExtent(t)&&"esriGeometryMultipoint"===r&&"esriSpatialRelContains"===e)return Promise.resolve((e=>n.extentContainsMultipoint(t,y.getGeometry(r,i,u,e))));if(s.isExtent(t)&&"esriSpatialRelIntersects"===e){const e=o.getExtentIntersector(r);return Promise.resolve((n=>e(t,y.getGeometry(r,i,u,n))))}return G().then((n=>{const o=n[m[e]].bind(null,t.spatialReference,t);return e=>o(y.getGeometry(r,i,u,e))}))}async function h(e,t,n){const{spatialRel:o,geometry:s}=e;if(s){if(!f(o))throw new r(c,"Unsupported query spatial relationship",{query:e});if(i.isValid(s.spatialReference)&&i.isValid(n)){if(!S(s))throw new r(c,"Unsupported query geometry type",{query:e});if(!g(t))throw new r(c,"Unsupported layer geometry type",{query:e});if(e.outSR)return u.checkProjectionSupport(e.geometry&&e.geometry.spatialReference,e.outSR)}}}function v(e){if(s.isExtent(e))return!0;if(s.isPolygon(e)){for(const t of e.rings){if(5!==t.length)return!1;if(t[0][0]!==t[1][0]||t[0][0]!==t[4][0]||t[2][0]!==t[3][0]||t[0][1]!==t[3][1]||t[0][1]!==t[4][1]||t[1][1]!==t[2][1])return!1}return!0}return!1}t.canQueryWithRBush=v,t.checkSpatialQuerySupport=h,t.getSpatialQueryOperator=P,Object.defineProperty(t,"__esModule",{value:!0})}));
