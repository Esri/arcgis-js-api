/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
define(["exports"],(function(t){"use strict";function n(t,n){return t?n?4:3:n?3:2}function e(t,e,I,u,l){if(!e||!e.lengths.length)return null;const N="upperLeft"===(null==l?void 0:l.originPosition)?-1:1;t.lengths.length&&(t.lengths.length=0),t.coords.length&&(t.coords.length=0);const s=t.coords,c=[],i=I?[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY]:[Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.POSITIVE_INFINITY,Number.NEGATIVE_INFINITY],{lengths:f,coords:T}=e,h=n(I,u);let g=0;for(const n of f){const t=r(i,T,g,n,I,u,N);t&&c.push(t),g+=n*h}if(c.sort(((t,n)=>{let e=N*t[2]-N*n[2];return 0===e&&I&&(e=t[4]-n[4]),e})),c.length){let t=6*c[0][2];s[0]=c[0][0]/t,s[1]=c[0][1]/t,I&&(t=6*c[0][4],s[2]=0!==t?c[0][3]/t:0),(s[0]<i[0]||s[0]>i[1]||s[1]<i[2]||s[1]>i[3]||I&&(s[2]<i[4]||s[2]>i[5]))&&(s.length=0)}if(!s.length){const t=e.lengths[0]?o(T,0,f[0],I,u):null;if(!t)return null;s[0]=t[0],s[1]=t[1],I&&t.length>2&&(s[2]=t[2])}return t}function r(t,e,r,o,I,u,l=1){const N=n(I,u);let s=r,c=r+N,i=0,f=0,T=0,h=0,g=0;for(let n=0,m=o-1;n<m;n++,s+=N,c+=N){const n=e[s],r=e[s+1],o=e[s+2],u=e[c],l=e[c+1],N=e[c+2];let E=n*l-u*r;h+=E,i+=(n+u)*E,f+=(r+l)*E,I&&(E=n*N-u*o,T+=(o+N)*E,g+=E),n<t[0]&&(t[0]=n),n>t[1]&&(t[1]=n),r<t[2]&&(t[2]=r),r>t[3]&&(t[3]=r),I&&(o<t[4]&&(t[4]=o),o>t[5]&&(t[5]=o))}if(h*l>0&&(h*=-1),g*l>0&&(g*=-1),!h)return null;const E=[i,f,.5*h];return I&&(E[3]=T,E[4]=.5*g),E}function o(t,e,r,o,s){const c=n(o,s);let i=e,f=e+c,T=0,h=0,g=0,E=0;for(let n=0,m=r-1;n<m;n++,i+=c,f+=c){const n=t[i],e=t[i+1],r=t[i+2],s=t[f],c=t[f+1],m=t[f+2],_=o?u(n,e,r,s,c,m):I(n,e,s,c);if(_)if(T+=_,o){const t=N(n,e,r,s,c,m);h+=_*t[0],g+=_*t[1],E+=_*t[2]}else{const t=l(n,e,s,c);h+=_*t[0],g+=_*t[1]}}return T>0?o?[h/T,g/T,E/T]:[h/T,g/T]:r>0?o?[t[e],t[e+1],t[e+2]]:[t[e],t[e+1]]:null}function I(t,n,e,r){const o=e-t,I=r-n;return Math.sqrt(o*o+I*I)}function u(t,n,e,r,o,I){const u=r-t,l=o-n,N=I-e;return Math.sqrt(u*u+l*l+N*N)}function l(t,n,e,r){return[t+.5*(e-t),n+.5*(r-n)]}function N(t,n,e,r,o,I){return[t+.5*(r-t),n+.5*(o-n),e+.5*(I-e)]}t.getCentroidOptimizedGeometry=e,t.lineCentroid=o,Object.defineProperty(t,"__esModule",{value:!0})}));
