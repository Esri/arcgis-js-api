/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../Graphic.js";import r from"../../../core/Collection.js";import s from"../../../core/Error.js";import{HandleOwnerMixin as o}from"../../../core/HandleOwner.js";import i from"../../../core/has.js";import n from"../../../core/Loadable.js";import a from"../../../core/Logger.js";import{isSome as l,isNone as u}from"../../../core/maybe.js";import{EsriPromiseMixin as p}from"../../../core/Promise.js";import{open as c}from"../../../core/workers/workers.js";import{property as d}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import{ensureType as h}from"../../../core/accessorSupport/ensureType.js";import{shared as y}from"../../../core/accessorSupport/decorators/shared.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{unapplyEditsZUnitScaling as f}from"../../../rest/query/operations/editsZScale.js";import{applyFeatureSetZUnitScaling as g}from"../../../rest/query/operations/queryZScale.js";import _ from"../../../rest/support/FeatureSet.js";import j from"../../../geometry/Extent.js";import S from"../../../geometry/Polygon.js";import{typeKebabDictionary as b}from"../../../geometry/support/typeUtils.js";let T=0;const F=a.getLogger("esri.layers.graphics.sources.MemorySource");let G=class extends(n.LoadableMixin(p(o(r)))){constructor(e){super(e),this._idToClientGraphic=null,this.type="memory"}load(e){const t=l(e)?e.signal:null;return this.addResolvingPromise(this._startWorker(t)),Promise.resolve(this)}destroy(){this._connection?.close(),this._connection=null}get workerGeometryType(){const e=this.layer?.geometryType;return e?this._geometryTypeRequiresClientGraphicMapping(e)?"polygon":e:null}applyEdits(e){return this.load().then((()=>this._applyEdits(e)))}openPorts(){return this.load().then((()=>this._connection.openPorts()))}async queryFeatures(e,t={}){await this.load(t);const r=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);g(e,this.layer.spatialReference,r);const s=_.fromJSON(r);if(!this._requiresClientGraphicMapping())return s;const o=this.layer.objectIdField;for(const i of s.features){const e=i.attributes[o],t=this._idToClientGraphic.get(e);t&&(i.geometry=t.geometry)}return s.geometryType=this.layer.geometryType,s}async queryFeaturesJSON(e,t={}){if(this._requiresClientGraphicMapping())throw new s("query-features-json:unsupported","Cannot query in JSON format for client only geometry types (mesh and extent)");await this.load(t);const r=await this._connection.invoke("queryFeatures",e?e.toJSON():null,t);return g(e,this.layer.spatialReference,r),r}queryFeatureCount(e,t={}){return this.load(t).then((()=>this._connection.invoke("queryFeatureCount",e?e.toJSON():null,t)))}queryObjectIds(e,t={}){return this.load(t).then((()=>this._connection.invoke("queryObjectIds",e?e.toJSON():null,t)))}queryExtent(e,t={}){return this.load(t).then((()=>this._connection.invoke("queryExtent",e?e.toJSON():null,t))).then((e=>({count:e.count,extent:j.fromJSON(e.extent)})))}querySnapping(e,t={}){return this.load(t).then((()=>this._connection.invoke("querySnapping",e,t)))}async _applyEdits(e){if(!this._connection)throw new s("feature-layer-source:edit-failure","Memory source not loaded");const t=this.layer.objectIdField;let r=null;const o=[],i=[];await Promise.all([this._prepareClientMapping(e.addFeatures,null),this._prepareClientMapping(e.updateFeatures,null)]);const n=e=>"objectId"in e&&null!=e.objectId?e.objectId:"attributes"in e&&null!=e.attributes[t]?e.attributes[t]:null;if(e.addFeatures&&(r=this._prepareAddFeatures(e.addFeatures)),e.deleteFeatures)for(const s of e.deleteFeatures){const e=n(s);null!=e&&o.push(e)}const a=e.updateFeatures&&this._idToClientGraphic?new Map:null;if(e.updateFeatures)for(const s of e.updateFeatures)if(i.push(this._serializeFeature(s)),a){const e=n(s);null!=e&&a.set(e,s)}f(r?r.features:null,i,this.layer.spatialReference);const{fullExtent:l,featureEditResults:u}=await this._connection.invoke("applyEdits",{adds:r?r.features:[],updates:i,deletes:o});return this.fullExtent=l,r&&r.finish(u.uidToObjectId),this._updateClientGraphicIds(a,u),this._createEditsResult(u)}async _prepareClientMapping(e,t){if("mesh"!==this.layerOrSourceGeometryType||u(e))return;const r=[];for(const{geometry:s}of e)!l(s)||"mesh"!==s.type||s.hasExtent||s.loaded||r.push(s.load({signal:t}));r.length&&await Promise.all(r)}_updateClientGraphicIds(e,t){if(this._idToClientGraphic){if(e)for(const r of t.updateResults){if(!r.success)continue;const t=e.get(r.objectId);null!=t&&this._addIdToClientGraphic(t)}for(const e of t.deleteResults)e.success&&this._idToClientGraphic.delete(e.objectId)}}_createEditsResult(e){return{addFeatureResults:e.addResults?e.addResults.map(this._createFeatureEditResult,this):[],updateFeatureResults:e.updateResults?e.updateResults.map(this._createFeatureEditResult,this):[],deleteFeatureResults:e.deleteResults?e.deleteResults.map(this._createFeatureEditResult,this):[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}_createFeatureEditResult(e){const t=!0===e.success?null:e.error||{code:void 0,description:void 0};return{objectId:e.objectId,globalId:e.globalId,error:t?new s("feature-layer-source:edit-failure",t.description,{code:t.code}):null}}_prepareAddFeatures(e){const t=new Map,r=new Array(e.length);let s=null;for(let i=0;i<e.length;i++){const o=e[i],n=this._serializeFeature(o);!s&&l(o.geometry)&&(s=o.geometry.type),r[i]=n,t.set(`${n.uid}`,o)}const o=this;return{features:r,inferredGeometryType:s,finish(e){const r=o.sourceJSON.objectIdField;for(const s in e){const i=e[s],n=t.get(s);n&&(n.attributes||(n.attributes={}),-1===i?delete n.attributes[r]:n.attributes[r]=i,o._addIdToClientGraphic(n))}}}}_addIdToClientGraphic(e){if(!this._idToClientGraphic)return;const t=this.sourceJSON.objectIdField,r=e.attributes&&e.attributes[t];null!=r&&this._idToClientGraphic.set(r,e)}get layerOrSourceGeometryType(){return this.layer?.geometryType??this.sourceJSON?.geometryType}_requiresClientGraphicMapping(){return this._geometryTypeRequiresClientGraphicMapping(this.layerOrSourceGeometryType)}_geometryRequiresClientGraphicMapping(e){return this._geometryTypeRequiresClientGraphicMapping(e.type)}_geometryTypeRequiresClientGraphicMapping(e){return"mesh"===e||"multipatch"===e||"extent"===e}_serializeFeature(e){const{attributes:t}=e,r=this._geometryForSerialization(e),s=(T++).toString();return r?{uid:s,geometry:r.toJSON(),attributes:t}:{uid:s,attributes:t}}_geometryForSerialization(e){const{geometry:t}=e;if(u(t))return null;if(this._geometryRequiresClientGraphicMapping(t)){return t.extent?S.fromExtent(t.extent):null}return t}async _startWorker(e){this._connection=await c("MemorySourceWorker",{strategy:i("feature-layers-workers")?"dedicated":"local",signal:e});const{fields:t,spatialReference:r,objectIdField:s,hasM:o,hasZ:n,timeInfo:a}=this.layer,l="defaults"===this.layer.originOf("spatialReference");await this._prepareClientMapping(this.items,e);const u=this._prepareAddFeatures(this.items);this.handles.add(this.on("before-changes",(e=>{F.error("Source modifications will not propagate after layer has been loaded. Please use .applyEdits() instead"),e.preventDefault()})));const p={features:u.features,fields:t&&t.map((e=>e.toJSON())),geometryType:b.toJSON(this.workerGeometryType),hasM:"mesh"!==this.layerOrSourceGeometryType&&o,hasZ:"mesh"===this.layerOrSourceGeometryType||n,objectIdField:s,spatialReference:l?null:r&&r.toJSON(),timeInfo:a?a.toJSON():null},d=await this._connection.invoke("load",p,{signal:e});for(const i of d.warnings)F.warn(i.message,{layer:this.layer,warning:i});d.featureErrors.length&&F.warn(`Encountered ${d.featureErrors.length} validation errors while loading features`,d.featureErrors);const h=d.layerDefinition;this._geometryTypeRequiresClientGraphicMapping(u.inferredGeometryType)&&(h.geometryType=b.toJSON(u.inferredGeometryType)),this.sourceJSON=h,this._requiresClientGraphicMapping()&&(this._idToClientGraphic=new Map),u.finish(d.assignedObjectIds)}};e([y({Type:t,ensureType:h(t)})],G.prototype,"itemType",void 0),e([d()],G.prototype,"type",void 0),e([d({constructOnly:!0})],G.prototype,"layer",void 0),e([d({readOnly:!0})],G.prototype,"workerGeometryType",null),e([d()],G.prototype,"sourceJSON",void 0),G=e([m("esri.layers.graphics.sources.MemorySource")],G);export{G as MemorySource};
