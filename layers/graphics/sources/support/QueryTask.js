/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as t}from"../../../../chunks/tslib.es6.js";import e from"../../../../core/Error.js";import r from"../../../../core/has.js";import{isNone as o,isSome as s}from"../../../../core/maybe.js";import{whenOrAbort as i}from"../../../../core/promiseUtils.js";import{property as u}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../../../core/accessorSupport/decorators/subclass.js";import{DataLayerSource as a}from"../../../support/source/DataLayerSource.js";import{executeRawQueryJSON as c}from"../../../../rest/query/executeQueryJSON.js";import{executeRawQueryPBF as p}from"../../../../rest/query/executeQueryPBF.js";import m from"../../../../rest/support/FeatureSet.js";import f from"../../../../rest/support/Query.js";import{executeAttachmentQuery as l}from"../../../../rest/query/executeAttachmentQuery.js";import{executeForCount as h}from"../../../../rest/query/executeForCount.js";import{executeForExtent as d}from"../../../../rest/query/executeForExtent.js";import{executeForIds as y}from"../../../../rest/query/executeForIds.js";import{executeRelationshipQuery as F,executeRelationshipQueryForCount as S}from"../../../../rest/query/executeRelationshipQuery.js";import{executeTopFeaturesQuery as j}from"../../../../rest/query/executeTopFeaturesQuery.js";import{executeForTopIds as D}from"../../../../rest/query/executeForTopIds.js";import{executeForTopExtents as x}from"../../../../rest/query/executeForTopExtents.js";import{executeForTopCount as O}from"../../../../rest/query/executeForTopCount.js";import b from"../../../../rest/support/RelationshipQuery.js";import q from"../../../../tasks/Task.js";let g=class extends q{constructor(t){super(t),this.dynamicDataSource=null,this.fieldsIndex=null,this.format="json",this.gdbVersion=null,this.infoFor3D=null,this.sourceSpatialReference=null}execute(t,e){return this.executeJSON(t,e).then((r=>this.featureSetFromJSON(t,r,e)))}async executeJSON(t,e){const o={...this.requestOptions,...e},s=this._normalizeQuery(t),i=null!=t.outStatistics?.[0],u=r("featurelayer-pbf-statistics"),n=!i||u;let a;if("pbf"===this.format&&n)try{a=await p(this.url,s,o)}catch(m){if("query:parsing-pbf"!==m.name)throw m;this.format="json"}return"json"!==this.format&&n||(a=await c(this.url,s,o)),this._normalizeFields(a.fields),a}async featureSetFromJSON(t,e,r){if(!this._queryIs3DObjectFormat(t)||o(this.infoFor3D)||!e.features||!e.features.length)return m.fromJSON(e);const{meshFeatureSetFromJSON:s}=await i(import("../../../../rest/support/meshFeatureSet.js"),r);return s(t,this.infoFor3D,e)}executeForCount(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t);return h(this.url,o,r)}executeForExtent(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t);return d(this.url,o,r)}executeForIds(t,e){const r={...this.requestOptions,...e},o=this._normalizeQuery(t);return y(this.url,o,r)}executeRelationshipQuery(t,e){t=b.from(t);const r={...this.requestOptions,...e};return(this.gdbVersion||this.dynamicDataSource)&&((t=t.clone()).gdbVersion=t.gdbVersion||this.gdbVersion,t.dynamicDataSource=t.dynamicDataSource||this.dynamicDataSource),F(this.url,t,r)}executeRelationshipQueryForCount(t,e){t=b.from(t);const r={...this.requestOptions,...e};return(this.gdbVersion||this.dynamicDataSource)&&((t=t.clone()).gdbVersion=t.gdbVersion||this.gdbVersion,t.dynamicDataSource=t.dynamicDataSource||this.dynamicDataSource),S(this.url,t,r)}executeAttachmentQuery(t,e){const r={...this.requestOptions,...e};return l(this.url,t,r)}executeTopFeaturesQuery(t,e){const r={...this.requestOptions,...e};return j(this.parsedUrl,t,this.sourceSpatialReference,r)}executeForTopIds(t,e){const r={...this.requestOptions,...e};return D(this.parsedUrl,t,r)}executeForTopExtents(t,e){const r={...this.requestOptions,...e};return x(this.parsedUrl,t,r)}executeForTopCount(t,e){const r={...this.requestOptions,...e};return O(this.parsedUrl,t,r)}_normalizeQuery(t){let r=f.from(t);if(r.sourceSpatialReference=r.sourceSpatialReference||this.sourceSpatialReference,(this.gdbVersion||this.dynamicDataSource)&&(r=r===t?r.clone():r,r.gdbVersion=t.gdbVersion||this.gdbVersion,r.dynamicDataSource=t.dynamicDataSource?a.from(t.dynamicDataSource):this.dynamicDataSource),s(this.infoFor3D)&&this._queryIs3DObjectFormat(t)){r=r===t?r.clone():r,r.formatOf3DObjects=null;for(const t of this.infoFor3D.queryFormats){if("3D_glb"===t.id){r.formatOf3DObjects=t.id;break}"3D_gltf"!==t.id||r.formatOf3DObjects||(r.formatOf3DObjects=t.id)}if(!r.formatOf3DObjects)throw new e("query:unsupported-3d-query-formats","Could not find any supported 3D object query format. Only supported formats are 3D_glb and 3D_gltf");if(o(r.outFields)||!r.outFields.includes("*")){r=r===t?r.clone():r,o(r.outFields)&&(r.outFields=[]);const{originX:e,originY:s,originZ:i,translationX:u,translationY:n,translationZ:a,scaleX:c,scaleY:p,scaleZ:m,rotationX:f,rotationY:l,rotationZ:h,rotationDeg:d}=this.infoFor3D.transformFieldRoles;r.outFields.push(e,s,i,u,n,a,c,p,m,f,l,h,d)}}return r}_normalizeFields(t){if(s(this.fieldsIndex)&&s(t))for(const e of t){const t=this.fieldsIndex.get(e.name);t&&Object.assign(e,t.toJSON())}}_queryIs3DObjectFormat(t){return s(this.infoFor3D)&&t.returnGeometry&&"xyFootprint"!==t.multipatchOption&&!t.outStatistics}};t([u({type:a})],g.prototype,"dynamicDataSource",void 0),t([u()],g.prototype,"fieldsIndex",void 0),t([u()],g.prototype,"format",void 0),t([u()],g.prototype,"gdbVersion",void 0),t([u()],g.prototype,"infoFor3D",void 0),t([u()],g.prototype,"sourceSpatialReference",void 0),g=t([n("esri.tasks.QueryTask")],g);const Q=g;export{Q as default};
