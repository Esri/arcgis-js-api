/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import"../../../../geometry.js";import e from"../../../../request.js";import t from"../../../../core/Error.js";import i from"../../../../core/Logger.js";import{createTask as n,isAbortError as r}from"../../../../core/promiseUtils.js";import{urlToObject as s,getFilename as o}from"../../../../core/urlUtils.js";import{projectMany as a}from"../../../../geometry/projection.js";import{jsonAdapter as l}from"../../../../geometry/geometryAdapters/json.js";import{equals as d,isWebMercator as m,WGS84 as u}from"../../../../geometry/support/spatialReferenceUtils.js";import{lngLatToXY as c}from"../../../../geometry/support/webMercatorUtils.js";import{OptimizedFeature as f}from"../../OptimizedFeature.js";import p from"../../OptimizedGeometry.js";import y from"../../data/FeatureStore.js";import{checkProjectionSupport as h}from"../../data/projectionSupport.js";import{QueryEngine as g}from"../../data/QueryEngine.js";import{readRows as F,parseRows as _,inferDelimiter as I}from"../csv/csv.js";import{createDefaultAttributesFunction as w,createDrawingInfo as E}from"./clientSideDefaults.js";import{isValidDate as T,parseNumber as j,inferLocationInfo as N,inferFields as x}from"./inferenceUtils.js";import S from"../../../support/FieldsIndex.js";import{getFieldDefaultValue as q}from"../../../support/fieldUtils.js";import C from"../../../../geometry/SpatialReference.js";const b=E("esriGeometryPoint"),v=["csv"],D=[0,0];class O{constructor(e,t){this.x=e,this.y=t}}class k{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(e,t={}){this.loadOptions=e;const[i]=await Promise.all([this._fetch(t.signal),this._checkProjection(e?.parsingOptions?.spatialReference)]),n=P(i,e);this.locationInfo=n.locationInfo,this.delimiter=n.delimiter,this._queryEngine=this._createQueryEngine(n);const r=await this._createFeatures(i);if(this._queryEngine.featureStore.addMany(r),n.layerDefinition.extent=this._queryEngine.fullExtent,n.layerDefinition.timeInfo){const{start:e,end:t}=this._queryEngine.timeExtent;n.layerDefinition.timeInfo.timeExtent=[e,t]}return n}async applyEdits(){throw new t("csv-layer:editing-not-supported","applyEdits() is not supported on CSVLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){return this.loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=n(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)}),(e=>{this._queryEngine.featureStore.clear(),r(e)||i.getLogger("esri.layers.CSVLayer").error(new t("csv-layer:refresh","An error occurred during refresh",{error:e}))})),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent,timeExtent:this._queryEngine.timeExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(i){const{url:n,customParameters:r}=this.loadOptions;if(!n)throw new t("csv-layer:invalid-source","url not defined");const o=s(n);return(await e(o.path,{query:{...o.query,...r},responseType:"text",signal:i})).data}_createQueryEngine(e){const{objectIdField:t,fields:i,extent:n,timeInfo:r}=e.layerDefinition,s=new y({geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1});return new g({fields:i,geometryType:"esriGeometryPoint",hasM:!1,hasZ:!1,timeInfo:r,objectIdField:t,spatialReference:n.spatialReference||{wkid:4326},cacheSpatialQueries:!0,featureStore:s})}async _createFeatures(e){const{latitudeFieldName:t,longitudeFieldName:i}=this.locationInfo,{objectIdField:n,fieldsIndex:r,spatialReference:s}=this._queryEngine;let o=[];const u=[],y=r.fields.filter((e=>e.name!==n)).map((e=>e.name));let h=0;const g=F(e);g.next();const I={};for(const a of r.fields)if("esriFieldTypeOID"!==a.type&&"esriFieldTypeGlobalID"!==a.type){const e=q(a);void 0!==e&&(I[a.name]=e)}const E=_(g,y,this.delimiter,w(I,n));for(const a of E){const e=this._parseCoordinateValue(a[t]),s=this._parseCoordinateValue(a[i]);if(null!=s&&null!=e&&!isNaN(e)&&!isNaN(s)){a[t]=e,a[i]=s;for(const e in a)if(e!==t&&e!==i)if(r.isDateField(e)){const t=new Date(a[e]);a[e]=T(t,a[e])?t.getTime():null}else if(r.isNumericField(e)){const t=j(a[e]);isNaN(t)?a[e]=null:a[e]=t}a[n]=h,h++,o.push(new O(s,e)),u.push(a)}}if(!d({wkid:4326},s))if(m(s))for(const a of o)[a.x,a.y]=c(a.x,a.y,D);else o=a(l,o,C.WGS84,s,null,null);const N=[];for(let a=0;a<o.length;a++){const{x:e,y:t}=o[a],i=u[a];i[n]=a+1,N.push(new f(new p([],[e,t]),i,null,i[n]))}return N}_parseCoordinateValue(e){if(null==e||""===e)return null;let t=j(e);return(isNaN(t)||Math.abs(t)>181)&&(t=parseFloat(e)),t}async _checkProjection(e){try{await h(u,e)}catch{throw new t("csv-layer:projection-not-supported","Projection not supported")}}}function P(e,i){const n=i.parsingOptions||{},r={delimiter:n.delimiter,layerDefinition:null,locationInfo:{latitudeFieldName:n.latitudeField,longitudeFieldName:n.longitudeField}},s=F(e);let a=s.next().value;if(!a)throw new t("csv-layer:empty-csv","CSV is empty",{csv:e});if(a=a.trim(),!n.delimiter){const e=I(a);if(!e)throw new t("csv-layer:invalid-delimiter","Unable to detect the delimiter from CSV");r.delimiter=e}const l=a.split(r.delimiter).filter((e=>!!e)),d=r.layerDefinition={name:o(i.url,v)||"csv",drawingInfo:b,geometryType:"esriGeometryPoint",objectIdField:null,fields:[],timeInfo:n.timeInfo,extent:{xmin:Number.POSITIVE_INFINITY,ymin:Number.POSITIVE_INFINITY,xmax:Number.NEGATIVE_INFINITY,ymax:Number.NEGATIVE_INFINITY,spatialReference:n.spatialReference||{wkid:102100}}};if(!n.latitudeField||!n.longitudeField){const e=N(l);if(!n.longitudeField&&!e.longitudeFieldName||!n.latitudeField&&!e.latitudeFieldName)throw new t("csv-layer:location-fields-not-found","Unable to identify latitude and longitude fields from the CSV file");r.locationInfo={longitudeFieldName:n.longitudeField||e.longitudeFieldName,latitudeFieldName:n.latitudeField||e.latitudeFieldName}}const m=x(s,r.delimiter,l,r.locationInfo);if(n.fields&&n.fields.length){const e=new Map;for(const t of n.fields)e.set(t.name.toLowerCase(),t);for(const t of m){const i=e.get(t.name.toLowerCase());if(i){const e=t.name;Object.assign(t,i),t.name=e}}}d.fields=m;if(!d.fields.some((e=>"esriFieldTypeOID"===e.type&&(d.objectIdField=e.name,!0)))){const e={name:"__OBJECTID",alias:"__OBJECTID",type:"esriFieldTypeOID",editable:!1,nullable:!1};d.objectIdField=e.name,d.fields.unshift(e)}if(d.timeInfo){const e=new S(d.fields),t=d.timeInfo;if(t.startTimeField){const i=e.get(t.startTimeField);i?(t.startTimeField=i.name,i.type="esriFieldTypeDate"):t.startTimeField=null}if(t.endTimeField){const i=e.get(t.endTimeField);i?(t.endTimeField=i.name,i.type="esriFieldTypeDate"):t.endTimeField=null}if(t.trackIdField){const i=e.get(t.trackIdField);t.trackIdField=i?i.name:null}t.startTimeField||t.endTimeField||(d.timeInfo=null)}return r}export{k as default};
