/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../chunks/tslib.es6","../../geometry","../../rasterRenderers","../../request","../../core/Error","../../core/Logger","../../core/maybe","../../core/accessorSupport/decorators/property","../../core/arrayUtils","../../core/accessorSupport/ensureType","../../core/accessorSupport/decorators/subclass","../../geometry/support/spatialReferenceUtils","../support/arcgisLayerUrl","../support/commonProperties","../support/DimensionalDefinition","../support/MultidimensionalSubset","../support/RasterFunction","../support/RasterJobHandler","../support/TileInfo","../support/rasterDatasets/FunctionRaster","../support/rasterDatasets/multidimensionalUtils","../support/rasterFunctions/rasterFunctionHelper","../support/rasterFunctions/vectorFieldUtils","../../renderers/support/rasterRendererHelper","../../renderers/support/RasterSymbolizer","../../views/2d/engine/flow/dataUtils","../../geometry/SpatialReference"],(function(e,t,r,n,i,s,o,a,l,u,c,d,p,f,h,m,y,_,b,g,S,I,J,v,R,F,x,T,D){"use strict";const H=a.getLogger("esri.layers.mixins.ImageryTileMixin"),N=e=>{let n=function(e){function r(){var t;return(t=e.apply(this,arguments)||this)._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},t.bandIds=null,t.copyright=null,t.interpolation="nearest",t.multidimensionalDefinition=null,t.multidimensionalSubset=null,t.raster=null,t.rasterFunction=null,t.sourceJSON=null,t.symbolizer=null,t}t._inheritsLoose(r,e);var n=r.prototype;return n.convertVectorFieldData=function(){var e=t._asyncToGenerator((function*(e,t){if(l.isNone(e)||!this.rasterInfo)return null;const r=this._rasterJobHandler.instance,n=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:e,dataType:n},t):R.convertVectorFieldData(e,n)}));function r(t,r){return e.apply(this,arguments)}return r}(),n.createFlowMesh=function(){var e=t._asyncToGenerator((function*(e,t){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(e,t):T.createFlowMesh(e.meshType,e.simulationSettings,e.flowData,l.isSome(t.signal)?t.signal:(new AbortController).signal)}));function r(t,r){return e.apply(this,arguments)}return r}(),n.normalizeRasterFetchOptions=function(e){const{multidimensionalInfo:t}=this.rasterInfo??{};if(l.isNone(t))return e;let r=e.multidimensionalDefinition||this.multidimensionalDefinition;!l.isNone(r)&&r.length||(r=J.getDefaultMultidimensionalDefinition(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=e.timeExtent||this.timeExtent;if(l.isSome(r)&&l.isSome(n)&&(l.isSome(n.start)||l.isSome(n.end))){r=r.map((e=>e.clone()));const i=t.variables.find((({name:e})=>e===r[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),s=r.find((({dimensionName:e})=>"StdTime"===e));if(!i||!s)return{...e,multidimensionalDefinition:null};const{start:o,end:a}=n,u=l.isNone(o)?null:o.getTime(),c=l.isNone(a)?null:a.getTime(),d=u??c,p=c??u;if(l.isSome(i.values)){const e=i.values.filter((e=>{if(Array.isArray(e)){if(d===p)return e[0]<=d&&e[1]>=d;const t=e[0]<=d&&e[1]>d||e[0]<p&&e[1]>=p,r=e[0]>=d&&e[1]<=p||e[0]<d&&e[1]>p;return t||r}return d===p?e===d:e>=d&&e<=p}));if(e.length){const t=e.sort(((e,t)=>{if(d===p)return(e[0]??e)-(t[0]??t);return Math.abs((e[1]??e)-p)-Math.abs((t[1]??t)-p)}))[0];s.values=[t]}else r=null}else if(i.hasRegularIntervals&&i.extent){const[e,t]=i.extent;d>t||p<e?r=null:s.values=d===p?[d]:[Math.max(e,d),Math.min(t,p)]}}return l.isSome(r)&&J.hasExcludedVariableOrDimension(r,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:r}},n.updateRenderer=function(){var e=t._asyncToGenerator((function*(){const{loaded:e,symbolizer:t}=this;if(!e||!t)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const r=this._rasterJobHandler.instance;r&&(t.rendererJSON=F.normalizeRendererJSON(this.renderer.toJSON()),t.bind(),yield r.updateSymbolizer(t),this._cachedRendererJson=this.renderer.toJSON())}));function r(){return e.apply(this,arguments)}return r}(),n.applyRenderer=function(){var e=t._asyncToGenerator((function*(e,t){const r=e&&e.pixelBlock;if(!(l.isSome(r)&&r.pixels&&r.pixels.length>0))return null;let n;yield this.updateRenderer();const i=this._rasterJobHandler.instance,s=this.bandIds??[];return n=i?yield i.symbolize({...e,simpleStretchParams:t,bandIds:s}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:s}),n}));function r(t,r){return e.apply(this,arguments)}return r}(),n.getTileUrl=function(e,t,r){return"RasterTileServer"===this.raster?.datasetFormat?`${this.url}/tile/${e}/${t}/${r}`:""},n.getCompatibleTileInfo=function(e,t,r=!1){if(!this.loaded||l.isNone(t))return null;if(r&&e.equals(this.spatialReference))return this.tileInfo;const n=f.getInfo(e);return S.create({size:256,spatialReference:e,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:t.xmin,y:t.ymax}})},n.getCompatibleFullExtent=function(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null},n.fetchTile=function(){var e=t._asyncToGenerator((function*(e,t,r,n={}){if(a(this),n.requestAsImageElement){const i=this.getTileUrl(e,t,r);return s(i,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then((e=>e.data))}if(l.isSome(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),l.isNone(n.multidimensionalDefinition))){const i=n.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,r,i),pixelBlock:null}}return yield this._initJobHandler(),yield this._updateRasterFunction(),"raster-shaded-relief"===this.renderer.type&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,r,n)}));function r(t,r,n){return e.apply(this,arguments)}return r}(),n.fetchPixels=function(){var e=t._asyncToGenerator((function*(e,t,r,n={}){return l.isSome(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),l.isNone(n.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(yield this._initJobHandler(),yield this._updateRasterFunction(),this.raster.fetchPixels(e,t,r,n))}));function r(t,r,n){return e.apply(this,arguments)}return r}(),n.identify=function(){var e=t._asyncToGenerator((function*(e,t={}){if(a(this),l.isSome(this.rasterInfo.multidimensionalInfo)){if(!(this.rasterInfo.hasMultidimensionalTranspose&&!!(J.isMultiSliceOrRangeDefinition(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent))&&(t=this.normalizeRasterFetchOptions(t),l.isNone(t.multidimensionalDefinition)))return{location:e,value:null}}return this.raster.identify(e,t)}));function r(t){return e.apply(this,arguments)}return r}(),n.increaseRasterJobHandlerUsage=function(){this._rasterJobHandler.refCount++},n.decreaseRasterJobHandlerUsage=function(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()},n.hasStandardTime=function(){const e=this.rasterInfo?.multidimensionalInfo;if(l.isNone(e)||"standard-time"!==this.rasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,r=t?.[0]?.variableName;return e.variables.some((e=>e.name===r&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))},n.getStandardTimeValue=function(e){return new Date(24*(e-25569)*3600*1e3).toString()},n.getMultidimensionalSubsetVariables=function(e){const t=e??this.rasterInfo.multidimensionalInfo;return J.getSubsetVariablesFromMdInfo(this.multidimensionalSubset,t)},n._configDefaultSettings=function(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=J.getDefaultMultidimensionalDefinition(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer()},n._initJobHandler=function(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new g;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{a(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer(),"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler()})).catch((()=>{})),this._rasterJobHandler.connectionPromise},n._shutdownJobHandler=function(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)},n._configDefaultInterpolation=function(){if(null==this.interpolation){a(this);const e=F.getDefaultInterpolation(this.rasterInfo,this.raster.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e)}},n._configDefaultRenderer=function(){a(this);const e=this.raster.rasterInfo;if(this.bandIds||(this.bandIds=F.getDefaultBandCombination(e)),!this.renderer){const t=F.createDefaultRenderer(e,{bandIds:this.bandIds,variableName:l.isSome(this.multidimensionalDefinition)?this.multidimensionalDefinition[0]?.variableName:null});"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&((e.statistics?.[0].max??0)>1e24||(e.statistics?.[0].min??0)<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t}this.symbolizer?(this.symbolizer.rendererJSON=F.normalizeRendererJSON(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new x({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const t=this.symbolizer.bind();t.success||H.warn("imagery-tile-mixin",t.error||"The given renderer is not supported by the layer.")},n._updateRasterFunction=function(){var e=t._asyncToGenerator((function*(){if("imagery-tile"!==this.type||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;let e=this.raster;if("Function"===e?.datasetFormat){const t=e.rasterFunction.getPrimaryRasters();e=t.rasters[0]}const{rasterFunction:t}=this;if(t){const r=v.create(t.toJSON(),{raster:e}),n=new I({rasterFunction:r});n.rasterJobHandler=this._rasterJobHandler.instance,yield n.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=n}else this.raster=e}));function r(){return e.apply(this,arguments)}return r}(),t._createClass(r,[{key:"fullExtent",get:function(){return this.rasterInfo?.extent}},{key:"rasterInfo",get:function(){return this.raster?.rasterInfo}},{key:"spatialReference",get:function(){return this.rasterInfo?.spatialReference??D.WGS84}},{key:"tileInfo",get:function(){return this.rasterInfo?.storageInfo.tileInfo}},{key:"url",set:function(e){this._set("url",h.sanitizeUrl(e,H))}},{key:"renderer",set:function(e){this._set("renderer",e),this.updateRenderer()}}]),r}(e);function a(e){if(!e.raster||!e.rasterInfo)throw new o("imagery-tile","no raster")}return r.__decorate([u.property()],n.prototype,"_cachedRendererJson",void 0),r.__decorate([u.property()],n.prototype,"_cachedRasterFunctionJson",void 0),r.__decorate([u.property()],n.prototype,"_compatibleFullExtent",void 0),r.__decorate([u.property()],n.prototype,"_rasterJobHandler",void 0),r.__decorate([u.property()],n.prototype,"bandIds",void 0),r.__decorate([u.property({json:{origins:{service:{read:{source:"copyrightText"}}}}})],n.prototype,"copyright",void 0),r.__decorate([u.property({json:{read:!1}})],n.prototype,"fullExtent",null),r.__decorate([u.property()],n.prototype,"interpolation",void 0),r.__decorate([u.property()],n.prototype,"ioConfig",void 0),r.__decorate([u.property({type:[y]})],n.prototype,"multidimensionalDefinition",void 0),r.__decorate([u.property({type:_,json:{write:!0}})],n.prototype,"multidimensionalSubset",void 0),r.__decorate([u.property()],n.prototype,"raster",void 0),r.__decorate([u.property({type:b})],n.prototype,"rasterFunction",void 0),r.__decorate([u.property()],n.prototype,"rasterInfo",null),r.__decorate([u.property()],n.prototype,"sourceJSON",void 0),r.__decorate([u.property({json:{read:!1}})],n.prototype,"spatialReference",null),r.__decorate([u.property({json:{read:!1}})],n.prototype,"tileInfo",null),r.__decorate([u.property(m.url)],n.prototype,"url",null),r.__decorate([u.property({types:i.rasterRendererTypes})],n.prototype,"renderer",null),r.__decorate([u.property()],n.prototype,"symbolizer",void 0),n=r.__decorate([p.subclass("esri.layers.ImageryTileMixin")],n),n};e.ImageryTileMixin=N,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
