// COPYRIGHT Â© 2022 Esri
//
// All rights reserved under the copyright laws of the United States
// and applicable international laws, treaties, and conventions.
//
// This material is licensed for use under the Esri Master License
// Agreement (MLA), and is bound by the terms of that agreement.
// You may redistribute and use this code without modification,
// provided you adhere to the terms of the MLA and include this
// copyright notice.
//
// See use restrictions at http://www.esri.com/legal/pdfs/mla_e204_e300/english
//
// For additional information, contact:
// Environmental Systems Research Institute, Inc.
// Attn: Contracts and Legal Services Department
// 380 New York Street
// Redlands, California, USA 92373
// USA
//
// email: contracts@esri.com
//
// See http://js.arcgis.com/3.42/esri/copyright.txt for details.

define([],(function(){return{aspect:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform vec2 u_resolution;","uniform vec2 u_cellSize;","float getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){","if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {","return 0.0;","}","else {","return e;","}","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","float pi = 3.141592653589793238;","float dz_dx = 0.0;","float dz_dy = 0.0;","vec4 va, vb, vc,vd,ve,vf,vg,vh,vi;","vec2 axy = vec2(-1.0,-1.0);","vec2 bxy = vec2(0.0, -1.0);","vec2 cxy = vec2(1.0, -1.0);","vec2 dxy = vec2(-1.0, 0.0);","vec2 fxy = vec2(1.0, 0.0);","vec2 gxy = vec2(-1.0, 1.0);","vec2 hxy = vec2(0.0, 1.0);","vec2 ixy = vec2(1.0, 1.0);","if (v_texCoord.s < u_resolution.s)","{","axy[0] = 1.0;","dxy[0] = 1.0;","gxy[0] = 1.0;","}","if (v_texCoord.t < u_resolution.t)","{","axy[1] = 1.0;","bxy[1] = 1.0;","cxy[1] = 1.0;","}","if (v_texCoord.s >1.0-u_resolution.s)","{","cxy[0] = -1.0;","fxy[0] = -1.0;","ixy[0] = -1.0;","}","if (v_texCoord.t > 1.0- u_resolution.t)","{","gxy[1] = -1.0;","hxy[1] = -1.0;","ixy[1] = -1.0;","}","if (v_texCoord.s >= u_resolution.s && (1.0-u_resolution.s)>=v_texCoord.s && v_texCoord.t >= u_resolution.t && (1.0-u_resolution.t)>=v_texCoord.t)","{","va = texture2D(u_image, v_texCoord + u_resolution* axy);","vb = texture2D(u_image, v_texCoord + u_resolution* bxy);","vc = texture2D(u_image, v_texCoord + u_resolution* cxy);","vd = texture2D(u_image, v_texCoord + u_resolution* dxy);","ve = texture2D(u_image, v_texCoord + u_resolution* vec2(0, 0));","vf = texture2D(u_image, v_texCoord + u_resolution* fxy);","vg = texture2D(u_image, v_texCoord + u_resolution* gxy);","vh = texture2D(u_image, v_texCoord + u_resolution* hxy);","vi = texture2D(u_image, v_texCoord + u_resolution* ixy);","}","dz_dx = (vc+2.0*vf+vi - va - 2.0*vd - vg).r/(8.0*u_cellSize[0]);","dz_dy = -(vg+2.0*vh+vi - va - 2.0*vb - vc).r/(8.0*u_cellSize[1]);","float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);","float aspect_rad = 0.0;","if (dz_dx == 0.0)","{","if (dz_dy > 0.0)","aspect_rad = 0.5 * pi;","else if (dz_dy < 0.0)","aspect_rad = 1.5 * pi;","else","alpha = 0.0;//undefined make it nodata","}","else","{","aspect_rad = 0.5*pi + atan(dz_dy, -dz_dx);","if (aspect_rad < 0.0)","aspect_rad = 2.0*pi + aspect_rad;","}","float aspect = aspect_rad * 180.0 / pi;","gl_FragColor = vec4(aspect, aspect, aspect, alpha);","}"].join("\n"),bandArithmetic:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform int u_bandId_nir;","uniform int u_bandId_red;","uniform bool u_scaled;","uniform int u_bandCount;","uniform int u_method;","uniform float u_constants[6];","vec4 calculateNDVI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float ndvi_denom = nir + red;","float ndvi;","if (ndvi_denom == 0.0) {","ndvi = 0.0;","} else {","ndvi = (nir - red) / ndvi_denom;","if (u_scaled) {","ndvi = float(floor(ndvi * 100.0 + 100.5));","}","}","return vec4(ndvi, ndvi, ndvi, currentPixel.a);","}","vec4 calculateSAVI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float savi_denom = nir + red + u_constants[0];","float savi;","if (savi_denom == 0.0) {","savi = 0.0;","} else {","savi = (nir - red) / savi_denom * (1.0 + u_constants[0]);","}","return vec4(savi, savi, savi, currentPixel.a);","}","vec4 calculateMSAVI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float msavi = 0.5 * (2.0 * (nir + 1.0) - sqrt(pow((2.0 * nir + 1.0), 2.0) - 8.0 * (nir - red)));","return vec4(msavi, msavi, msavi, currentPixel.a);","}","vec4 calculateTSAVI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float s = u_constants[0];","float a = u_constants[1];","float x = u_constants[2];","float tsavi_denom = a * nir + red - a * s + x * (1.0 + s * s);","float tsavi;","if (tsavi_denom == 0.0) {","tsavi = 0.0;","} else {","tsavi = s * (nir - s * red - a) / tsavi_denom;","}","return vec4(tsavi, tsavi, tsavi, currentPixel.a);","}","vec4 calculatePVI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float a = u_constants[0];","float b = u_constants[1];","float pvi = (nir - a * red - b) / sqrt(1.0 + a * 2.0);","return vec4(pvi, pvi, pvi, currentPixel.a);","}","vec4 calculateGEMI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float gemi;","if (red == 1.0) {","gemi = 0.0;","} else {","float eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) / (nir + red + 0.5);","float gemi = eta * (1.0 - 0.25*eta) - (red - 0.125) / (1.0 - red);","}","return vec4(gemi, gemi, gemi, currentPixel.a);","}","vec4 calculateVARI() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(currentPixel.r);","float green = float(currentPixel.g);","float blue = float(currentPixel.b);","float vari = (green - red) /(green + red - blue);","return vec4(vari, vari, vari, currentPixel.a);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","vec4 pv;","if (u_method < 4) {","if (u_method == 1) {","pv = calculateNDVI();","} else if (u_method == 2) {","pv = calculateSAVI();","} else if (u_method == 3) {","pv = calculateTSAVI();","} else if (u_method == 4) {","pv = calculateMSAVI();","}","} else {","if (u_method == 5) {","pv = calculateGEMI();","} else if (u_method == 6) {","pv = calculatePVI();","} else if (u_method == 7) {","pv = calculateGEMI();","} else if (u_method == 9) {","pv = calculateVARI();","}","}","gl_FragColor = pv;","}"].join("\n"),colormap:["precision mediump float;","uniform sampler2D u_image;","uniform sampler2D u_image1;","varying vec2 v_texCoord;","uniform float u_indexedColormapOffset;","uniform float u_indexedColormapMaxIndex;","vec4 colorize() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float clrIndex = currentPixel.r - u_indexedColormapOffset;","vec4 result;","if (currentPixel.a == 0.0 || clrIndex > u_indexedColormapMaxIndex) {","result = vec4(0.0, 0.0, 0.0, 0.0);","}","else {","vec2 clrPosition = vec2(clrIndex / u_indexedColormapMaxIndex, 0.0);","vec4 color = texture2D(u_image1, clrPosition);","result = vec4(color.r, color.g, color.b, color.a);","}","return result;","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = colorize();","}"].join("\n"),compositeBand:["precision mediump float;","uniform sampler2D u_image;","uniform sampler2D u_image1;","uniform sampler2D u_image2;","varying vec2 v_texCoord;","uniform int u_rasterCount;","vec4 composite() {","vec4 p0, p1, p2;","p0 = texture2D(u_image, v_texCoord);","vec4 result;","if (u_rasterCount == 1){","result = p0;","}","else if (u_rasterCount == 2){","p1 = texture2D(u_image1, v_texCoord);","result = vec4(p0.r,p1.r,0.0,min(p0.a,p1.a));","}","else if (u_rasterCount == 3){","p1 = texture2D(u_image1, v_texCoord);","p2 = texture2D(u_image2, v_texCoord);","result = vec4(p0.r,p1.r,p2.r,min(min(p0.a,p1.a),p2.a));","}","return result;","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = composite();","}"].join("\n"),constant:["precision mediump float;","uniform vec4 u_color;","void main() {","gl_FragColor = u_color;","}"].join("\n"),contrastBrightness:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform float u_contrastOffset;","uniform float u_brightnessOffset;","uniform float u_scaleFactor;","vec4 adjustContrastBrightness() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","float c = u_contrastOffset;","float b = u_brightnessOffset;","float maxI = 255.0;","float mid = 128.0;","vec4 v;","if (c > 0.0 && c < 100.0) {","v = (200.0 * currentPixel - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;","} else if (c <= 0.0 && c > -100.0) {","v = (200.0 * currentPixel - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;","} else if (c == 100.0) {","v = (200.0 * currentPixel - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);","v = (sign(v) + 1.0) / 2.0; //binary contrast with extra mid tone at 0.5","} else if (c == -100.0) {","v = vec4(mid, mid, mid, currentPixel.a); //no contrast","}","return vec4(v.r / u_scaleFactor, v.g / u_scaleFactor, v.b / u_scaleFactor, currentPixel.a);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = adjustContrastBrightness();","}"].join("\n"),convolution:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform vec2 u_resolution;","uniform float u_kernel[25];","uniform int u_kernelSize;","vec4 convolve33(){","vec4 vp11, vp12, vp13, vp21, vp22, vp23, vp31, vp32, vp33;","vec2 xy11 = vec2(-1.0, -1.0);","vec2 xy12 = vec2(0.0, -1.0);","vec2 xy13 = vec2(1.0, -1.0);","vec2 xy21 = vec2(-1.0, 0.0);","vec2 xy23 = vec2(1.0, 0.0);","vec2 xy31 = vec2(-1.0, 1.0);","vec2 xy32 = vec2(0.0, 1.0);","vec2 xy33 = vec2(1.0, 1.0);","if (v_texCoord.s < u_resolution.s) {","xy11[0] = 1.0;","xy21[0] = 1.0;","xy31[0] = 1.0;","}","if (v_texCoord.t < u_resolution.t) {","xy11[1] = 1.0;","xy12[1] = 1.0;","xy13[1] = 1.0;","}","if (v_texCoord.s > 1.0 - u_resolution.s) {","xy13[0] = -1.0;","xy23[0] = -1.0;","xy33[0] = -1.0;","}","if (v_texCoord.t > 1.0 - u_resolution.t) {","xy31[1] = -1.0;","xy32[1] = -1.0;","xy33[1] = -1.0;","}","vec4 convolResult =","texture2D(u_image, v_texCoord + u_resolution * xy11) * u_kernel[0] +","texture2D(u_image, v_texCoord + u_resolution * xy12) * u_kernel[1] +","texture2D(u_image, v_texCoord + u_resolution * xy13) * u_kernel[2] +","texture2D(u_image, v_texCoord + u_resolution * xy21) * u_kernel[3] +","texture2D(u_image, v_texCoord + u_resolution * vec2(0, 0)) * u_kernel[4] +","texture2D(u_image, v_texCoord + u_resolution * xy23) * u_kernel[5] +","texture2D(u_image, v_texCoord + u_resolution * xy31) * u_kernel[6] +","texture2D(u_image, v_texCoord + u_resolution * xy32) * u_kernel[7] +","texture2D(u_image, v_texCoord + u_resolution * xy33) * u_kernel[8];","return vec4(convolResult.rgb, texture2D(u_image, v_texCoord).a);","}","vec4 convolve55(){","vec4 vp11, vp12, vp13, vp21, vp22, vp23, vp31, vp32, vp33;","float xdif[5];//https://www.opengl.org/wiki/Data_Type_(GLSL) array constructor ES3.0","float ydif[5];","float a = -2.0;","for (int i=0; i<5; i++){","xdif[i] = a;","ydif[i] = a;","a++;","}","if (v_texCoord.s < u_resolution.s *2.0) { //2 pixel","xdif[0] = 2.0;","if (v_texCoord.s < u_resolution.s) { //1 pixel","xdif[1] = 1.0;","}","}","else if (v_texCoord.s > 1.0 - u_resolution.s *2.0) {","xdif[0] = -2.0;","if (v_texCoord.s > 1.0 - u_resolution.s) {","xdif[1] = -1.0;","}","}","if (v_texCoord.t < u_resolution.t *2.0) {","ydif[0] = 2.0;","if (v_texCoord.t < u_resolution.t) {","ydif[1] = 1.0;","}","}","else if (v_texCoord.t > 1.0 - u_resolution.t*2.0) {","ydif[0] = -2.0;","if (v_texCoord.t > 1.0 - u_resolution.t) {","ydif[1] = -1.0;","}","}","vec4 convolResult =","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[0], ydif[0])) * u_kernel[0] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[1], ydif[0])) * u_kernel[1] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[2], ydif[0])) * u_kernel[2] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[3], ydif[0])) * u_kernel[3] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[4], ydif[0])) * u_kernel[4] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[0], ydif[1])) * u_kernel[5] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[1], ydif[1])) * u_kernel[6] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[2], ydif[1])) * u_kernel[7] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[3], ydif[1])) * u_kernel[8] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[4], ydif[1])) * u_kernel[9] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[0], ydif[2])) * u_kernel[10] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[1], ydif[2])) * u_kernel[11] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[2], ydif[2])) * u_kernel[12] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[3], ydif[2])) * u_kernel[13] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[4], ydif[2])) * u_kernel[14] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[0], ydif[3])) * u_kernel[15] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[1], ydif[3])) * u_kernel[16] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[2], ydif[3])) * u_kernel[17] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[3], ydif[3])) * u_kernel[18] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[4], ydif[3])) * u_kernel[19] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[0], ydif[4])) * u_kernel[20] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[1], ydif[4])) * u_kernel[21] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[2], ydif[4])) * u_kernel[22] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[3], ydif[4])) * u_kernel[23] +","texture2D(u_image, v_texCoord + u_resolution * vec2(xdif[4], ydif[4])) * u_kernel[24];","return vec4(convolResult.rgb, texture2D(u_image, v_texCoord).a);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","if (u_kernelSize == 9){","gl_FragColor = convolve33();","}","else {","gl_FragColor = convolve55();","}","}"].join("\n"),extractBand:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform int u_bandIDs[3];","uniform bool u_alterBand;","vec4 extractBand() {","vec4 p = texture2D(u_image, v_texCoord);","if (!u_alterBand){","return p;","}","float r, g, b;","if (u_bandIDs[0] ==0){","r = p.r;","}","else if (u_bandIDs[0] ==1){","r = p.g;","}","else if (u_bandIDs[0] ==2){","r = p.b;","}","if (u_bandIDs[1] ==0){","g = p.r;","}","else if (u_bandIDs[1] ==1){","g = p.g;","}","else if (u_bandIDs[1] ==2){","g = p.b;","}","if (u_bandIDs[2] ==0){","b = p.r;","}","else if (u_bandIDs[2] ==1){","b = p.g;","}","else if (u_bandIDs[2] ==2){","b = p.b;","}","return vec4(r, g, b, p.a);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = extractBand();","}"].join("\n"),hillshade:["precision mediump float;","uniform sampler2D u_image;","uniform sampler2D u_image1;","varying vec2 v_texCoord;","uniform vec2 u_resolution;","uniform int u_slopeType;","uniform int u_hillshadeType;","uniform int u_lightSourceCount;","uniform float u_sinZcosA;","uniform float u_sinZsinA;","uniform float u_cosZ;","uniform float u_sinZcosAs[6];","uniform float u_sinZsinAs[6];","uniform float u_cosZs[6];","uniform float u_weights[6];","uniform float u_xFactor;","uniform float u_yFactor;","uniform bool u_scaled;","uniform float u_minValue;","uniform float u_maxValue;","uniform bool u_applyColorramp;","uniform float u_indexedColormapOffset;","uniform float u_indexedColormapMaxIndex;","uniform vec2 u_rawResolution;","uniform int u_resampling;","vec4 getPixelValue(vec2 coords) {","if (u_resampling == 0) {","return texture2D(u_image, coords);","}","vec2 pos_ul = floor(coords / u_rawResolution) * u_rawResolution;","vec2 pos_ur = pos_ul + vec2(1.0, 0.0) * u_rawResolution;","vec2 pos_ll = pos_ul + vec2(0.0, 1.0) * u_rawResolution;","vec2 pos_lr = pos_ul + vec2(1.0, 1.0) * u_rawResolution;","vec2 weight = fract(coords / u_rawResolution);","vec4 vp_ul = texture2D(u_image, pos_ul);","vec4 vp_ur = texture2D(u_image, pos_ur);","vec4 vp_ll = texture2D(u_image, pos_ll);","vec4 vp_lr = texture2D(u_image, pos_lr);","vec4 vp = mix(mix(vp_ul, vp_ur, weight.x), mix(vp_ll, vp_lr, weight.x), weight.y);","return vp;","}","float getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){","if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {","return 0.0;","}","else {","return e;","}","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","vec3 rgb2hsv(vec3 c) {","vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);","vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);","vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);","float d = q.x - min(q.w, q.y);","float e = 1.0e-10;","return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);","}","vec3 hsv2rgb(vec3 c) {","vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);","vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);","return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);","}","vec4 overlay(float val, float minValue, float maxValue, float hillshade, float alpha) {","float clrIndex = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);","vec4 rgb = texture2D(u_image1, vec2(clrIndex, 0.0));","vec3 hsv = rgb2hsv(rgb.xyz);","hsv.z = hillshade;","return vec4(hsv2rgb(hsv) * alpha, alpha);","}","void main() {","if (isOutside()) {","return;","}","vec4 va, vb, vc, vd, ve, vf, vg, vh, vi;","vec2 axy = vec2(-1.0, -1.0);","vec2 bxy = vec2(0.0, -1.0);","vec2 cxy = vec2(1.0, -1.0);","vec2 dxy = vec2(-1.0, 0.0);","vec2 fxy = vec2(1.0, 0.0);","vec2 gxy = vec2(-1.0, 1.0);","vec2 hxy = vec2(0.0, 1.0);","vec2 ixy = vec2(1.0, 1.0);","if (v_texCoord.s < u_resolution.s) {","axy[0] = 1.0;","dxy[0] = 1.0;","gxy[0] = 1.0;","}","if (v_texCoord.t < u_resolution.t) {","axy[1] = 1.0;","bxy[1] = 1.0;","cxy[1] = 1.0;","}","if (v_texCoord.s > 1.0 - u_resolution.s) {","cxy[0] = -1.0;","fxy[0] = -1.0;","ixy[0] = -1.0;","}","if (v_texCoord.t > 1.0 - u_resolution.t) {","gxy[1] = -1.0;","hxy[1] = -1.0;","ixy[1] = -1.0;","}","va = texture2D(u_image, v_texCoord + u_resolution * axy);","vb = texture2D(u_image, v_texCoord + u_resolution * bxy);","vc = texture2D(u_image, v_texCoord + u_resolution * cxy);","vd = texture2D(u_image, v_texCoord + u_resolution * dxy);","ve = texture2D(u_image, v_texCoord + u_resolution * vec2(0, 0));","vf = texture2D(u_image, v_texCoord + u_resolution * fxy);","vg = texture2D(u_image, v_texCoord + u_resolution * gxy);","vh = texture2D(u_image, v_texCoord + u_resolution * hxy);","vi = texture2D(u_image, v_texCoord + u_resolution * ixy);","float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);","float dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_xFactor;","float dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_yFactor; //flip","float s2 = sqrt(1.0 + dzx * dzx + dzy * dzy);","float hillshade = 0.0;","if (u_hillshadeType == 0){","float cosDelta = u_sinZsinA * dzy - u_sinZcosA * dzx;","float z = (u_cosZ + cosDelta) / s2;","if (z < 0.0)  z = 0.0;","hillshade = z;","}","else if (u_hillshadeType == 1){","for (int k = 0; k < 6; k++) {","float cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;","float z = (u_cosZs[k] + cosDelta) / s2;","if (z < 0.0) z = 0.0;","hillshade = hillshade + z * u_weights[k];","if (k == u_lightSourceCount-1) break;","}","}","if (u_applyColorramp) {","vec4 result = overlay(ve.r, u_minValue, u_maxValue, hillshade, alpha);","if (u_scaled) {","result = vec4(result.rgb * 255.0, result.a);","}","gl_FragColor = result;","} else {","if (u_scaled) {","hillshade = hillshade * 255.0;","if (hillshade> 255.0) {","hillshade = 255.0;","}","}","gl_FragColor = vec4(hillshade, hillshade, hillshade, alpha);","}","}"].join("\n"),identity:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform int u_bandCount;","float shift_right(float v, float amt) {","v = floor(v) + 0.5;","return floor(v / exp2(amt));","}","float shift_left(float v, float amt) {","return floor(v * exp2(amt) + 0.5);","}","float mask_last(float v, float bits) {","return mod(v, shift_left(1.0, bits));","}","float extract_bits(float num, float from, float to) {","from = floor(from + 0.5);","to = floor(to + 0.5);","return mask_last(shift_right(num, from), to - from);","}","vec4 encode_float(float val) {","if (val == 0.0)","return vec4(0, 0, 0, 0);","float sign = val > 0.0 ? 0.0 : 1.0;","val = abs(val);","float exponent = floor(log2(val));","float biased_exponent = exponent + 127.0;","float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;","float t = biased_exponent / 2.0;","float last_bit_of_biased_exponent = fract(t) * 2.0;","float remaining_bits_of_biased_exponent = floor(t);","float byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;","float byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;","float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;","float byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;","return vec4(byte4, byte3, byte2, byte1);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","vec4 currentPixel =  texture2D(u_image, v_texCoord);","gl_FragColor = vec4( currentPixel.rgb, currentPixel.a); //encode_float(currentPixel.r);","}"].join("\n"),local:["precision mediump float;","uniform sampler2D u_image;","uniform sampler2D u_image1;","uniform sampler2D u_image2;","varying vec2 v_texCoord;","uniform int u_rasterCount;","vec4 polyfill;","vec4 localOp1() {","vec4 a = texture2D(u_image, v_texCoord);","vec4 result;","vec4 replaceme1;","return result;","}","vec4 localOp2() {","vec4 a = texture2D(u_image, v_texCoord);","vec4 b = texture2D(u_image1, v_texCoord);","vec4 result;","vec4 replaceme2;","return result;","}","vec4 localOp3() {","vec4 a = texture2D(u_image, v_texCoord);","vec4 b = texture2D(u_image1, v_texCoord);","vec4 c = texture2D(u_image2, v_texCoord);","vec4 result;","vec4 replaceme3;","return result;","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = localOp1();","}"].join("\n"),local0:["precision mediump float;","uniform sampler2D u_image0;","uniform sampler2D u_image1;","varying vec2 v_texCoord;","uniform float u_minCutOff[3];","uniform float u_maxCutOff[3];","uniform float u_minOutput[3];","uniform float u_maxOutput[3];","uniform float u_factor[3];","uniform int u_operation;","uniform int u_constant[3];","uniform vec4 gamma;","float localOperate1(float a, float b, float c){","float result;","if (u_operation == 1){","result = a + b;","}","else if (u_operation == 2){","result = a - b;","}","else if (u_operation ==3){","result = a * b;","}","else if (u_operation ==4){","result = sqrt(a);","}","else if (u_operation ==5){","result = pow(a, b);","}","else if (u_operation ==6){","result = acos(a);","}","else if (u_operation ==7){","result = asin(a);","}","else if (u_operation ==8){","result = atan(a);","}","else if (u_operation ==9){","result = 999.0; //atanh not available","}","else if (u_operation ==10){","result = abs(a);","}","else if (u_operation ==13){","result = 999.0; //bitwise not available","}","else if (u_operation ==17){","result = a != 0.0 && b !=0.0;","}","else if (u_operation ==18){","result = a ==0.0? 1.0:0.0;","}","else if (u_operation ==19){","result = a != 0.0 || b !=0.0;","}","else if (u_operation ==20){","result = a != 0.0 ^^ b !=0.0; //exclusive or","}","else if (u_operation ==21){","result = cos(a);","}","else if (u_operation ==23){","result = a / b;","}","else if (u_operation ==24){","result = a == b ? 1.0:0.0;","}","else if (u_operation ==25){","result = exp(a);","}","else if (u_operation ==26){","result = pow(10.0, a);","}","else if (u_operation ==27){","result = exp2(a);","}","else if (u_operation ==28){","result = a > b? 1.0 : 0.0;","}","else if (u_operation ==29){","result =  a >= b? 1.0 : 0.0;","}","else if (u_operation ==30){","result = floor(a); //int","}","else if (u_operation ==31){","result = a ==0? 1.0:0.0; //null pass mask","}","else if (u_operation ==32){","result = a; //float","}","else if (u_operation ==33){","result = a < b? 1.0 : 0.0;","}","else if (u_operation ==34){","result = a <= b? 1.0 : 0.0;","}","else if (u_operation ==35){","result = log(a);","}","else if (u_operation ==36){","result = log2(a) / log2(10.0);","}","else if (u_operation ==37){","result = log2(a);","}","else if (u_operation ==44){","result = mod(a, b);","}","else if (u_operation ==45){","result = -a;","}","else if (u_operation ==46){","result = a != b? 1.0 : 0.0;","}","else if (u_operation ==48){","result = ceil(a);","}","else if (u_operation ==49){","result = floor(a);","}","else if (u_operation ==51){","result = sin(a);","}","else if (u_operation ==53){","result = a * a;","}","else if (u_operation ==56){","result = tan(a);","}","else if (u_operation ==57){","result = 999.0; //tanh not available","}","else if (u_operation ==59){","result = 999.0; //acosh not available","}","else if (u_operation ==60){","result = 999.0; //asinh not available","}","else if (u_operation ==61){","result = atan(a, b);","}","else if (u_operation ==64){","result = a / b;","}","else if (u_operation ==65){","result = floor(a/b);","}","else if (u_operation ==76){","result = a !=0? b:c;","}","}","void main() {","vec4 currentPixel0 =  texture2D(u_image0, v_texCoord);","float graya, reda, greena, bluea;","if (u_bandCount == 1) {","graya = stretchOneaue(float(currentPixel.r), u_minCutOff[0], u_maxCutOff[0], u_minOutput[0], u_maxOutput[0], u_factor[0]);","gl_FragColor = vec4(graya, graya, graya, currentPixel.a);","}","else if (u_bandCount == 3) {","reda = stretchOneaue(float(currentPixel.r), u_minCutOff[0], u_maxCutOff[0], u_minOutput[0], u_maxOutput[0], u_factor[0]);","greena = stretchOneaue(float(currentPixel.g), u_minCutOff[1], u_maxCutOff[1], u_minOutput[1], u_maxOutput[1], u_factor[1]);","bluea = stretchOneaue(float(currentPixel.b), u_minCutOff[2], u_maxCutOff[2], u_minOutput[2], u_maxOutput[2], u_factor[2]);","gl_FragColor = vec4(reda, greena, bluea, currentPixel.a);","}","}"].join("\n"),mask:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform float u_includedRanges[6];","uniform bool u_includedRanges_specified;","uniform float u_noDataValues[6];","uniform bool u_noDataValues_specified;","uniform int u_noDataInterpretation;","uniform int u_bandCount;","vec4 mask() {","vec4 currentPixel = texture2D(u_image, v_texCoord);","vec4 processedPixel = currentPixel;","if (u_includedRanges_specified) {","if (u_bandCount == 1) {","if (currentPixel.r > u_includedRanges[0] && currentPixel.r < u_includedRanges[1])","processedPixel = vec4(currentPixel.rgb, currentPixel.a);","else","processedPixel = vec4(currentPixel.rgb, 0);","} else if (u_bandCount == 3) {","if (currentPixel.r > u_includedRanges[0] && currentPixel.r < u_includedRanges[1] && currentPixel.g > u_includedRanges[2] && currentPixel.g < u_includedRanges[3] && currentPixel.b > u_includedRanges[4] && currentPixel.b < u_includedRanges[5])","processedPixel = vec4(currentPixel.rgb, currentPixel.a);","else","processedPixel = vec4(currentPixel.rgb, 0);","}","}","if (u_noDataValues_specified) {","if (u_bandCount == 1) {","if (processedPixel.r == u_noDataValues[0])","processedPixel = vec4(processedPixel.rgb, 0);","else","processedPixel = vec4(processedPixel.rgb, processedPixel.a);","} else if (u_bandCount == 3) {","if (u_noDataInterpretation ==1 && processedPixel.r == u_noDataValues[0] && processedPixel.g == u_noDataValues[1] && processedPixel.b == u_noDataValues[2])","processedPixel = vec4(processedPixel.rgb, 0);","else if (processedPixel.r == u_noDataValues[0] || processedPixel.g == u_noDataValues[1] || processedPixel.b == u_noDataValues[2])","processedPixel = vec4(processedPixel.rgb, 0);","else","processedPixel = vec4(processedPixel.rgb, processedPixel.a);","}","}","return processedPixel;","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = mask();","}"].join("\n"),ndvi:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform int u_bandId_red;","uniform int u_bandId_nir;","uniform bool u_scaled;","uniform int u_bandCount;","vec4 calculateNDVI(){","vec4 currentPixel = texture2D(u_image, v_texCoord);","float red = float(u_bandId_red == 0 ? currentPixel.r : (u_bandId_red == 1 ? currentPixel.g : currentPixel.b));","float nir = float(u_bandId_nir == 0 ? currentPixel.r : (u_bandId_nir == 1 ? currentPixel.g : currentPixel.b));","float ndvi_denom = nir + red;","float ndvi;","if (ndvi_denom == 0.0) {","ndvi = 0.0;","}","else {","ndvi = (nir - red) / ndvi_denom;","if (u_scaled) {","ndvi = float(floor(ndvi * 100.0 + 100.5));","}","}","return vec4(ndvi, ndvi, ndvi, currentPixel.a);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = calculateNDVI();","}"].join("\n"),remap:["precision mediump float;","uniform sampler2D u_image;","uniform sampler2D u_image1;","varying vec2 v_texCoord;","uniform float u_indexedColormapOffset;","uniform float u_indexedColormapMaxIndex;","uniform float u_breaks[16];","uniform vec2 u_rawResolution;","uniform int u_resampling;","vec4 getPixelValue(vec2 coords) {","if (u_resampling == 0) {","return texture2D(u_image, coords);","}","vec2 pos_ul = floor(coords / u_rawResolution) * u_rawResolution;","vec2 pos_ur = pos_ul + vec2(1.0, 0.0) * u_rawResolution;","vec2 pos_ll = pos_ul + vec2(0.0, 1.0) * u_rawResolution;","vec2 pos_lr = pos_ul + vec2(1.0, 1.0) * u_rawResolution;","vec2 weight = fract(coords / u_rawResolution);","vec4 vp_ul = texture2D(u_image, pos_ul);","vec4 vp_ur = texture2D(u_image, pos_ur);","vec4 vp_ll = texture2D(u_image, pos_ll);","vec4 vp_lr = texture2D(u_image, pos_lr);","vec4 vp = mix(mix(vp_ul, vp_ur, weight.x), mix(vp_ll, vp_lr, weight.x), weight.y);","return vp;","}","float getRemapIndex(float pixelValue) {","if (pixelValue < u_breaks[0] || pixelValue > u_breaks[15]) {","return -1.0;","}","for (int i = 0; i < 16; i++) {","if (pixelValue < u_breaks[i]) {","return float(i - 1);","}","}","if (pixelValue == u_breaks[15]) {","return 15.0;","}","return 0.0;","}","vec4 colorize(float pv) {","float clrIndex = pv - u_indexedColormapOffset;","vec4 result;","if (clrIndex > u_indexedColormapMaxIndex) {","result = vec4(0.0, 0.0, 0.0, 0.0);","}","else {","vec2 clrPosition = vec2(clrIndex / u_indexedColormapMaxIndex, 0.0);","vec4 color = texture2D(u_image1, clrPosition);","result = vec4(color.r, color.g, color.b, color.a);","}","return result;","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","vec4 currentPixel = texture2D(u_image, v_texCoord);","if (currentPixel.a == 0.0) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return;","}","float remappedIndex = getRemapIndex(currentPixel.r);","if (remappedIndex < 0.0) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return;","}","gl_FragColor = colorize(remappedIndex);","}"].join("\n"),resample:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform vec2 u_resamplingRatio;","uniform int u_resamplingType;","uniform vec2 u_anchor;","uniform vec2 u_resolution;","vec4 resample(){","vec2 pos_nn, pos_ul, pos_ur, pos_ll, pos_lr, pos_offset;","float weight,weight_total, weight_ul, weight_ur, weight_ll, weight_lr;","vec4 vp;  //v_texCoord is canvas space 0-1","vec2 originalResolution = vec2(u_resolution.s*u_resamplingRatio.s, u_resolution.t*u_resamplingRatio.t);","vec2 pos = vec2(u_anchor.s+(v_texCoord.s-u_anchor.s),(u_anchor.t+(v_texCoord.t-u_anchor.t)));","if (u_resamplingType == 0)","{//shift and scaling, y = ax+b so x = (y-b)/a","pos_nn = vec2(floor(pos.s/originalResolution.s+0.5)*originalResolution.s,floor(pos.t/originalResolution.t+0.5)*originalResolution.t);","if (pos_nn.s <0.0 || pos_nn.s > 1.0 || pos_nn.t <0.0 || pos_nn.t > 1.0){","vp = vec4(1.0, 0.0, 0.0, 1.0);//vec4(0.0, 1.0, 0.0, vp.a);","}","else {","vp = texture2D(u_image, vec2(pos_nn.s, pos_nn.t));","}","}","else if (u_resamplingType == 1)","{//shift and scaling, 4 neighbors y = ax+b so x = (y-b)/a","pos_ul = vec2(floor(pos.s/originalResolution.s)*originalResolution.s,floor(pos.t/originalResolution.t)*originalResolution.t);","pos_ur = vec2(pos_ul.s+originalResolution.s, pos_ul.t);","pos_ll = vec2(pos_ul.s, pos_ul.t+originalResolution.t);","pos_lr = vec2(pos_ul.s+originalResolution.s, pos_ul.t+originalResolution.t);","pos_offset = vec2(pos.s - floor(pos_ul.s),pos.t - floor(pos_ul.t));","weight_lr = sqrt(pow(pos_offset.s,2.0) + pow(pos_offset.t,2.0));","weight_ul = sqrt(pow( originalResolution.s- pos_offset.s,2.0)+ pow(originalResolution.t- pos_offset.t,2.0));","weight_ur = sqrt(pow( pos_offset.s,2.0)+ 1.0- pow(originalResolution.t - pos_offset.t,2.0));","weight_ll = sqrt(pow( originalResolution.s- pos_offset.s,2.0)+ pow(pos_offset.t,2.0));","vp = (texture2D(u_image, pos_ul) * weight_ul + texture2D(u_image, pos_ur) * weight_ur + texture2D(u_image, pos_ll) * weight_ll + texture2D(u_image, pos_lr) * weight_lr)/(weight_ul+weight_ur+weight_ll+weight_lr);","}","else if (u_resamplingType == 2)","{//shift and scaling, 16 neighbors","weight_total = 0.0;","vp = vec4(0.0,0.0,0.0,0.0);","pos_ul = vec2(floor(pos.s/originalResolution.s)*originalResolution.s-originalResolution.s,floor(pos.t/originalResolution.t)*originalResolution.t-originalResolution.t);","pos_offset = vec2(pos.s - floor(pos_ul.s),pos.t - floor(pos_ul.t));","for (int i=0; i<4; i++){//row","for (int j=0; j<4; j++){//col","weight = sqrt(pow(pos_offset.s-float(j),2.0)+ pow(pos_offset.t-float(i),2.0));","vp +=texture2D(u_image, vec2(pos_ul.s+float(i)*originalResolution.s,pos_ul.t+float(j)*originalResolution.t)) * weight;","weight_total += weight;","}","}","vp = vp/weight_total;","}","return vp;","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = resample();","}"].join("\n"),slope:["precision mediump float;","uniform sampler2D u_image;","varying vec2 v_texCoord;","uniform vec2 u_resolution;","uniform vec2 u_cellSize;","uniform float u_zfactor;","uniform float u_altitude;","uniform float u_azimuth;","float shift_right(float v, float amt) {","v = floor(v) + 0.5;","return floor(v / exp2(amt));","}","float shift_left(float v, float amt) {","return floor(v * exp2(amt) + 0.5);","}","float mask_last(float v, float bits) {","return mod(v, shift_left(1.0, bits));","}","float extract_bits(float num, float from, float to) {","from = floor(from + 0.5);","to = floor(to + 0.5);","return mask_last(shift_right(num, from), to - from);","}","vec4 encode_float(float val) {","if (val == 0.0)","return vec4(0, 0, 0, 0);","float sign = val > 0.0 ? 0.0 : 1.0;","val = abs(val);","float exponent = floor(log2(val));","float biased_exponent = exponent + 127.0;","float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0;","float t = biased_exponent / 2.0;","float last_bit_of_biased_exponent = fract(t) * 2.0;","float remaining_bits_of_biased_exponent = floor(t);","float byte4 = extract_bits(fraction, 0.0, 8.0) / 255.0;","float byte3 = extract_bits(fraction, 8.0, 16.0) / 255.0;","float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)) / 255.0;","float byte1 = (sign * 128.0 + remaining_bits_of_biased_exponent) / 255.0;","return vec4(byte4, byte3, byte2, byte1);","}","float getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){","if (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {","return 0.0;","}","else {","return e;","}","}","vec4 calculateSlope() {","float pi = 3.141592653589793238;","float dzx = 0.0;","float dzy = 0.0;","vec4 va,  vb,  vc,  vd,  ve,  vf,  vg,  vh,  vi;","vec2 axy = vec2(-1.0, -1.0);","vec2 bxy = vec2(0.0, -1.0);","vec2 cxy = vec2(1.0, -1.0);","vec2 dxy = vec2(-1.0, 0.0);","vec2 fxy = vec2(1.0, 0.0);","vec2 gxy = vec2(-1.0, 1.0);","vec2 hxy = vec2(0.0, 1.0);","vec2 ixy = vec2(1.0, 1.0);","if (v_texCoord.s < u_resolution.s) {","axy[0] = 1.0;","dxy[0] = 1.0;","gxy[0] = 1.0;","}","if (v_texCoord.t < u_resolution.t) {","axy[1] = 1.0;","bxy[1] = 1.0;","cxy[1] = 1.0;","}","if (v_texCoord.s > 1.0 - u_resolution.s) {","cxy[0] = -1.0;","fxy[0] = -1.0;","ixy[0] = -1.0;","}","if (v_texCoord.t > 1.0 - u_resolution.t) {","gxy[1] = -1.0;","hxy[1] = -1.0;","ixy[1] = -1.0;","}","if (v_texCoord.s >= u_resolution.s && (1.0 - u_resolution.s) >= v_texCoord.s && v_texCoord.t >= u_resolution.t && (1.0 - u_resolution.t) >= v_texCoord.t) {","va = texture2D(u_image, v_texCoord + u_resolution * axy);","vb = texture2D(u_image, v_texCoord + u_resolution * bxy);","vc = texture2D(u_image, v_texCoord + u_resolution * cxy);","vd = texture2D(u_image, v_texCoord + u_resolution * dxy);","ve = texture2D(u_image, v_texCoord + u_resolution * vec2(0, 0));","vf = texture2D(u_image, v_texCoord + u_resolution * fxy);","vg = texture2D(u_image, v_texCoord + u_resolution * gxy);","vh = texture2D(u_image, v_texCoord + u_resolution * hxy);","vi = texture2D(u_image, v_texCoord + u_resolution * ixy);","}","dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r / (8.0 * u_cellSize[0]);","dzy = -(vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r / (8.0 * u_cellSize[1]);","float alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);","float slope = atan(u_zfactor * sqrt(dzx * dzx + dzy * dzy)) * 57.2957795;","return vec4(slope, slope, slope, alpha);","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","gl_FragColor = calculateSlope();","}"].join("\n"),stretch:["precision mediump float;","uniform sampler2D u_image;","uniform sampler2D u_image1;","uniform sampler2D u_image2;","varying vec2 v_texCoord;","uniform float u_minCutOff[3];","uniform float u_maxCutOff[3];","uniform float u_minOutput[3];","uniform float u_maxOutput[3];","uniform float u_factor[3];","uniform int u_bandCount;","uniform vec2 u_sourceDim;","uniform vec2 u_targetDim;","uniform int u_state;","uniform bool u_minMaxTexture;","uniform bool u_useGamma;","uniform float u_gamma[4];","uniform float u_gammaCorrection[4];","uniform bool u_scaled;","uniform vec2 u_rawResolution;","uniform int u_resampling;","vec4 getPixelValue(vec2 coords) {","if (u_resampling == 0) {","return texture2D(u_image, coords);","}","vec2 pos_ul = floor(coords / u_rawResolution) * u_rawResolution;","vec2 pos_ur = pos_ul + vec2(1.0, 0.0) * u_rawResolution;","vec2 pos_ll = pos_ul + vec2(0.0, 1.0) * u_rawResolution;","vec2 pos_lr = pos_ul + vec2(1.0, 1.0) * u_rawResolution;","vec2 weight = fract(coords / u_rawResolution);","vec4 vp_ul = texture2D(u_image, pos_ul);","vec4 vp_ur = texture2D(u_image, pos_ur);","vec4 vp_ll = texture2D(u_image, pos_ll);","vec4 vp_lr = texture2D(u_image, pos_lr);","vec4 vp = mix(mix(vp_ul, vp_ur, weight.x), mix(vp_ll, vp_lr, weight.x), weight.y);","if (u_bandCount == 1) {","float alpha = vp_ul.a * vp_ur.a * vp_ll.a * vp_lr.a;","vec4 vp_nn = texture2D(u_image, coords);","return alpha == 0.0 ? vp_nn : vec4(vp.rgb, alpha);","}","return vp;","}","vec4 findMin(vec4 p1, vec4 p2) {","if (p1.a == 0.0) {","return p2;","} else if (p2.a == 0.0) {","return p1;","} else {","return vec4(min(p1.r, p2.r),min(p1.g, p2.g),min(p1.b, p2.b),p1.a);","}","}","vec4 findMax(vec4 p1, vec4 p2) {","if (p1.a == 0.0) {","return p2;","} else if (p2.a == 0.0) {","return p1;","} else {","return vec4(max(p1.r, p2.r),max(p1.g, p2.g),max(p1.b, p2.b),p1.a);","}","}","vec4 findMinMax(vec4 p1, vec4 p2) {","if (p1.a == 0.0) {","return p2;","} else if (p2.a == 0.0) {","return p1;","} else {","return vec4(min(p1.r, p2.r), max(p1.g, p2.g), 0.0, p1.a);","}","}","vec4 minMax(int state) {","vec2 pixelFract = fract(v_texCoord * u_sourceDim);","float xshift = ((pixelFract.s >= 0.5 || pixelFract.s == 0.0) ? -1.0 : 1.0) / u_sourceDim.s; //take left pixel if > 0.5","float yshift = ((pixelFract.s >= 0.5 || pixelFract.s == 0.0) ? -1.0 : 1.0) / u_sourceDim.t; //take bottom pixel if > 0.5","if (u_sourceDim.s == 1.0) {","xshift = 0.0;","}","if (u_sourceDim.t == 1.0) {","yshift = 0.0;","}","vec4 p1 = texture2D(u_image, v_texCoord);","vec4 p2 = texture2D(u_image, v_texCoord + vec2(xshift, 0.0));","vec4 p3 = texture2D(u_image, v_texCoord + vec2(0.0, yshift));","vec4 p4 = texture2D(u_image, v_texCoord + vec2(xshift, yshift));","vec4 pval;","if (state == 2) {","pval = findMinMax(findMinMax(p1, p2), findMinMax(p3, p4));","} else if (state == 1) {","pval = findMax(findMax(p1, p2), findMax(p3, p4));","} else if (state == 0) {","pval = findMin(findMin(p1, p2), findMin(p3, p4));","}","return pval;","}","float stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool scaled) {","float stretchedVal;","if (val > minCutOff && val < maxCutOff) {","stretchedVal = minOutput + (val - minCutOff) * factor;","} else if (val >= maxCutOff) {","stretchedVal = maxOutput;","} else {","stretchedVal = minOutput;","}","if (scaled) {","return stretchedVal;","}","else {","return stretchedVal / maxOutput; //0-1","}","}","float stretchOneValueGamma(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection, bool scaled) {","float stretchedVal;","float tempf = 1.0;","float outRange = maxOutput - minOutput;","float relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);","if (val > minCutOff && val < maxCutOff) {","if (gamma > 1.0) {","tempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);","}","stretchedVal = floor(tempf * outRange * pow(relativeVal, 1.0 / gamma)) + minOutput;","}","else if (val >= maxCutOff) {","stretchedVal = maxOutput;","} else {","stretchedVal = minOutput;","}","if (scaled) {","return stretchedVal;","}","else {","return stretchedVal / maxOutput; //0-1","}","}","bool isOutside(){","if (v_texCoord.t>1.00001 ||v_texCoord.t<-0.00001 || v_texCoord.s>1.00001 ||v_texCoord.s<-0.00001) {","gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);","return true;","}","else {","return false;","}","}","void main() {","if (isOutside()) {","return;","}","if (u_state == 100) {","vec4 currentPixel = getPixelValue(v_texCoord);","float grayVal,","redVal,","greenVal,","blueVal;","float min0,","max0,","min1,","max1,","min2,","max2,","factor0,","factor1,","factor2;","vec4 minV, maxV;","if (u_minMaxTexture) {","if (u_bandCount == 1) {","minV = texture2D(u_image1, v_texCoord);","min0 = minV.r;","max0 = minV.g;","factor0 = (u_maxOutput[0] - u_minOutput[0]) / (max0 - min0);","} else {","minV = texture2D(u_image1, v_texCoord);","maxV = texture2D(u_image2, v_texCoord);","min0 = minV.r;","max0 = maxV.r;","min1 = minV.g;","max1 = maxV.g;","min2 = minV.b;","max2 = maxV.b;","factor0 = (u_maxOutput[0] - u_minOutput[0]) / (max0 - min0);","factor1 = (u_maxOutput[1] - u_minOutput[1]) / (max1 - min1);","factor2 = (u_maxOutput[2] - u_minOutput[2]) / (max2 - min2);","}","} else {","min0 = u_minCutOff[0];","max0 = u_maxCutOff[0];","min1 = u_minCutOff[1];","max1 = u_maxCutOff[1];","min2 = u_minCutOff[2];","max2 = u_maxCutOff[2];","factor0 = u_factor[0];","factor1 = u_factor[1];","factor2 = u_factor[2];","}","if (u_useGamma){","if (u_bandCount == 1) {","grayVal = stretchOneValueGamma(float(currentPixel.r), min0, max0, u_minOutput[0], u_maxOutput[0], factor0, u_gamma[0], u_gammaCorrection[0], u_scaled);","gl_FragColor = vec4(grayVal, grayVal, grayVal, currentPixel.a);","} else {","redVal = stretchOneValueGamma(float(currentPixel.r), min0, max0, u_minOutput[0], u_maxOutput[0], factor0, u_gamma[0], u_gammaCorrection[0], u_scaled);","greenVal = stretchOneValueGamma(float(currentPixel.g), min1, max1, u_minOutput[1], u_maxOutput[1], factor1, u_gamma[1], u_gammaCorrection[1], u_scaled);","blueVal = stretchOneValueGamma(float(currentPixel.b), min2, max2, u_minOutput[2], u_maxOutput[2], factor2, u_gamma[1], u_gammaCorrection[2], u_scaled);","gl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);","}","}","else {","if (u_bandCount == 1) {","grayVal = stretchOneValue(float(currentPixel.r), min0, max0, u_minOutput[0], u_maxOutput[0], factor0, u_scaled);","gl_FragColor = vec4(grayVal, grayVal, grayVal, currentPixel.a);","} else {","redVal = stretchOneValue(float(currentPixel.r), min0, max0, u_minOutput[0], u_maxOutput[0], factor0, u_scaled);","greenVal = stretchOneValue(float(currentPixel.g), min1, max1, u_minOutput[1], u_maxOutput[1], factor1, u_scaled);","blueVal = stretchOneValue(float(currentPixel.b), min2, max2, u_minOutput[2], u_maxOutput[2], factor2, u_scaled);","gl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);","}","}","} else {","vec4 currentPixel = minMax(u_state);","gl_FragColor = currentPixel;","}","}"].join("\n")}}));