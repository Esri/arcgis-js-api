/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import"../../core/has.js";import e from"../../core/Error.js";import{JSONSupport as s}from"../../core/JSONSupport.js";import{clone as i}from"../../core/lang.js";import l from"../../core/Logger.js";import{isNone as r}from"../../core/maybe.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import{cast as o}from"../../core/accessorSupport/decorators/cast.js";import{subclass as h}from"../../core/accessorSupport/decorators/subclass.js";var n;const p=l.getLogger("esri.layers.support.PixelBlock");let c=n=class extends s{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.pixels=null,this.statistics=null}static createEmptyBand(t,e){return new(n.getPixelArrayConstructor(t))(e)}static getPixelArrayConstructor(t){let e;switch(t){case"u1":case"u2":case"u4":case"u8":e=Uint8Array;break;case"u16":e=Uint16Array;break;case"u32":e=Uint32Array;break;case"s8":e=Int8Array;break;case"s16":e=Int16Array;break;case"s32":e=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":e=Float32Array;break;case"f64":e=Float64Array}return e}castPixelType(t){if(!t)return"f32";let e=t.toLowerCase();return["u1","u2","u4"].includes(e)?e="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(e)||(e="f32"),e}getPlaneCount(){return this.pixels&&this.pixels.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new e("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics||{minValue:null,maxValue:null})}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let e=0;if(t)for(let s=0;s<t.length;s++)t[s]&&e++;else e=this.width*this.height;this.validPixelCount=e}clamp(t){if(!t||"f64"===t||"f32"===t)return;let e;switch(t){case"u8":e=[0,255];break;case"u16":e=[0,65535];break;case"u32":e=[0,4294967295];break;case"s8":e=[-128,127];break;case"s16":e=[-32768,32767];break;case"s32":e=[-2147483648,2147483647];break;default:e=[-34e38,34e38]}const[s,i]=e,l=this.pixels,r=this.width*this.height,a=l.length;let o,h,p;const c=[];for(let u=0;u<a;u++){p=n.createEmptyBand(t,r),o=l[u];for(let t=0;t<r;t++)h=o[t],p[t]=h>i?i:h<s?s:h;c.push(p)}this.pixels=c,this.pixelType=t}extractBands(t){if(r(t)||0===t.length||null==this.pixels||0===this.pixels.length)return this;const e=this.pixels.length,s=t.some((t=>t>=this.pixels.length)),i=e===t.length&&!t.some(((t,e)=>t!==e));return s||i?this:new n({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>this.pixels[t])),statistics:this.statistics&&t.map((t=>this.statistics[t]))})}clone(){const t=new n({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let e;this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const s=n.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=this.pixels[0].slice;for(e=0;e<this.pixels.length;e++)t.pixels[e]=i?this.pixels[e].slice(0,this.pixels[e].length):new s(this.pixels[e])}if(this.statistics)for(t.statistics=[],e=0;e<this.statistics.length;e++)t.statistics[e]=i(this.statistics[e]);return t}_fillFrom8Bit(t){const{mask:e,maskIsAlpha:s,pixels:i}=this;if(!t||!i||!i.length)return void p.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let l,r,a,o;l=r=a=i[0],i.length>=3?(r=i[1],a=i[2]):2===i.length&&(r=i[1]);const h=new Uint32Array(t),n=this.width*this.height;if(l.length===n)if(e&&e.length===n)if(s)for(o=0;o<n;o++)e[o]&&(h[o]=e[o]<<24|a[o]<<16|r[o]<<8|l[o]);else for(o=0;o<n;o++)e[o]&&(h[o]=255<<24|a[o]<<16|r[o]<<8|l[o]);else for(o=0;o<n;o++)h[o]=255<<24|a[o]<<16|r[o]<<8|l[o];else p.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:e,mask:s,statistics:i}=this;if(!t||!e||!e.length)return void p.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const l=this.pixelType;let r=1,a=0,o=1;if(i&&i.length>0)a=i.map((t=>t.minValue)).reduce(((t,e)=>Math.min(t,e))),o=i.map((t=>t.maxValue-t.minValue)).reduce(((t,e)=>Math.max(t,e))),r=255/o;else{let t=255;"s8"===l?(a=-128,t=127):"u16"===l?t=65535:"s16"===l?(a=-32768,t=32767):"u32"===l?t=4294967295:"s32"===l?(a=-2147483648,t=2147483647):"f32"===l?(a=-34e38,t=34e38):"f64"===l&&(a=-Number.MAX_VALUE,t=Number.MAX_VALUE),r=255/(t-a)}const h=new Uint32Array(t),n=this.width*this.height;let c,u,m,x,f;if(c=u=m=e[0],c.length!==n)return p.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(e.length>=2)if(u=e[1],e.length>=3&&(m=e[2]),s&&s.length===n)for(x=0;x<n;x++)s[x]&&(h[x]=255<<24|(m[x]-a)*r<<16|(u[x]-a)*r<<8|(c[x]-a)*r);else for(x=0;x<n;x++)h[x]=255<<24|(m[x]-a)*r<<16|(u[x]-a)*r<<8|(c[x]-a)*r;else if(s&&s.length===n)for(x=0;x<n;x++)f=(c[x]-a)*r,s[x]&&(h[x]=255<<24|f<<16|f<<8|f);else for(x=0;x<n;x++)f=(c[x]-a)*r,h[x]=255<<24|f<<16|f<<8|f}_fillFrom32Bit(t){const{pixels:e,mask:s}=this;if(!t||!e||!e.length)return p.error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,l,r,a;i=l=r=e[0],e.length>=3?(l=e[1],r=e[2]):2===e.length&&(l=e[1]);const o=this.width*this.height;if(i.length!==o)return p.error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let h=0;if(s&&s.length===o)for(a=0;a<o;a++)t[h++]=i[a],t[h++]=l[a],t[h++]=r[a],t[h++]=1&s[a];else for(a=0;a<o;a++)t[h++]=i[a],t[h++]=l[a],t[h++]=r[a],t[h++]=1}_calculateBandStatistics(t,e){let s=1/0,i=-1/0;const l=t.length;let r,a=0;if(e)for(r=0;r<l;r++)e[r]&&(a=t[r],s=a<s?a:s,i=a>i?a:i);else for(r=0;r<l;r++)a=t[r],s=a<s?a:s,i=a>i?a:i;return{minValue:s,maxValue:i}}};t([a({json:{write:!0}})],c.prototype,"width",void 0),t([a({json:{write:!0}})],c.prototype,"height",void 0),t([a({json:{write:!0}})],c.prototype,"pixelType",void 0),t([o("pixelType")],c.prototype,"castPixelType",null),t([a({json:{write:!0}})],c.prototype,"validPixelCount",void 0),t([a({json:{write:!0}})],c.prototype,"mask",void 0),t([a({json:{write:!0}})],c.prototype,"maskIsAlpha",void 0),t([a({json:{write:!0}})],c.prototype,"pixels",void 0),t([a({json:{write:!0}})],c.prototype,"statistics",void 0),c=n=t([h("esri.layers.support.PixelBlock")],c);const u=c;export{u as default};
