/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../chunks/tslib.es6","../../core/has","../../core/Logger","../../core/accessorSupport/decorators/property","../../core/accessorSupport/decorators/cast","../../core/accessorSupport/decorators/subclass","../../core/Error","../../core/urlUtils","../../core/uuid","../../portal/support/resourceExtension","../../core/PooledArray","../../core/promiseUtils","../../core/scheduling","../../core/Accessor","../../request","../../core/Handles","../../core/watchUtils","../../core/LRUCache","./Tilemap"],(function(e,t,i,l,a,r,s,n,o,c,h,p,u,f,m,v,_,y,d,b,T){"use strict";var g;const w=a.getLogger("esri.layers.support.TilemapCache");e.TilemapCache=g=function(e){function i(t){var i;return(i=e.call(this,t)||this)._handles=new y,i._pendingTilemapRequests={},i._availableLevels={},i.levels=5,i.cacheByteSize=2097152,i.request=_,i._prefetchingEnabled=!0,i}t._inheritsLoose(i,e);var l=i.prototype;return l.initialize=function(){this._tilemapCache=new b(this.cacheByteSize),this._handles.add([this.watch(["layer.parsedUrl","layer.tileServers?"],(()=>this._initializeTilemapDefinition())),d.init(this,"layer.tileInfo.lods",(e=>this._initializeAvailableLevels(e)),!0)]),this._initializeTilemapDefinition()},l.destroy=function(){this._handles&&(this._handles.destroy(),this._handles=null)},l.castLevels=function(e){return e<=2?(w.error("Minimum levels for Tilemap is 3, but got ",e),3):e},l.fetchTilemap=function(e,t,i,l){if(!this._availableLevels[e])return Promise.reject(new o("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const a=this._tmpTilemapDefinition,r=this._tilemapFromCache(e,t,i,a);if(r)return Promise.resolve(r);const s=l&&l.signal;return l={...l,signal:null},new Promise(((e,t)=>{f.onAbort(s,(()=>t(f.createAbortError())));const i=T.tilemapDefinitionId(a);let r=this._pendingTilemapRequests[i];if(!r){r=T.Tilemap.fromDefinition(a,l).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=r,r.then(e,e)}r.then(e,t)}))},l.getAvailability=function(e,t,i){if(!this._availableLevels[e])return"unavailable";const l=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return l?l.getAvailability(t,i):"unknown"},l.getAvailabilityUpsample=function(e,t,i,l){l.level=e,l.row=t,l.col=i;const a=this.layer.tileInfo;for(a.updateTileInfo(l);;){const e=this.getAvailability(l.level,l.row,l.col);if("unavailable"!==e)return e;if(!a.upsampleTile(l))return"unavailable"}},l.fetchAvailability=function(e,t,i,l){return this._availableLevels[e]?this.fetchTilemap(e,t,i,l).catch((e=>e)).then((l=>{if(l instanceof T.Tilemap){const a=l.getAvailability(t,i);return"unavailable"===a?Promise.reject(new o("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i})):a}if(f.isAbortError(l))throw l;return"unknown"})):Promise.reject(new o("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`))},l.fetchAvailabilityUpsample=function(e,t,i,l,a){l.level=e,l.row=t,l.col=i;const r=this.layer.tileInfo;r.updateTileInfo(l);const s=this.fetchAvailability(e,t,i,a).catch((e=>{if(f.isAbortError(e))throw e;if(r.upsampleTile(l))return this.fetchAvailabilityUpsample(l.level,l.row,l.col,l);throw e}));return this._fetchAvailabilityUpsamplePrefetch(l.id,e,t,i,a,s),s},l._fetchAvailabilityUpsamplePrefetch=async function(e,t,i,l,a,r){if(!this._prefetchingEnabled)return;const s=`prefetch-${e}`;if(this._handles.has(s))return;const n=f.createAbortController();r.then((()=>n.abort()),(()=>n.abort()));let o=!1;const c={remove(){o||(o=!0,n.abort())}};if(this._handles.add(c,s),await m.waitTicks(10,n.signal).catch((()=>{})),o||(o=!0,this._handles.remove(s)),f.isAborted(n))return;const h={id:e,level:t,row:i,col:l},p={...a,signal:n.signal},u=this.layer.tileInfo;for(let f=0;g._prefetches.length<g._maxPrefetch&&u.upsampleTile(h);++f){const e=this.fetchAvailability(h.level,h.row,h.col,p);g._prefetches.push(e);const t=()=>{g._prefetches.removeUnordered(e)};e.then(t,t)}},l._initializeTilemapDefinition=function(){if(!this.layer.parsedUrl)return;const e=this.layer.parsedUrl,t=e.query;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:t?c.objectToQuery(t):null,tileServers:this.layer.tileServers,request:this.request,type:this.layer.type},width:this.size,height:this.size,level:0,row:0,col:0}},l._tilemapFromCache=function(e,t,i,l){l.level=e,l.row=t-t%this.size,l.col=i-i%this.size;const a=T.tilemapDefinitionId(l);return this._tilemapCache.get(a)},l._initializeAvailableLevels=function(e){this._availableLevels={},e&&e.forEach((e=>this._availableLevels[e.level]=!0))},t._createClass(i,[{key:"size",get:function(){return 1<<this.levels}},{key:"test",get:function(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,l)=>!!e._tilemapFromCache(t,i,l,e._tmpTilemapDefinition)}}}]),i}(v),e.TilemapCache._maxPrefetch=4,e.TilemapCache._prefetches=new u({initialSize:g._maxPrefetch}),i.__decorate([r.property({constructOnly:!0,type:Number})],e.TilemapCache.prototype,"levels",void 0),i.__decorate([s.cast("levels")],e.TilemapCache.prototype,"castLevels",null),i.__decorate([r.property({readOnly:!0,type:Number})],e.TilemapCache.prototype,"size",null),i.__decorate([r.property({constructOnly:!0,type:Number})],e.TilemapCache.prototype,"cacheByteSize",void 0),i.__decorate([r.property({constructOnly:!0})],e.TilemapCache.prototype,"layer",void 0),i.__decorate([r.property({constructOnly:!0})],e.TilemapCache.prototype,"request",void 0),e.TilemapCache=g=i.__decorate([n.subclass("esri.layers.support.TilemapCache")],e.TilemapCache),Object.defineProperty(e,"__esModule",{value:!0})}));
