/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as t}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import s from"../../../core/Error.js";import e from"../../../core/has.js";import{unwrap as r}from"../../../core/maybe.js";import{eachAlways as a,createAbortError as o}from"../../../core/promiseUtils.js";import{property as i}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as n}from"../../../core/accessorSupport/decorators/subclass.js";import m from"./BaseRaster.js";import l from"./InMemoryRaster.js";import{parsePAMInfo as p}from"./pamParser.js";import{getFormat as c}from"../rasterFormats/RasterCodec.js";import{estimateStatisticsFromHistograms as f}from"../rasterFunctions/stretchUtils.js";import u from"../rasterTransforms/PolynomialTransform.js";import h from"../../../geometry/SpatialReference.js";import d from"../../../geometry/Extent.js";let y=class extends m{async open(t){await this.init();const s=await this._fetchData(t);let{spatialReference:e,statistics:r,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!e;i&&(e=new h({wkid:3857})),a?.length&&null==r&&(r=f(a));const{width:n,height:m}=s;let p=new d({xmin:-.5,ymin:.5-m,xmax:n-.5,ymax:.5,spatialReference:e});const c=o?o.forwardTransform(p):p;let u=!0;if(o){const t=o.forwardCoefficients;u=t&&0===t[1]&&0===t[2],u&&(o=null,p=c)}const y=new l({data:{extent:c,nativeExtent:p,transform:o,pixelBlock:s,statistics:r,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await y.open(),y.data=null,this._set("rasterInfo",y.rasterInfo),this._inMemoryRaster=y}fetchRawTile(t,s,e,r={}){return this._inMemoryRaster.fetchRawTile(t,s,e,r)}async _fetchData(t){const{data:r}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),a=c(r).toUpperCase();if("JPG"!==a&&"PNG"!==a&&"GIF"!==a&&"BMP"!==a)throw new s("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",a);const o=a.toLowerCase(),i="gif"===o||"bmp"===o||!e("ios");return await this.decodePixelBlock(r,{format:o,useCanvas:i,hasNoZlibMask:!0})}async _fetchAuxiliaryData(t){const s=r(t?.signal),e=this.ioConfig.skipExtensions??[],i=e.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:s}),n=this.datasetFormat,m="JPG"===n?"jgw":"PNG"===n?"pgw":"BMP"===n?"bpw":null,l=e.includes(m)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+m,{responseType:"text",signal:s}),c=await a([i,l]);if(s?.aborted)throw o();const f=p(c[0].value?.data);if(!f.transform){const t=c[1].value?c[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;f.transform=6===t?.length?new u({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null}return f}};t([i({type:String,json:{write:!0}})],y.prototype,"datasetFormat",void 0),y=t([n("esri.layers.support.rasterDatasets.ImageAuxRaster")],y);const w=y;export{w as default};
