/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/has","../../../core/maybe","../../../core/Logger","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/decorators/subclass","../../../core/Error","../../../core/urlUtils","../../../core/uuid","../../../portal/support/resourceExtension","../../../geometry/Point","../../../geometry/Extent","../../../geometry","../RasterInfo","../rasterFormats/TiffTags","../rasterFormats/TiffDecoder","../rasterFunctions/pixelUtils","../RasterStorageInfo","./BaseRaster","./pamParser"],(function(e,t,r,i,s,a,o,n,l,f,u,c,h,p,d,m,y,g,I,T,x,_){"use strict";const w=function(e,t){const r=e.get(t);return r&&r.values},F=function(e,t){const r=e.get(t);return r&&r.values[0]};let S=function(t){function r(){var e;return(e=t.apply(this,arguments)||this)._files=null,e._headerInfo=null,e._bufferSize=1048576,e.datasetFormat="TIFF",e}e._inheritsLoose(r,t);var s=r.prototype;return s.open=async function(e){var t;await this.init();const r=e?i.unwrap(e.signal):null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:r});if(!s)throw new l("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:a,firstIFD:o,isBigTiff:n}=g.parseSignature(s),f=[];await this.readIFDs(f,s,a,o,0,n?8:4,r);const u=g.getImageInfo(f),{width:c,height:d,tileWidth:y,tileHeight:x,planes:_,pixelType:w,compression:F,firstPyramidLevel:S,maximumPyramidLevel:b,pyramidBlockWidth:E,pyramidBlockHeight:v,tileBoundary:B,metadata:k}=u,D=p.fromJSON(u.extent),L=D.spatialReference,R=new h(D?{x:D.xmin,y:D.ymax,spatialReference:L}:{x:0,y:0}),O=new T({blockWidth:y,blockHeight:x,pyramidBlockWidth:E,pyramidBlockHeight:v,compression:F,origin:R,firstPyramidLevel:S,maximumPyramidLevel:b,blockBoundary:B}),H=new h({x:(D.xmax-D.xmin)/c,y:(D.ymax-D.ymin)/d,spatialReference:L}),z=k?{BandProperties:k.bandProperties,DataType:k.dataType}:{},P=new m({width:c,height:d,bandCount:_,pixelType:w,compression:F,pixelSize:H,storageInfo:O,spatialReference:L,keyProperties:z,extent:D,statistics:k?k.statistics:null});if(-1===(null==(t=this.ioConfig.skipExtensions)?void 0:t.indexOf("aux.xml"))){const t=await this._fetchAuxiliaryData(e);var G;if(null!=t)P.statistics=null!=(G=t.statistics)?G:P.statistics,P.histograms=t.histograms,t.histograms&&!i.isSome(P.statistics)&&(P.statistics=I.estimateStatisticsFromHistograms(t.histograms))}if(this._set("rasterInfo",P),this._headerInfo={littleEndian:a,isBigTiff:n,ifds:f,...u},!this._headerInfo.isSupported)throw new l("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()},s.fetchRawTile=async function(e,t,r,i={}){if(!this._headerInfo&&this._headerInfo.isSupported)return null;const{blockBoundary:s}=this.rasterInfo.storageInfo,a=e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,o=e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight,n=s[e];if(!n||n.maxRow<t||n.maxCol<r||n.minRow>t||n.minCol>r)return null;const l=this.getTileLocation(e,t,r);if(!l)return null;const{range:f,actualTileWidth:u,actualTileHeight:c,ifd:h}=l,{data:p}=await this.request(this.url,{range:f,responseType:"array-buffer",signal:i.signal}),d=await this.decodePixelBlock(p,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:h,offset:0,size:0},width:a,height:o,planes:null,pixelType:null});let m,y,g;if(u!==a||c!==o){let e=d.mask;if(e)for(m=0;m<o;m++)if(g=m*a,m<c)for(y=u;y<a;y++)e[g+y]=0;else for(y=0;y<a;y++)e[g+y]=0;else for(e=new Uint8Array(a*o),d.mask=e,m=0;m<c;m++)for(g=m*a,y=0;y<u;y++)e[g+y]=1}return d},s.readIFDs=async function(e,t,r,i,s,a=4,o){if(!i)return null;if(i>=t.byteLength||i<0){t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:o})).data,s=i+s,i=0}const n=await this.readIFD(t,r,i,s,y.TIFF_TAGS,a,o);if(e.push(n.ifd),!n.nextIFD)return null;await this.readIFDs(e,t,r,n.nextIFD-s,s,a,o)},s.readIFD=async function(e,t,r,i,s=y.TIFF_TAGS,a=4,o){if(!e)return null;const n=g.parseIFD(e,t,r,i,s,a);if(n.success){const r=[];if(n.ifd.forEach((e=>{e.values||r.push(e)})),r.length>0){const s=r.map((e=>e.offlineOffsetSize)),a=Math.min.apply(null,s.map((e=>e[0])));if(Math.min.apply(null,s.map((e=>e[0]+e[1])))-a<=this._bufferSize){const{data:s}=await this.request(this.url,{range:{from:a,to:a+this._bufferSize},responseType:"array-buffer",signal:o});e=s,i=a,r.forEach((r=>g.parseFieldValues(e,t,r,i)))}}if(n.ifd.has("GEOKEYDIRECTORY")){const r=n.ifd.get("GEOKEYDIRECTORY"),s=r.values;if(s&&s.length>4){const a=s[0]+"."+s[1]+"."+s[2],n=await this.readIFD(e,t,r.valueOffset+6-i,i,y.GEO_KEYS,2,o);r.data=n.ifd,r.data&&r.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]})}}return n}if(n.requiredBufferSize&&n.requiredBufferSize!==e.byteLength){const r=await this.request(this.url,{range:{from:i,to:i+n.requiredBufferSize+4},responseType:"array-buffer",signal:o});return(e=r.data).byteLength<n.requiredBufferSize?null:this.readIFD(e,t,0,i,y.TIFF_TAGS,4,o)}},s.getTileLocation=function(e,t,r){const{firstPyramidLevel:i,blockBoundary:s}=this.rasterInfo.storageInfo,a=0===e?0:e-(i-1),o=this._headerInfo.ifds[a];if(!o)return null;const n=w(o,"TILEOFFSETS");if(void 0===n)return null;const l=w(o,"TILEBYTECOUNTS"),{minRow:f,minCol:u,maxRow:c,maxCol:h}=s[a];if(t>c||r>h||t<f||r<u)return null;const p=F(o,"IMAGEWIDTH"),d=F(o,"IMAGELENGTH"),m=F(o,"TILEWIDTH"),y=F(o,"TILELENGTH"),g=t*(h+1)+r,I=n[g],T=l[g];if(null==I||null==T)return null;return{range:{from:I,to:I+T-1},ifd:o,actualTileWidth:r===h?p%m:m,actualTileHeight:t===c?d%y:y}},s._fetchAuxiliaryData=async function(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:null==e?void 0:e.signal});return _.parsePAMInfo(t)}catch{return null}},r}(x);return t.__decorate([o.property()],S.prototype,"_files",void 0),t.__decorate([o.property()],S.prototype,"_headerInfo",void 0),t.__decorate([o.property()],S.prototype,"_bufferSize",void 0),t.__decorate([o.property({type:String,json:{write:!0}})],S.prototype,"datasetFormat",void 0),S=t.__decorate([n.subclass("esri.layers.support.rasterDatasets.TIFFRaster")],S),S}));
