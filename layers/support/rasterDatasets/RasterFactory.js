/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../../core/Error.js";import e from"./CloudRaster.js";import r from"./ImageAuxRaster.js";import s from"./ImageServerRaster.js";import o from"./MRFRaster.js";import a from"./TIFFRaster.js";const c=new Map;c.set("CRF",{desc:"Cloud Raster Format",constructor:e}),c.set("MRF",{desc:"Meta Raster Format",constructor:o}),c.set("TIFF",{desc:"GeoTIFF",constructor:a}),c.set("RasterTileServer",{desc:"Raster Tile Server",constructor:s}),c.set("JPG",{desc:"JPG Raster Format",constructor:r}),c.set("PNG",{desc:"PNG Raster Format",constructor:r}),c.set("GIF",{desc:"GIF Raster Format",constructor:r}),c.set("BMP",{desc:"BMP Raster Format",constructor:r});class n{static get supportedFormats(){const t=new Set;return c.forEach(((e,r)=>t.add(r))),t}static async open(e){const{url:r,ioConfig:s,sourceJSON:o}=e;let a=e.datasetFormat;null==a&&r.lastIndexOf(".")&&(a=r.slice(r.lastIndexOf(".")+1).toUpperCase()),"OVR"===a||"TIF"===a?a="TIFF":"JPG"!==a&&"JPEG"!==a&&"JFIF"!==a||(a="JPG"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");const n={url:r,sourceJSON:o,datasetFormat:a,ioConfig:s||{bandIds:null,sampling:null}};let l,i;if(this.supportedFormats.has(a)){if("CRF"===a&&!s.enableCRF)throw new t("rasterfactory:open",`cannot open raster: ${r}`);return l=c.get(a).constructor,i=new l(n),await i.open({signal:e.signal}),i}if(a)throw new t("rasterfactory:open","not a supported format "+a);const u=Array.from(c.keys());let F=0;const m=()=>(a=u[F++],a&&("CRF"!==a||s.enableCRF)?(l=c.get(a).constructor,i=new l(n),i.open({signal:e.signal}).then((()=>i)).catch((()=>m()))):null);return m()}static register(t,e,r){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:e,constructor:r})}}export{n as default};
