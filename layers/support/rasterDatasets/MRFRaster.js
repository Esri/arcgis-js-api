/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../geometry","../../../core/Error","../../../core/maybe","../../../core/accessorSupport/decorators/property","../../../core/accessorSupport/ensureType","../../../core/arrayUtils","../../../core/accessorSupport/decorators/subclass","../PixelBlock","../RasterInfo","../RasterStorageInfo","./BaseRaster","./pamParser","./xmlUtilities","../rasterFormats/utils","../rasterFunctions/stretchUtils","../../../geometry/SpatialReference","../../../geometry/Extent","../../../geometry/Point"],(function(e,t,r,n,s,i,a,o,l,c,u,f,h,p,g,m,d,y,x,b){"use strict";const I=new Map;I.set("Int8","s8"),I.set("UInt8","u8"),I.set("Int16","s16"),I.set("UInt16","u16"),I.set("Int32","s32"),I.set("UInt32","u32"),I.set("Float32","f32"),I.set("Float64","f32"),I.set("Double64","f32");const w=new Map;w.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),w.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),w.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),w.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let _=function(t){function r(){var e;return(e=t.apply(this,arguments)||this)._files=null,e._storageIndex=null,e.datasetFormat="MRF",e}e._inheritsLoose(r,t);var i=r.prototype;return i.open=function(){var t=e._asyncToGenerator((function*(e){yield this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?s.unwrap(e.signal):null,r=yield this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:n,files:i}=this._parseHeader(r.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const t=yield this._fetchAuxiliaryData(e);null!=t&&(n.statistics=t.statistics??n.statistics,n.histograms=t.histograms,t.histograms&&s.isNone(n.statistics)&&(n.statistics=d.estimateStatisticsFromHistograms(t.histograms)))}this._set("rasterInfo",n),this._files=i;const a=yield this.request(i.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(a.data);const{blockWidth:o,blockHeight:l}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:u,height:f}=this.rasterInfo,h=[],p=this._getBandSegmentCount();let g=0,m=-1;for(;g<this._storageIndex.length;){m++;const e=Math.ceil(u/o/c**m)-1,t=Math.ceil(f/l/c**m)-1;g+=(e+1)*(t+1)*p*4,h.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}));function r(e){return t.apply(this,arguments)}return r}(),i.fetchRawTile=function(){var t=e._asyncToGenerator((function*(e,t,r,n={}){const{blockWidth:i,blockHeight:a,blockBoundary:o}=this.rasterInfo.storageInfo,l=o[e];if(!l||l.maxRow<t||l.maxCol<r||l.minRow>t||l.minCol>r)return null;const{bandCount:u,pixelType:f}=this.rasterInfo,{ranges:h,actualTileWidth:p,actualTileHeight:g}=this._getTileLocation(e,t,r);if(!h||0===h.length)return null;if(0===h[0].from&&0===h[0].to){const e=new Uint8Array(i*a);return new c({width:i,height:a,pixels:null,mask:e,validPixelCount:0})}const{bandIds:m}=this.ioConfig,d=this._getBandSegmentCount(),y=[];let x=0;for(x=0;x<d;x++)(!m||m.indexOf[x]>-1)&&y.push(this.request(this._files.data,{range:{from:h[x].from,to:h[x].to},responseType:"array-buffer",signal:n.signal}));const b=yield Promise.all(y),I=b.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),_=new Uint8Array(I);let A=0;for(x=0;x<d;x++)_.set(new Uint8Array(b[x].data),A),A+=b[x].data.byteLength;const F=w.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=yield this.decodePixelBlock(_.buffer,{width:i,height:a,format:F,planes:m?.length||u,pixelType:f});if(null==S)return null;if(s.isSome(this.rasterInfo.noDataValue)&&"lerc"!==F&&!S.mask){const e=this.rasterInfo.noDataValue[0];if(null!=e){const t=S.width*S.height,r=new Uint8Array(t);if(Math.abs(e)>1e24)for(x=0;x<t;x++)Math.abs((S.pixels[0][x]-e)/e)>1e-6&&(r[x]=1);else for(x=0;x<t;x++)S.pixels[0][x]!==e&&(r[x]=1);S.mask=r}}let R=0,E=0;if(p!==i||g!==a){let e=S.mask;if(e)for(x=0;x<a;x++)if(E=x*i,x<g)for(R=p;R<i;R++)e[E+R]=0;else for(R=0;R<i;R++)e[E+R]=0;else for(e=new Uint8Array(i*a),S.mask=e,x=0;x<g;x++)for(E=x*i,R=0;R<p;R++)e[E+R]=1}return S}));function r(e,r,n){return t.apply(this,arguments)}return r}(),i._parseIndex=function(e){if(e.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let t,r,n,s,i,a;if(m.isPlatformLittleEndian){for(r=new Uint8Array(e),s=new ArrayBuffer(e.byteLength),n=new Uint8Array(s),i=0;i<e.byteLength/4;i++)for(a=0;a<4;a++)n[4*i+a]=r[4*i+3-a];t=new Uint32Array(s)}else t=new Uint32Array(e);return t},i._getBandSegmentCount=function(){return w.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount},i._getTileLocation=function(e,t,r){const{blockWidth:n,blockHeight:s,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,f,h=0,p=0;for(f=0;f<e;f++)p=i**f,c=Math.ceil(a/n/p),u=Math.ceil(o/s/p),h+=c*u;p=i**e,c=Math.ceil(a/n/p),u=Math.ceil(o/s/p),h+=t*c+r,h*=4*l;const g=this._storageIndex.subarray(h,h+4*l);let m=0,d=0;const y=[];for(let x=0;x<l;x++)m=g[4*x+0]*2**32+g[4*x+1],d=m+g[4*x+2]*2**32+g[4*x+3],y.push({from:m,to:d});return{ranges:y,actualTileWidth:r<c-1?n:Math.ceil(a/p)-n*(c-1),actualTileHeight:t<u-1?s:Math.ceil(o/p)-s*(u-1)}},i._parseHeader=function(e){const t=g.getElement(e,"MRF_META/Raster");if(!t)throw new n("mrf:open","not a valid MRF format");const r=g.getElement(t,"Size"),s=parseInt(r.getAttribute("x"),10),i=parseInt(r.getAttribute("y"),10),a=parseInt(r.getAttribute("c"),10),o=(g.getElementValue(t,"Compression")||"none").toLowerCase();if(!w.has(o))throw new n("mrf:open","currently does not support compression "+o);const l=g.getElementValue(t,"DataType")||"UInt8",c=I.get(l);if(null==c)throw new n("mrf:open","currently does not support pixel type "+l);const h=g.getElement(t,"PageSize"),m=parseInt(h.getAttribute("x"),10),d=parseInt(h.getAttribute("y"),10),_=g.getElement(t,"DataValues");let A,F;_&&(F=_.getAttribute("NoData"),null!=F&&(A=F.trim().split(" ").map((e=>parseFloat(e)))));if(g.getElement(e,"MRF_META/CachedSource"))throw new n("mrf:open","currently does not support MRF referencing other data files");const S=g.getElement(e,"MRF_META/GeoTags"),R=g.getElement(S,"BoundingBox");let E,k=!1;if(null!=R){const e=parseFloat(R.getAttribute("minx")),t=parseFloat(R.getAttribute("miny")),r=parseFloat(R.getAttribute("maxx")),n=parseFloat(R.getAttribute("maxy")),s=g.getElementValue(S,"Projection")||"";let i=y.WGS84;if("LOCAL_CS[]"!==s)if(s.toLowerCase().startsWith("epsg:")){const e=Number(s.slice(5));isNaN(e)||0===e||(i=new y({wkid:e}))}else i=p.parseSpatialReference(s)??y.WGS84;else k=!0,i=new y({wkid:3857});E=new x(e,t,r,n),E.spatialReference=i}else k=!0,E=new x({xmin:-.5,ymin:.5-i,xmax:s-.5,ymax:.5,spatialReference:new y({wkid:3857})});const M=g.getElement(e,"MRF_META/Rsets"),T=parseInt(M&&M.getAttribute("scale")||"2",10),C=E.spatialReference,U=new f({origin:new b({x:E.xmin,y:E.ymax,spatialReference:C}),blockWidth:m,blockHeight:d,pyramidBlockWidth:m,pyramidBlockHeight:d,compression:o,pyramidScalingFactor:T}),B=new b({x:E.width/s,y:E.height/i,spatialReference:C}),L=new u({width:s,height:i,extent:E,isPseudoSpatialReference:k,spatialReference:C,bandCount:a,pixelType:c,pixelSize:B,noDataValue:A,storageInfo:U}),P=g.getElementValue(e,"datafile"),v=g.getElementValue(e,"IndexFile");return{rasterInfo:L,files:{mrf:this.url,index:v||this.url.replace(".mrf",".idx"),data:P||this.url.replace(".mrf",w.get(o).blobExtension)}}},i._fetchAuxiliaryData=function(){var t=e._asyncToGenerator((function*(e){try{const{data:t}=yield this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return p.parsePAMInfo(t)}catch{return null}}));function r(e){return t.apply(this,arguments)}return r}(),r}(h);t.__decorate([i.property()],_.prototype,"_files",void 0),t.__decorate([i.property()],_.prototype,"_storageIndex",void 0),t.__decorate([i.property({type:String,json:{write:!0}})],_.prototype,"datasetFormat",void 0),_=t.__decorate([l.subclass("esri.layers.support.rasterIO.MRFRaster")],_);return _}));
