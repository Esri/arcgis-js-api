/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import"../../../geometry.js";import t from"../../../core/Error.js";import{isSome as i,isNone as s,unwrap as a}from"../../../core/maybe.js";import{urlToObject as r}from"../../../core/urlUtils.js";import{property as l}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/arrayUtils.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as o}from"../../../core/accessorSupport/decorators/subclass.js";import n from"../RasterInfo.js";import c from"../RasterStorageInfo.js";import{readServiceTileInfo as m}from"../serviceTileInfoProperty.js";import h from"../TileInfo.js";import{TilemapCache as p}from"../TilemapCache.js";import f from"./BaseRaster.js";import{setValidBoundary as u}from"../rasterFunctions/pixelUtils.js";import y from"../rasterTransforms/GCSShiftTransform.js";import{fetchServiceRasterInfo as d}from"../../../rest/imageService/fetchRasterInfo.js";import x from"../../../geometry/SpatialReference.js";import g from"../../../geometry/Point.js";import v from"../../../geometry/Extent.js";let S=class extends f{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const s=e&&e.signal,a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:s});a.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const l=a.data;if(this.sourceJSON=l,!l)throw new t("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!l.tileInfo)throw new t("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const o=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=l.cacheType,null==this.tileType&&(o.includes(l.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===l.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=l.name.slice(l.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:s});if(!i(n))throw new t("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?m(l.tileInfo,l):h.fromJSON(l.tileInfo),{extent:t,pixelSize:i}=n,s=.5/n.width*i.x;let a,r;const o=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==l.maxScale&&("Raster"===this.tileType?(a=e.lods.find((e=>e.resolution===i.x)),a||(a=e.lods[e.lods.length-1])):(a=e.lods.find((e=>Math.abs(e.scale-l.maxScale)<s)),a||(a=e.lods.filter((e=>e.scale>l.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=a.resolution,n.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),a||(a=o);const p=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==l.minScale&&"Elevation"===this.tileType&&(r=e.lods.find((e=>Math.abs(e.scale-l.minScale)<s)),this._levelOffset=r.level-p.level),r||(r=p);const f=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>s||!e.lods.some((e=>Math.abs(e.resolution-f)<s)))&&(i.x=i.y=a.resolution,n.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),n.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const u=a.level-r.level,[y,d]=e.size,x=[];e.lods.forEach((e=>{e.level>=r.level&&e.level<=a.level&&x.push({x:e.resolution,y:e.resolution})})),x.sort(((e,t)=>e.x-t.x));const g=this.computeBlockBoundary(t,y,d,e.origin,x,u),v=x.length>1?x.slice(1):null;let S;l.transposeInfo&&(S={tileSize:[l.transposeInfo.rows,l.transposeInfo.cols],packetSize:n.keyProperties?._yxs.PacketSize??0}),n.storageInfo=new c({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:v,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:u,tileInfo:e,transposeInfo:S,blockBoundary:g}),this._fixGCSShift(n),this._set("rasterInfo",n)}if(l.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:n.storageInfo.tileInfo,parsedUrl:r(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new p({layer:e})}}async fetchRawTile(e,t,s,a={}){const{storageInfo:r,extent:l}=this.rasterInfo,{transposeInfo:o}=r,n=i(o)&&!!a.transposedVariableName;if(this._slices&&!n&&null==a.sliceId)return null;const c=n?0:r.maximumPyramidLevel-e+this._levelOffset,m=`${this.url}/tile/${c}/${t}/${s}`,h=this._slices?n?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null,{data:p}=await this.request(m,{query:h,responseType:"array-buffer",signal:a.signal});if(!p)return null;const f=n?o.tileSize:r.tileInfo.size,y=await this.decodePixelBlock(p,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnPixelInterleavedDims:n}),d=r.blockBoundary[e];if("jpg"!==r.compression||s>d.minCol&&s<d.maxCol&&t>d.minRow&&t<d.maxRow)return y;const{origin:x,blockWidth:g,blockHeight:v}=r,{x:S,y:I}=this.getPyramidPixelSize(e),w=Math.round((l.xmin-x.x)/S)%g,j=Math.round((l.xmax-x.x)/S)%g||g,T=Math.round((x.y-l.ymax)/I)%v,b=Math.round((x.y-l.ymin)/I)%v||v,_=s===d.minCol?w:0,M=t===d.minRow?T:0,R=s===d.maxCol?j:g,P=t===d.maxRow?b:v;return u(y,{x:_,y:M},{width:R-_,height:P-M}),y}getSliceIndex(e){if(!this._slices||s(e)||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));if(!i)return!0;return(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),a=await Promise.all([i,s]);return a[0]&&a[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:a[0]||null,histograms:a[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,a(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let l=r-s+this._levelOffset;const o=i.srcLocation;for(;l>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(l,i.row,i.col,t))break}catch{}if(l--,s++,i=this.identifyPixelLocation(o,s,a(t.datumTransformation)),null===i)return null}return-1===l||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),i=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),s=x.fromJSON(t.spatialReference||t.extent.spatialReference),a=new g({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:s});return new n({width:e,height:i,bandCount:3,extent:v.fromJSON(t.extent),spatialReference:s,pixelSize:a,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,s=d(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),a=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,r=await Promise.all([s,a]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;0===t.xmin&&360===t.xmax&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new y,e.extent=e.transform.forwardTransform(t))}};e([l({type:String,json:{write:!0}})],S.prototype,"datasetFormat",void 0),e([l()],S.prototype,"tileType",void 0),S=e([o("esri.layers.support.rasterDatasets.ImageServerRaster")],S);const I=S;export{I as default};
