/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
define(["../../../chunks/_rollupPluginBabelHelpers","../../../chunks/tslib.es6","../../../core/maybe","../../../core/accessorSupport/decorators/property","../../../core/arrayUtils","../../../core/accessorSupport/ensureType","../../../core/accessorSupport/decorators/subclass","./BaseRasterFunction","./ConvolutionFunctionArguments","./convolutionUtils"],(function(e,o,t,n,r,s,i,u,c,l){"use strict";let p=function(o){function n(){var e;return(e=o.apply(this,arguments)||this).functionName="Convolution",e.rasterArgumentNames=["raster"],e}e._inheritsLoose(n,o);var r=n.prototype;return r._bindSourceRasters=function(){const{kernelType:e,rows:o,cols:t,kernel:n}=this.functionArguments;if(!l.convolutionKernels.has(e))return{success:!1,error:`convolution-function: the specified kernel type is not supported ${e}`};if(e!==l.ConvolutionKernel.None&&o*t!==n.length)return{success:!1,error:"convolution-function: the specified rows and cols do not match the length of the kernel"};const r=this.sourceRasterInfos[0];this.outputPixelType=this._getOutputPixelType(r.pixelType);const s=r.clone();s.pixelType=this.outputPixelType;const i=[l.ConvolutionKernel.None,l.ConvolutionKernel.Sharpen,l.ConvolutionKernel.Sharpen2,l.ConvolutionKernel.Sharpening3x3,l.ConvolutionKernel.Sharpening5x5];return"u8"===this.outputPixelType||i.includes(e)||(s.statistics=null,s.histograms=null),this.rasterInfo=s,{success:!0}},r._processPixels=function(e){const o=e.pixelBlocks?.[0];if(t.isNone(o)||this.functionArguments.kernelType===l.ConvolutionKernel.None)return o;let{kernel:n,rows:r,cols:s}=this.functionArguments;const i=n.reduce(((e,o)=>e+o));return 0!==i&&1!==i&&(n=n.map((e=>e/i))),l.convolute(o,{kernel:n,rows:r,cols:s,outputPixelType:this.outputPixelType})},n}(u);o.__decorate([n.property({json:{write:!0,name:"rasterFunction"}})],p.prototype,"functionName",void 0),o.__decorate([n.property({type:c,json:{write:!0,name:"rasterFunctionArguments"}})],p.prototype,"functionArguments",void 0),o.__decorate([n.property()],p.prototype,"rasterArgumentNames",void 0),p=o.__decorate([i.subclass("esri.layers.support.rasterFunctions.ConvolutionFunction")],p);return p}));
