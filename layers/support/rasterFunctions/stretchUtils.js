/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{isNone as t,isSome as n,unwrap as e}from"../../../core/maybe.js";const i={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34e38,34e38],f64:[-Number.MAX_VALUE,Number.MAX_VALUE]},s=1,o=[.299,.587,.114];function r(t,n=256){n=Math.min(n,256);const{size:e,counts:i}=t,s=new Uint8Array(e),o=i.reduce(((t,e)=>t+e/n),0);let r=0,a=0,f=0,l=o;for(let u=0;u<e;u++)if(f+=i[u],!(u<e-1&&f+i[u+1]<l)){for(;r<n-1&&l<f;)r++,l+=o;for(let t=a;t<=u;t++)s[t]=r;a=u+1}for(let u=a;u<e;u++)s[u]=n-1;return s}function a(t){const{minCutOff:n,maxCutOff:e,gamma:i,pixelType:s}=t,o=t.outMin||0,r=t.outMax||255;if(!["u8","u16","s8","s16"].includes(s))return null;const a=n.length;let l,u,m=0;"s8"===s?m=-127:"s16"===s&&(m=-32767);let c=256;["u16","s16"].includes(s)&&(c=65536);const h=[],g=r-o;for(l=0;l<a;l++)h[l]=e[l]-n[l],e[l],n[l];const x=i&&i.length>=a,M=[];if(x)for(l=0;l<a;l++)i[l]>1?i[l]>2?M[l]=6.5+(i[l]-2)**2.5:M[l]=6.5+100*(2-i[l])**4:M[l]=1;let p;const d=[];let b,O,y;if(x)for(l=0;l<a;l++){for(y=[],u=0;u<c;u++)b=u+m,p=(b-n[l])/h[l],O=1,i[l]>1&&(O-=(1/g)**(p*M[l])),b<e[l]&&b>n[l]?y[u]=Math.floor(O*g*p**(1/i[l]))+o:b>=e[l]?y[u]=r:y[u]=o;d[l]=y}else for(l=0;l<a;l++){for(y=[],u=0;u<c;u++)b=u+m,b<=n[l]?y[u]=o:b>=e[l]?y[u]=r:y[u]=Math.floor((b-n[l])/h[l]*g)+o;d[l]=y}if(null!=t.contrastOffset){const n=f(t.contrastOffset,t.brightnessOffset);for(l=0;l<a;l++)for(y=d[l],u=0;u<c;u++)y[u]=n[y[u]]}return{lut:d,offset:m}}function f(t,n){const e=Math.min(Math.max(t,-100),100),i=Math.min(Math.max(n,-100),100),s=255,o=128;let r,a;const f=new Uint8Array(256);for(r=0;r<256;r++)e>0&&e<100?a=(200*r-100*s+2*s*i)/(2*(100-e))+o:e<=0&&e>-100?a=(200*r-100*s+2*s*i)*(100+e)/2e4+o:100===e?(a=200*r-100*s+(s+1)*(100-e)+2*s*i,a=a>0?s:0):-100===e&&(a=o),f[r]=a>s?s:a<0?0:a;return f}function l(t,n,e){const i=[];for(let s=0;s<n.length;s++){let r=0,a=0,f=0;"min"in n[s]?({min:r,max:a,avg:f}=n[s]):[r,a,f]=n[s];let l=f;"u8"!==t&&(l=255*(l-r)/(a-r)),e&&(l*=o[s]),i.push(u(l))}return i}function u(t){if(t<=0||t>=255)return s;let n=0;150!==t&&(n=t<=150?45*Math.cos(.01047*t):17*Math.sin(.021*t));const e=255,i=t+n,o=Math.log(t/e),r=Math.log(i/e);if(0===r)return s;const a=o/r;return isNaN(a)?s:Math.min(9.9,Math.max(.01,a))}function m(n){if(t(n)||!n.pixels?.length)return null;n.statistics||n.updateStatistics();const{pixels:e,mask:i,pixelType:s,statistics:o}=n,r=n.width*n.height,a=e.length;let f,l,u,m,c;const h=[],g=[];let x,M,p,d,b,O,y,C,z,A;const k=256;for(m=0;m<a;m++){if(x=new Uint32Array(k),p=e[m],"u8"===s)if(f=-.5,l=255.5,i)for(c=0;c<r;c++)i[c]&&x[p[c]]++;else for(c=0;c<r;c++)x[p[c]]++;else{if(f=o[m].minValue,l=o[m].maxValue,u=(l-f)/k,M=new Uint32Array(k+1),i)for(c=0;c<r;c++)i[c]&&M[Math.floor((p[c]-f)/u)]++;else for(c=0;c<r;c++)M[Math.floor((p[c]-f)/u)]++;for(c=0;c<255;c++)x[c]=M[c];x[255]=M[255]+M[256]}for(h.push({min:f,max:l,size:k,counts:x}),d=0,b=0,C=0,c=0;c<k;c++)d+=x[c],b+=c*x[c];for(z=b/d,c=0;c<k;c++)C+=x[c]*(c-z)**2;A=Math.sqrt(C/(d-1)),u=(l-f)/k,O=(z+.5)*u+f,y=A*u,g.push({min:f,max:l,avg:O,stddev:y})}return{statistics:g,histograms:h}}function c(t){const n=[];for(let e=0;e<t.length;e++){const{min:i,max:s,size:o,counts:r}=t[e];let a=0,f=0;for(let t=0;t<o;t++)a+=r[t],f+=t*r[t];const l=f/a;let u=0;for(let t=0;t<o;t++)u+=r[t]*(t-l)**2;const m=(s-i)/o,c=(l+.5)*m+i,h=Math.sqrt(u/(a-1))*m;n.push({min:i,max:s,avg:c,stddev:h})}return n}function h(t,s){const{pixelBlock:o,bandIds:a,returnHistogramLut:f,rasterInfo:l}=s;let u,c,h=t.stretchType;if(t.dra)if("minMax"===h&&n(o)&&o.statistics)u=o.statistics.map((t=>[t.minValue,t.maxValue,0,0]));else{const t=m(o);u=n(t)?t.statistics:null,c=n(t)?t.histograms:null}else u=t.statistics?.length>0?t.statistics:e(l.statistics),c=t.histograms||e(l.histograms);"percentClip"!==h&&"histogramEqualization"!==h||c?.length||(h="minMax");const x=u?.length||c?.length||l.bandCount,M=[],p=[];let d,b,O,y,C,z,A,k,v,w,U,L;switch(u&&!Array.isArray(u[0])&&(u=u.map((t=>[t.min,t.max,t.avg,t.stddev]))),h){case"none":{const t=i[l.pixelType]||i.f32;for(k=0;k<x;k++)M[k]=t[0],p[k]=t[1]}break;case"minMax":for(k=0;k<x;k++)M[k]=u[k][0],p[k]=u[k][1];break;case"standardDeviation":for(k=0;k<x;k++)M[k]=u[k][2]-t.numberOfStandardDeviations*u[k][3],p[k]=u[k][2]+t.numberOfStandardDeviations*u[k][3],M[k]<u[k][0]&&(M[k]=u[k][0]),p[k]>u[k][1]&&(p[k]=u[k][1]);break;case"histogramEqualization":for(k=0;k<x;k++)M[k]=c[k].min,p[k]=c[k].max;break;case"percentClip":for(k=0;k<c.length;k++){for(d=c[k],C=new Uint32Array(d.size),y=[...d.counts],y.length>=20&&(y[0]=y[1]=y[2]=y[y.length-1]=y[y.length-2]=0),O=0,b=(d.max-d.min)/d.size,A=-.5===d.min&&1===b?.5:0,v=0;v<d.size;v++)O+=y[v],C[v]=O;for(z=(t.minPercent||0)*O/100,v=0;v<d.size;v++)if(C[v]>z){M[k]=d.min+b*(v+A);break}for(z=(1-(t.maxPercent||0)/100)*O,v=d.size-2;v>=0;v--)if(C[v]<z){p[k]=d.min+b*(v+2-A);break}}break;default:for(k=0;k<x;k++)M[k]=u[k][0],p[k]=u[k][1]}"histogramEqualization"===h?(U=c[0].size||256,w=0,f&&(L=c.map((t=>r(t))))):(U=t.max||255,w=t.min||0);return g({minCutOff:M,maxCutOff:p,outMax:U,outMin:w,histogramLut:L},a)}function g(t,n){if(null==n||0===n.length)return t;const e=Math.max.apply(null,n),{minCutOff:i,maxCutOff:s,outMin:o,outMax:r,histogramLut:a}=t;return i.length===n.length||i.length<=e?t:{minCutOff:n.map((t=>i[t])),maxCutOff:n.map((t=>s[t])),histogramLut:a?n.map((t=>a[t])):null,outMin:o,outMax:r}}function x(n,e){if(t(n)||!n.pixels?.length)return n;const i=n.clone(),{pixels:s,mask:o}=i,{minCutOff:r,maxCutOff:a,gamma:f}=e,l=e.outMin||0,u=e.outMax||255,m=i.width*i.height,c=s.length;let h,g,x,M,p;const d=u-l,b=[];for(h=0;h<c;h++)b[h]=a[h]-r[h],a[h],r[h];const O=f&&f.length>=c,y=[];if(O)for(h=0;h<c;h++)f[h]>1?f[h]>2?y[h]=6.5+(f[h]-2)**2.5:y[h]=6.5+100*(2-f[h])**4:y[h]=1;if(O)if(null!=o){for(g=0;g<m;g++)if(o[g])for(h=0;h<c;h++)x=s[h][g],p=(x-r[h])/b[h],M=1,f[h]>1&&(M-=(1/d)**(p*y[h])),x<a[h]&&x>r[h]?s[h][g]=Math.floor(M*d*p**(1/f[h]))+l:x>=a[h]?s[h][g]=u:s[h][g]=l}else for(g=0;g<m;g++)for(h=0;h<c;h++)x=s[h][g],p=(x-r[h])/b[h],M=1,f[h]>1&&(M-=(1/d)**(p*y[h])),x<a[h]&&x>r[h]?s[h][g]=Math.floor(M*d*p**(1/f[h]))+l:x>=a[h]?s[h][g]=u:s[h][g]=l;else if(null!=o){for(g=0;g<m;g++)if(o[g])for(h=0;h<c;h++)x=s[h][g],x<a[h]&&x>r[h]?s[h][g]=Math.floor((x-r[h])/b[h]*d)+l:x>=a[h]?s[h][g]=u:s[h][g]=l}else for(g=0;g<m;g++)for(h=0;h<c;h++)x=s[h][g],x<a[h]&&x>r[h]?s[h][g]=Math.floor((x-r[h])/b[h]*d)+l:x>=a[h]?s[h][g]=u:s[h][g]=l;return i.pixelType="u8",i.updateStatistics(),i}export{l as computeGammaValues,f as createContrastBrightnessLUT,r as createHistogramEqualizationLUT,a as createStretchLUT,c as estimateStatisticsFromHistograms,m as estimateStatisticsHistograms,h as getStretchCutoff,x as stretch};
