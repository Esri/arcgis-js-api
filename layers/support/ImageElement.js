/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../request.js";import s from"../../core/Error.js";import o from"../../core/Logger.js";import{property as r}from"../../core/accessorSupport/decorators/property.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import a from"./MediaElementBase.js";let n=class extends a{constructor(e){super(e),this.content=null,this.type="image",this.image=null}load(){const e=this.image;if("string"==typeof e){const s=t(e,{responseType:"image"}).then((({data:e})=>{this._set("content",e)}));this.addResolvingPromise(s)}else if(e instanceof HTMLImageElement){const t=e.decode().then((()=>{this._set("content",e)}));this.addResolvingPromise(t)}else e?this._set("content",e):this.addResolvingPromise(Promise.reject(new s("image-element:invalid-image-type","Invalid image type",{image:e})));return Promise.resolve(this)}set image(e){"not-loaded"===this.loadStatus?this._set("image",e):o.getLogger(this.declaredClass).error("#image","image cannot be changed after the element is loaded.")}};e([r({readOnly:!0})],n.prototype,"content",void 0),e([r()],n.prototype,"image",null),n=e([i("esri.layers.support.ImageElement")],n);const m=n;export{m as default};
