/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../../request","../../core/Error","../../core/Logger","../../core/typedArrayUtil","../../core/urlUtils"],(function(t,e,i,r,s,a){"use strict";const o=1.15;let n=function(){function n(t,e){this._spriteSource=t,this._maxTextureSize=e,this.devicePixelRatio=1,this._spriteImageFormat="png",this._isRetina=!1,this._spritesData={},this.image=null,this.width=null,this.height=null,this.loadStatus="not-loaded","url"===t.type&&t.spriteFormat&&(this._spriteImageFormat=t.spriteFormat),t.pixelRatio&&(this.devicePixelRatio=t.pixelRatio),this.baseURL=t.spriteUrl}var u=n.prototype;return u.getSpriteInfo=function(t){return this._spritesData?this._spritesData[t]:null},u.load=function(){var e=t._asyncToGenerator((function*(t){if(this.baseURL){this.loadStatus="loading";try{yield this._loadSprites(t),this.loadStatus="loaded"}catch{this.loadStatus="failed"}}else this.loadStatus="failed"}));function i(t){return e.apply(this,arguments)}return i}(),u._loadSprites=function(){var e=t._asyncToGenerator((function*(t){this._isRetina=this.devicePixelRatio>o;const{width:e,height:s,data:a,json:n}=yield this._getSpriteData(this._spriteSource,t),h=Object.keys(n);if(!h||0===h.length||!a)return this._spritesData=this.image=null,void(this.width=this.height=0);this._spritesData=n,this.width=e,this.height=s;const u=Math.max(this._maxTextureSize,4096);if(e>u||s>u){const t=`Sprite resource for style ${this.baseURL} is bigger than the maximum allowed of ${u} pixels}`;throw r.getLogger("esri.layers.support.SpriteSource").error(t),new i("SpriteSource",t)}let l;for(let i=0;i<a.length;i+=4)l=a[i+3]/255,a[i]=a[i]*l,a[i+1]=a[i+1]*l,a[i+2]=a[i+2]*l;this.image=a}));function s(t){return e.apply(this,arguments)}return s}(),u._getSpriteData=function(){var r=t._asyncToGenerator((function*(t,r){if("image"===t.type){let e,r;if(this.devicePixelRatio<o){if(!t.spriteSource1x)throw new i("SpriteSource","no image data provided for low resolution sprites!");e=t.spriteSource1x.image,r=t.spriteSource1x.json}else{if(!t.spriteSource2x)throw new i("SpriteSource","no image data provided for high resolution sprites!");e=t.spriteSource2x.image,r=t.spriteSource2x.json}return"width"in e&&"height"in e&&"data"in e&&(s.isArrayBuffer(e.data)||s.isUint8ClampedArray(e.data))?{width:e.width,height:e.height,data:new Uint8Array(e.data),json:r}:{...h(e),json:r}}const n=a.urlToObject(this.baseURL),u=n.query?"?"+a.objectToQuery(n.query):"",l=this._isRetina?"@2x":"",p=`${n.path}${l}.${this._spriteImageFormat}${u}`,c=`${n.path}${l}.json${u}`,[d,g]=yield Promise.all([e(c,r),e(p,{responseType:"image",...r})]);return{...h(g.data),json:d.data}}));function n(t,e){return r.apply(this,arguments)}return n}(),t._createClass(n,[{key:"spriteNames",get:function(){const t=[];for(const e in this._spritesData)t.push(e);return t.sort(),t}}]),n}();function h(t){const e=document.createElement("canvas"),i=e.getContext("2d");e.width=t.width,e.height=t.height,i.drawImage(t,0,0,t.width,t.height);const r=i.getImageData(0,0,t.width,t.height);return{width:t.width,height:t.height,data:new Uint8Array(r.data)}}return n}));
