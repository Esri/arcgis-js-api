/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import t from"../../../core/Error.js";import{isAborted as e,createAbortError as a}from"../../../core/promiseUtils.js";import{Z as n}from"../../../chunks/Zlib.js";class i{constructor(t){t&&(this.canvas=t.canvas,this.ctx=t.ctx||t.canvas&&t.canvas.getContext("2d"))}decode(n,r,s){if(!n||n.byteLength<10)throw new t("imagecanvasdecoder: decode","required a valid encoded data as input.");let{width:c,height:h,format:o}=r;const{applyJpegMask:d}=r;if(d&&(!c||!h))throw new t("imagecanvasdecoder: decode","image width and height are needed to apply jpeg mask directly to canvas");return new Promise(((t,l)=>{let g=null;"jpg"===o&&d&&(g=i._getMask(n,{width:c,height:h}));const w=new Blob([new Uint8Array(n)],{type:"image/"+o=="jpg"?"jpeg":o}),v=URL.createObjectURL(w),m=new Image;let p;m.src=v,m.onload=()=>{if(URL.revokeObjectURL(v),e(s))return void l(a());c=m.width,h=m.height,this.canvas?(this.canvas.width===c&&this.canvas.height===h||(this.canvas.width=c,this.canvas.height=h),this.ctx.clearRect(0,0,c,h)):(this.canvas=document.createElement("canvas"),this.canvas.width=c,this.canvas.height=h,this.ctx=this.canvas.getContext("2d")),this.ctx.drawImage(m,0,0);const n=this.ctx.getImageData(0,0,c,h);let i;if(p=n.data,r.renderOnCanvas){if(g)for(i=0;i<g.length;i++)g[i]?p[4*i+3]=255:p[4*i+3]=0;return this.ctx.putImageData(n,0,0),void t(null)}const o=c*h,d=new Uint8Array(o),w=new Uint8Array(o),f=new Uint8Array(o);if(g)for(i=0;i<o;i++)d[i]=p[4*i],w[i]=p[4*i+1],f[i]=p[4*i+2];else for(g=new Uint8Array(o),i=0;i<o;i++)d[i]=p[4*i],w[i]=p[4*i+1],f[i]=p[4*i+2],g[i]=p[4*i+3];t({width:c,height:h,pixels:[d,w,f],mask:g,pixelType:"u8"})},m.onerror=()=>{URL.revokeObjectURL(v),l("cannot load image")}}))}static _getMask(t,e){let a=null;try{const i=new Uint8Array(t),r=Math.ceil(i.length/2);let s=0;const c=i.length-2;for(s=r;s<c&&(255!==i[s]||217!==i[s+1]);s++);if(s+=2,s<i.length-1){const t=new n(i.subarray(s)).getBytes();a=new Uint8Array(e.width*e.height);let r=0;for(let e=0;e<t.length;e++)for(let n=7;n>=0;n--)a[r++]=t[e]>>n&1}}catch(i){}return a}}export{i as default};
