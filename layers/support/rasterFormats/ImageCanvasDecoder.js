/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../../core/Error","../../../core/promiseUtils","../../../chunks/Zlib"],(function(t,e,a){"use strict";return function(){function n(t){t&&(this.canvas=t.canvas,this.ctx=t.ctx||t.canvas&&t.canvas.getContext("2d"))}return n.prototype.decode=function(a,i,r){if(!a||a.byteLength<10)throw new t("imagecanvasdecoder: decode","required a valid encoded data as input.");let{width:c,height:s,format:o}=i;const{applyJpegMask:h}=i;if(h&&(!c||!s))throw new t("imagecanvasdecoder: decode","image width and height are needed to apply jpeg mask directly to canvas");return e.create(((t,d)=>{let l=null;"jpg"===o&&h&&(l=n.getMask(a,i));const g=new Blob([new Uint8Array(a)],{type:"image/"+o=="jpg"?"jpeg":o}),v=URL.createObjectURL(g),w=new Image;let u;w.src=v,w.onload=()=>{if(URL.revokeObjectURL(v),e.isAborted(r))return void d(e.createAbortError());c=w.width,s=w.height,this.canvas?(this.canvas.width===c&&this.canvas.height===s||(this.canvas.width=c,this.canvas.height=s),this.ctx.clearRect(0,0,c,s)):(this.canvas=document.createElement("canvas"),this.canvas.width=c,this.canvas.height=s,this.ctx=this.canvas.getContext("2d")),this.ctx.drawImage(w,0,0);const a=this.ctx.getImageData(0,0,c,s);let n;if(u=a.data,i.renderOnCanvas){if(l)for(n=0;n<l.length;n++)l[n]?u[4*n+3]=255:u[4*n+3]=0;return this.ctx.putImageData(a,0,0),void t(null)}const o=c*s,h=new Uint8Array(o),g=new Uint8Array(o),f=new Uint8Array(o);if(l)for(n=0;n<o;n++)h[n]=u[4*n],g[n]=u[4*n+1],f[n]=u[4*n+2];else for(l=new Uint8Array(o),n=0;n<o;n++)h[n]=u[4*n],g[n]=u[4*n+1],f[n]=u[4*n+2],l[n]=u[4*n+3];t({width:c,height:s,pixels:[h,g,f],mask:l,pixelType:"u8"})},w.onerror=()=>{URL.revokeObjectURL(v),d("cannot load image")}}))},n.getMask=function(t,e){let n=null;try{const i=new Uint8Array(t),r=Math.ceil(i.length/2);let c=0;const s=i.length-2;for(c=r;c<s&&(255!==i[c]||217!==i[c+1]);c++);if(c+=2,c<i.length-1){const t=new a.Zlib(i.subarray(c)).getBytes();n=new Uint8Array(e.width*e.height);let r=0;for(let e=0;e<t.length;e++)for(let a=7;a>=0;a--)n[r++]=t[e]>>a&1}}catch(t){}return n},n}()}));
