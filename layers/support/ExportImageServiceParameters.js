/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["exports","../../chunks/_rollupPluginBabelHelpers","../../chunks/tslib.es6","../../core/has","../../core/Logger","../../core/accessorSupport/ensureType","../../core/accessorSupport/decorators/property","../../core/accessorSupport/decorators/aliasOf","../../core/jsonMap","../../core/accessorSupport/decorators/subclass","../../core/accessorSupport/decorators/writer","../../core/urlUtils","../../core/uuid","../../portal/support/resourceExtension","../../core/JSONSupport","./RasterFunction","./imageryRendererUtils","./MosaicRule"],(function(e,r,t,o,a,i,n,s,p,l,c,d,y,u,m,v,g,_){"use strict";const f=new p.JSONMap({RSP_NearestNeighbor:"nearest",RSP_BilinearInterpolation:"bilinear",RSP_CubicConvolution:"cubic",RSP_Majority:"majority"}),R=new p.JSONMap({esriNoDataMatchAny:"any",esriNoDataMatchAll:"all"});e.ExportImageServiceParameters=function(e){function t(){var r;return(r=e.apply(this,arguments)||this).layer=null,r.adjustAspectRatio=void 0,r.bandIds=void 0,r.compression=void 0,r.compressionQuality=void 0,r.compressionTolerance=.01,r.format=null,r.interpolation=null,r.noData=null,r.noDataInterpretation=void 0,r.pixelType=void 0,r.lercVersion=2,r}r._inheritsLoose(t,e);var o=t.prototype;return o.writeAdjustAspectRatio=function(e,r,t){this.layer.version<10.3||(r[t]=e)},o.writeCompressionQuality=function(e,r,t){this.format&&this.format.toLowerCase().indexOf("jpg")>-1&&null!=e&&(r[t]=e)},o.writeCompressionTolerance=function(e,r,t){"lerc"===this.format&&null!=e&&(r[t]=e)},o.writeLercVersion=function(e,r,t){"lerc"===this.format&&this.layer.version>=10.5&&(r[t]=e)},o.combineRendererWithRenderingRule=function(){var e;const r=this.layer,{rasterInfo:t,renderingRule:o,renderer:a}=r;if(!a||!g.isSupportedRendererType(a))return o;return g.combineRenderingRules(g.convertRendererToRenderingRule(a,{rasterAttributeTable:t.attributeTable,pixelType:t.pixelType,dataType:t.dataType,bandProperties:null==(e=t.keyProperties)?void 0:e.BandProperties,convertColorRampToColormap:r.version<10.6}),o)},o._addResampleRasterFunction=function(e){var r;let t=null;if("vector-field"===(null==(r=this.layer.renderer)?void 0:r.type)){const e={},r=this.layer.renderingRule;if(!r||"Resample"!==r.functionName){const r="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10;e.rasterFunction="Resample",e.rasterFunctionArguments={ResamplingType:r,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}}t=v.fromJSON(e)}return g.combineRenderingRules(t,e)},r._createClass(t,[{key:"version",get:function(){const e=this.layer;return e.bandIds,e.format,e.compressionQuality,e.compressionTolerance,e.interpolation,e.noData,e.noDataInterpretation,e.mosaicRule,e.renderingRule,e.adjustAspectRatio,e.pixelFilter,e.renderer,e.definitionExpression,(this._get("version")||0)+1},set:function(e){this._set("version",e)}},{key:"mosaicRule",get:function(){const e=this.layer;let r=e.mosaicRule;const t=e.definitionExpression;return r?t&&t!==r.where&&(r=r.clone(),r.where=t):t&&(r=new _({where:t})),r}},{key:"renderingRule",get:function(){const e=this.layer;let r=e.renderingRule;const t=e.pixelFilter,o=!e.format||e.format.indexOf("jpg")>-1||e.format.indexOf("png")>-1;return r=this._addResampleRasterFunction(r),o&&!t&&(r=this.combineRendererWithRenderingRule()),r}}]),t}(m.JSONSupport),t.__decorate([n.property()],e.ExportImageServiceParameters.prototype,"layer",void 0),t.__decorate([n.property({json:{write:!0}})],e.ExportImageServiceParameters.prototype,"adjustAspectRatio",void 0),t.__decorate([c.writer("adjustAspectRatio")],e.ExportImageServiceParameters.prototype,"writeAdjustAspectRatio",null),t.__decorate([n.property({json:{write:!0}}),s.aliasOf("layer.bandIds")],e.ExportImageServiceParameters.prototype,"bandIds",void 0),t.__decorate([n.property({json:{write:!0}})],e.ExportImageServiceParameters.prototype,"compression",void 0),t.__decorate([n.property({json:{write:!0}}),s.aliasOf("layer.compressionQuality")],e.ExportImageServiceParameters.prototype,"compressionQuality",void 0),t.__decorate([c.writer("compressionQuality")],e.ExportImageServiceParameters.prototype,"writeCompressionQuality",null),t.__decorate([n.property({json:{write:!0}}),s.aliasOf("layer.compressionTolerance")],e.ExportImageServiceParameters.prototype,"compressionTolerance",void 0),t.__decorate([c.writer("compressionTolerance")],e.ExportImageServiceParameters.prototype,"writeCompressionTolerance",null),t.__decorate([n.property({json:{write:!0}}),s.aliasOf("layer.format")],e.ExportImageServiceParameters.prototype,"format",void 0),t.__decorate([n.property({type:String,json:{read:{reader:f.read},write:{writer:f.write}}}),s.aliasOf("layer.interpolation")],e.ExportImageServiceParameters.prototype,"interpolation",void 0),t.__decorate([n.property({json:{write:!0}}),s.aliasOf("layer.noData")],e.ExportImageServiceParameters.prototype,"noData",void 0),t.__decorate([n.property({type:String,json:{read:{reader:R.read},write:{writer:R.write}}}),s.aliasOf("layer.noDataInterpretation")],e.ExportImageServiceParameters.prototype,"noDataInterpretation",void 0),t.__decorate([n.property({json:{write:!0}})],e.ExportImageServiceParameters.prototype,"pixelType",void 0),t.__decorate([n.property({json:{write:!0}})],e.ExportImageServiceParameters.prototype,"lercVersion",void 0),t.__decorate([c.writer("lercVersion")],e.ExportImageServiceParameters.prototype,"writeLercVersion",null),t.__decorate([n.property({type:Number,dependsOn:["layer.adjustAspectRatio","layer.bandIds","layer.format","layer.compressionQuality","layer.compressionTolerance","layer.definitionExpression","layer.interpolation","layer.noData","layer.noDataInterpretation","layer.mosaicRule","layer.renderingRule","layer.pixelFilter","layer.renderer","lercVersion","pixelType"]})],e.ExportImageServiceParameters.prototype,"version",null),t.__decorate([n.property({dependsOn:["layer.mosaicRule","layer.definitionExpression"],json:{write:!0}})],e.ExportImageServiceParameters.prototype,"mosaicRule",null),t.__decorate([n.property({dependsOn:["layer.renderingRule","layer.renderer","layer.rasterInfo","layer.format"],json:{write:!0}})],e.ExportImageServiceParameters.prototype,"renderingRule",null),e.ExportImageServiceParameters=t.__decorate([l.subclass("esri.layers.mixins.ExportImageServiceParameters")],e.ExportImageServiceParameters),Object.defineProperty(e,"__esModule",{value:!0})}));
