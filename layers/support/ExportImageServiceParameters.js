/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import{JSONSupport as r}from"../../core/JSONSupport.js";import{aliasOf as t}from"../../core/accessorSupport/decorators/aliasOf.js";import"../../core/arrayUtils.js";import"../../core/has.js";import"../../core/accessorSupport/ensureType.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import{subclass as i}from"../../core/accessorSupport/decorators/subclass.js";import{writer as s}from"../../core/accessorSupport/decorators/writer.js";import{isSupportedRendererType as n,combineRenderingRules as a,convertRendererToRenderingRule as p,convertRenderingRuleToRFT as l}from"./imageryRendererUtils.js";import c from"./MosaicRule.js";import{interpolationKebab as m,noDataInterpretationKebab as y}from"./rasterEnums.js";import u from"./RasterFunction.js";let d=class extends r{constructor(){super(...arguments),this.layer=null,this.adjustAspectRatio=void 0,this.bandIds=void 0,this.compression=void 0,this.compressionQuality=void 0,this.compressionTolerance=.01,this.interpolation=null,this.noData=null,this.noDataInterpretation=void 0,this.pixelType=void 0,this.lercVersion=2}writeAdjustAspectRatio(e,r,t){this.layer.version<10.3||(r[t]=e)}writeCompressionQuality(e,r,t){this.format&&this.format.toLowerCase().includes("jpg")&&null!=e&&(r[t]=e)}writeCompressionTolerance(e,r,t){"lerc"===this.format&&null!=e&&(r[t]=e)}get format(){return"vector-field"===this.layer.renderer?.type?"lerc":this.layer.format}writeLercVersion(e,r,t){"lerc"===this.format&&this.layer.version>=10.5&&(r[t]=e)}get version(){const e=this.layer;return e.commitProperty("bandIds"),e.commitProperty("format"),e.commitProperty("compressionQuality"),e.commitProperty("compressionTolerance"),e.commitProperty("interpolation"),e.commitProperty("noData"),e.commitProperty("noDataInterpretation"),e.commitProperty("mosaicRule"),e.commitProperty("renderingRule"),e.commitProperty("adjustAspectRatio"),e.commitProperty("pixelFilter"),e.commitProperty("renderer"),e.commitProperty("definitionExpression"),(this._get("version")||0)+1}set version(e){this._set("version",e)}get mosaicRule(){const e=this.layer;let r=e.mosaicRule;const t=e.definitionExpression;return r?t&&t!==r.where&&(r=r.clone(),r.where=t):t&&(r=new c({where:t})),r}get renderingRule(){const e=this.layer;let r=e.renderingRule;const t=e.pixelFilter,o=!e.format||e.format.includes("jpg")||e.format.includes("png");return r=this._addResampleRasterFunction(r),o&&!t&&"vector-field"!==e.renderer?.type&&(r=this.combineRendererWithRenderingRule()),r}combineRendererWithRenderingRule(){const e=this.layer,{rasterInfo:r,renderingRule:t,renderer:o}=e;if(!o||!n(o))return t;return a(p(o,{rasterAttributeTable:r.attributeTable,pixelType:r.pixelType,dataType:r.dataType,bandProperties:r.keyProperties?.BandProperties,convertColorRampToColormap:e.version<10.6,convertToRFT:!!t?.rasterFunctionDefinition}),t)}_addResampleRasterFunction(e){if(!("vector-field"===this.layer.renderer?.type)||"Resample"===e?.functionName)return e;const r="esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10;let t=new u({functionName:"Resample",functionArguments:{ResamplingType:r,InputCellSize:{x:this.layer.pixelSizeX,y:this.layer.pixelSizeY}}});return t=e?.rasterFunctionDefinition?new u({rasterFunctionDefinition:l(t)}):t,a(t,e)}};e([o()],d.prototype,"layer",void 0),e([o({json:{write:!0}})],d.prototype,"adjustAspectRatio",void 0),e([s("adjustAspectRatio")],d.prototype,"writeAdjustAspectRatio",null),e([o({json:{write:!0}}),t("layer.bandIds")],d.prototype,"bandIds",void 0),e([o({json:{write:!0}})],d.prototype,"compression",void 0),e([o({json:{write:!0}}),t("layer.compressionQuality")],d.prototype,"compressionQuality",void 0),e([s("compressionQuality")],d.prototype,"writeCompressionQuality",null),e([o({json:{write:!0}}),t("layer.compressionTolerance")],d.prototype,"compressionTolerance",void 0),e([s("compressionTolerance")],d.prototype,"writeCompressionTolerance",null),e([o({json:{write:!0}})],d.prototype,"format",null),e([o({type:String,json:{read:{reader:m.read},write:{writer:m.write}}}),t("layer.interpolation")],d.prototype,"interpolation",void 0),e([o({json:{write:!0}}),t("layer.noData")],d.prototype,"noData",void 0),e([o({type:String,json:{read:{reader:y.read},write:{writer:y.write}}}),t("layer.noDataInterpretation")],d.prototype,"noDataInterpretation",void 0),e([o({json:{write:!0}})],d.prototype,"pixelType",void 0),e([o({json:{write:!0}})],d.prototype,"lercVersion",void 0),e([s("lercVersion")],d.prototype,"writeLercVersion",null),e([o({type:Number})],d.prototype,"version",null),e([o({json:{write:!0}})],d.prototype,"mosaicRule",null),e([o({json:{write:!0}})],d.prototype,"renderingRule",null),d=e([i("esri.layers.mixins.ExportImageServiceParameters")],d);export{d as ExportImageServiceParameters};
