/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import e from"../../core/Error.js";import{isSome as r}from"../../core/maybe.js";import{open as o}from"../../core/workers/workers.js";import t from"./PixelBlock.js";class n{constructor(){this._workerThread=null,this._destroyed=!1}async initialize(){const e=await o("RasterWorker");this._destroyed?e.close():this._workerThread=e}destroy(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)}async convertVectorFieldData(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const n=await this._workerThread.invoke("convertVectorFieldData",{pixelBlock:r.pixelBlock.toJSON(),type:r.dataType},o);return n?new t(n):null}async decode(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const n=await this._workerThread.invoke("decode",r,o);return n?new t(n):null}async symbolize(o,n){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const a={extent:o.extent&&o.extent.toJSON(),pixelBlock:r(o.pixelBlock)&&o.pixelBlock.toJSON(),simpleStretchParams:o.simpleStretchParams,bandIds:o.bandIds},i=await this._workerThread.invoke("symbolize",a,n);return i?new t(i):null}async updateSymbolizer(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const t=r?.rendererJSON?.histograms;await Promise.all(this._workerThread.broadcast("updateSymbolizer",{symbolizerJSON:r.toJSON(),histograms:t},o))}async stretch(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),stretchParams:r.stretchParams},a=await this._workerThread.invoke("stretch",n,o);return a?new t(a):null}async split(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(!r?.pixelBlock)return null;const n={srcPixelBlock:r.pixelBlock.toJSON(),tileSize:r.tileSize,maximumPyramidLevel:r.maximumPyramidLevel},a=await this._workerThread.invoke("split",n,o);return a&&a.forEach(((e,r)=>{a.set(r,e?t.fromJSON(e):null)})),a}async estimateStatisticsHistograms(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(!r?.pixelBlock)return null;const t={srcPixelBlock:r.pixelBlock.toJSON()};return await this._workerThread.invoke("estimateStatisticsHistograms",t,o)}async mosaicAndTransform(o,n){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");if(!o?.srcPixelBlocks?.length)return{pixelBlock:null};const a={...o,srcPixelBlocks:o.srcPixelBlocks.map((e=>r(e)?e.toJSON():null))},i=await this._workerThread.invoke("mosaicAndTransform",a,n);return{pixelBlock:i.pixelBlock?new t(i.pixelBlock):null,localNorthDirections:i.localNorthDirections}}async createFlowMesh(r,o){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const t={buffer:r.flowData.data.buffer,maskBuffer:r.flowData.mask.buffer,width:r.flowData.width,height:r.flowData.height},{meshType:n,simulationSettings:a}=r,i=await this._workerThread.invoke("createFlowMesh",{meshType:n,flowData:t,simulationSettings:a},{...o,transferList:[t.buffer,t.maskBuffer]});return{vertexData:new Float32Array(i.vertexBuffer),indexData:new Uint32Array(i.indexBuffer)}}getProjectionOffsetGrid(o,t){if(!this._workerThread)throw new e("raster-jobhandler:no-connection","no available worker connection");const n=r(o.datumTransformation)?o.datumTransformation.steps.map((e=>({wkid:e.wkid,wkt:e.wkt,isInverse:e.isInverse}))):null,a=r(o.rasterTransform)?o.rasterTransform.toJSON():null,i={projectedExtent:o.projectedExtent.toJSON(),srcBufferExtent:o.srcBufferExtent.toJSON(),pixelSize:o.pixelSize,hasWrapAround:o.hasWrapAround,spacing:o.spacing,datumTransformationSteps:n,rasterTransform:a,isAdaptive:o.isAdaptive,includeGCSGrid:o.includeGCSGrid};return this._workerThread.invoke("getProjectionOffsetGrid",i,t)}}export{n as default};
