/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/maybe","../../core/workers/workers","./PixelBlock"],(function(e,r,n,o,t){"use strict";let i=function(){function i(){this._workerThread=null,this._destroyed=!1}var a=i.prototype;return a.initialize=function(){var r=e._asyncToGenerator((function*(){const e=yield o.open("RasterWorker");this._destroyed?e.close():this._workerThread=e}));function n(){return r.apply(this,arguments)}return n}(),a.destroy=function(){this._destroyed=!0,this._workerThread&&(this._workerThread.close(),this._workerThread=null)},a.convertVectorFieldData=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const o=yield this._workerThread.invoke("convertVectorFieldData",{pixelBlock:e.pixelBlock.toJSON(),type:e.dataType},n);return o?new t(o):null}));function o(e,r){return n.apply(this,arguments)}return o}(),a.decode=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const o=yield this._workerThread.invoke("decode",e,n);return o?new t(o):null}));function o(e,r){return n.apply(this,arguments)}return o}(),a.symbolize=function(){var o=e._asyncToGenerator((function*(e,o){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const i={extent:e.extent&&e.extent.toJSON(),pixelBlock:n.isSome(e.pixelBlock)&&e.pixelBlock.toJSON(),simpleStretchParams:e.simpleStretchParams,bandIds:e.bandIds},a=yield this._workerThread.invoke("symbolize",i,o);return a?new t(a):null}));function i(e,r){return o.apply(this,arguments)}return i}(),a.updateSymbolizer=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const o=e?.rendererJSON?.histograms;yield Promise.all(this._workerThread.broadcast("updateSymbolizer",{symbolizerJSON:e.toJSON(),histograms:o},n))}));function o(e,r){return n.apply(this,arguments)}return o}(),a.updateRasterFunction=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");yield Promise.all(this._workerThread.broadcast("updateRasterFunction",{rasterFunctionJSON:e.toJSON()},n))}));function o(e,r){return n.apply(this,arguments)}return o}(),a.process=function(){var o=e._asyncToGenerator((function*(e,o){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const i=yield this._workerThread.invoke("process",{extent:e.extent?.toJSON(),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>n.isSome(e)?e.toJSON():null)),primaryRasterIds:e.primaryRasterIds},o);return i?new t(i):null}));function i(e,r){return o.apply(this,arguments)}return i}(),a.stretch=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");if(!e?.pixelBlock)return null;const o={srcPixelBlock:e.pixelBlock.toJSON(),stretchParams:e.stretchParams},i=yield this._workerThread.invoke("stretch",o,n);return i?new t(i):null}));function o(e,r){return n.apply(this,arguments)}return o}(),a.split=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");if(!e?.pixelBlock)return null;const o={srcPixelBlock:e.pixelBlock.toJSON(),tileSize:e.tileSize,maximumPyramidLevel:e.maximumPyramidLevel},i=yield this._workerThread.invoke("split",o,n);return i&&i.forEach(((e,r)=>{i.set(r,e?t.fromJSON(e):null)})),i}));function o(e,r){return n.apply(this,arguments)}return o}(),a.estimateStatisticsHistograms=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");if(!e?.pixelBlock)return null;const o={srcPixelBlock:e.pixelBlock.toJSON()};return yield this._workerThread.invoke("estimateStatisticsHistograms",o,n)}));function o(e,r){return n.apply(this,arguments)}return o}(),a.mosaicAndTransform=function(){var o=e._asyncToGenerator((function*(e,o){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");if(!e?.srcPixelBlocks?.length)return{pixelBlock:null};const i={...e,srcPixelBlocks:e.srcPixelBlocks.map((e=>n.isSome(e)?e.toJSON():null))},a=yield this._workerThread.invoke("mosaicAndTransform",i,o);return{pixelBlock:a.pixelBlock?new t(a.pixelBlock):null,localNorthDirections:a.localNorthDirections}}));function i(e,r){return o.apply(this,arguments)}return i}(),a.createFlowMesh=function(){var n=e._asyncToGenerator((function*(e,n){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const o={buffer:e.flowData.data.buffer,maskBuffer:e.flowData.mask.buffer,width:e.flowData.width,height:e.flowData.height},{meshType:t,simulationSettings:i}=e,a=yield this._workerThread.invoke("createFlowMesh",{meshType:t,flowData:o,simulationSettings:i},{...n,transferList:[o.buffer,o.maskBuffer]});return{vertexData:new Float32Array(a.vertexBuffer),indexData:new Uint32Array(a.indexBuffer)}}));function o(e,r){return n.apply(this,arguments)}return o}(),a.getProjectionOffsetGrid=function(e,o){if(!this._workerThread)throw new r("raster-jobhandler:no-connection","no available worker connection");const t=n.isSome(e.datumTransformation)?e.datumTransformation.steps.map((e=>({wkid:e.wkid,wkt:e.wkt,isInverse:e.isInverse}))):null,i=n.isSome(e.rasterTransform)?e.rasterTransform.toJSON():null,a={projectedExtent:e.projectedExtent.toJSON(),srcBufferExtent:e.srcBufferExtent.toJSON(),pixelSize:e.pixelSize,hasWrapAround:e.hasWrapAround,spacing:e.spacing,datumTransformationSteps:t,rasterTransform:i,isAdaptive:e.isAdaptive,includeGCSGrid:e.includeGCSGrid};return this._workerThread.invoke("getProjectionOffsetGrid",a,o)},i}();return i}));
