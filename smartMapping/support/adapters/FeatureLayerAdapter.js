/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import{pickRandom as t}from"../../../core/arrayUtils.js";import r from"../../../core/Error.js";import a from"../../../core/Logger.js";import{unwrap as i}from"../../../core/maybe.js";import{timeout as s,eachAlways as n,throwIfAborted as o}from"../../../core/promiseUtils.js";import{whenOnce as l}from"../../../core/reactiveUtils.js";import{property as u}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{toQuantizationTransform as c}from"../../../geometry/support/quantizationUtils.js";import{isHostedAgolService as p}from"../../../layers/support/arcgisLayerUrl.js";import{kebabDict as h}from"../../../layers/support/fieldType.js";import{isStringField as d,isNumericField as y,isDateField as f}from"../../../layers/support/fieldUtils.js";import F from"../../../rest/support/GenerateRendererParameters.js";import g from"../../../rest/support/QuantizationParameters.js";import S from"../../../rest/support/StatisticDefinition.js";import w from"../../../rest/support/UniqueValueDefinition.js";import{getArcadeForPredominantCategory as v,getSQLForPredominantCategoryName as x}from"../../statistics/support/predominanceUtils.js";import{summaryStatistics as _,uniqueValues as z,histogram as q,classBreaks as V,heatmapStatistics as T}from"../../statistics/support/statsWorker.js";import{getRangeExpr as E,getSQLFilterForNormalization as L,mergeWhereClauses as j}from"../../statistics/support/utils.js";import{WorkerClient as C}from"../../statistics/support/WorkerClient.js";import{getFieldsList as Q}from"../utils.js";import M from"./LayerAdapter.js";import{ensureFeaturesJSON as I,msSinceUnixEpochSQL as N,getFieldExpr as b,getSummaryStatisticsFromFeatureSet as B,getViewInfoParams as k,getMissingFields as O,getUniqueValuesFromFeatureSet as P,getHistogramFromFeatureSet as R,generateBinParams as D,getPredominantCategoriesFromUVInfos as J}from"./support/utils.js";import{processSummaryStatisticsResult as G,isNullCountSupported as U,statisticTypes as A,createUVResult as W,getEqualIntervalBins as $,createClassBreaksDefinition as H,resolveCBResult as Z}from"../../../statistics/utils.js";import K from"../../../tasks/GenerateRendererTask.js";const X=a.getLogger("esri.smartMapping.support.adapters.FeatureLayerAdapter"),Y=5,ee=10,te=2e4,re=4e5;let ae=class extends M{constructor(e){super(e)}destroy(){this._hasLocalSource=null,this.workerClient?.destroy()}_isStatsSupportedOnService(){const e=this.layer;return!e.get("capabilities.query.supportsStatistics")||"multipatch"===this.geometryType&&!p(e.url)&&e.version<10.5?Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support statistics query")):Promise.resolve()}async _waitForLayerViewUpdate(e){if(!e)throw new r("feature-layer-adapter:insufficient-data","layerView is required to fetch the features");const t=new AbortController,a=l((()=>!e.updating),t.signal);await s(a,5e3,t).catch((e=>{throw X.warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeaturesFromMemory(e,t,r,a){const i=this.layer,s="json"===a;if(this._hasLocalSource){const e=await i.queryFeatures(t);return s?I(e.features):e.features}if(await this._waitForLayerViewUpdate(e),s&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:a}=await e.queryFeaturesJSON(t,{signal:r});return a}const n=await e.queryFeatures(t,{signal:r});return s?I(n.features):n.features}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(I)}_fetchFeaturesForStats(e,t){return Q({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((r=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:r,signal:e.signal},t)))}_summaryStatsFromGenRend(e){const t=e.normalizationType,r=e.normalizationField;return this.classBreaks({field:e.field,numClasses:Y,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?r:void 0,minValue:e.minValue,maxValue:e.maxValue,signal:e.signal}).then((e=>{let t,r,a;if(e.classBreakInfos.some((e=>(e.hasAvg&&(t=e),!!t))),t){const e=t.maxValue-t.minValue;r=t.minValue+e/2,a=4*e}const i={min:e.minValue,max:e.maxValue,avg:r,stddev:a};return G(i)}))}_getSummaryStatsQuery(e,t){const{field:r,normalizationType:a,normalizationField:i,normalizationTotal:s,minValue:n,maxValue:o}=e,l=this.supportsSQLExpression&&t?N(this,r):e.sqlExpression,u=b({field:r,normalizationType:a,normalizationField:i,normalizationTotal:s,layer:this}),m=l||u,c=m?E(m,n,o):null,p=L({field:r,normalizationField:i,normalizationType:a}),h=j(e.sqlWhere,p),y=j(h,c),f=U({normalizationField:i,normalizationType:a,sqlExpression:l,supportsSQLExpression:this.supportsSQLExpression,minValue:n,maxValue:o}),F=d(this.getField(r)),g=A.filter((e=>"nullcount"===e?f:!F||"count"===e)),w=this.layer.createQuery();return w.where=j(w.where,y),w.sqlFormat=l?"standard":null,w.outStatistics=g.map((e=>{const t=new S;let r=null,a=null,i=`${e}_value`;return"variance"===e?(r="var",a=m):"nullcount"===e?(r="count",a=this.layer.objectIdField,i="totalcount_value"):"median"===e?(r="percentile-continuous",a=m,t.statisticParameters={value:.5}):(r=e,a=m),t.statisticType=r,t.onStatisticField=a,t.outStatisticFieldName=i,t})),w}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType));const r=this._getSummaryStatsQuery(e,t),a=await this.layer.queryFeatures(r,{signal:e.signal}),i=B(a,t);return G(i)}async _summaryStatsFromClientQuery(e,t){const r=this._getSummaryStatsQuery(e,t),a=await this.layer.queryFeatures(r,{signal:e.signal}),i=B(a,t);return G(i)}async _getNormalizationTotalFromMemory(e,t,a){const{featuresJSON:i,graphics:s,layerView:n,query:o}=t,l=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:a}):i?await this.workerClient.summaryStatistics({field:e},i):await _({attribute:{field:e},features:s})).sum;if(null==l)throw new r("feature-layer-adapter:invalid","invalid normalizationTotal");return l}async _summaryStatsFromMemory(e,t){const{view:r,field:a,valueExpression:i,normalizationType:s,signal:n}=e,o={field:a,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:m,query:c,fieldInfos:p}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return i&&r&&(l||u)&&(o.fieldType=t?.type?h.toJSON(t.type):null,o.viewInfoParams=k(r),o.fieldInfos=p),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:l,graphics:u,layerView:m,query:c},n)),!l&&!u&&m&&"querySummaryStatistics"in m?m.querySummaryStatistics(c,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):_({attribute:o,features:u})}async _processStatsFromMemoryParams(e){const t=e.features;if(t?.length){return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:t}:{featuresJSON:t}}const{view:a,field:i,normalizationField:s,valueExpression:n,returnGeometry:o,layerViewFunc:l,signal:u}=e;let m=null,c=null,p=null,h=null,d=null;if(a)try{m=await a.whenLayerView(this.layer),c=l in m&&"function"==typeof m[l]}catch{c=!1}if(c)try{await this._waitForLayerViewUpdate(m);const e=await Q({field:i,normalizationField:s,valueExpression:n});(await O(this,e,m)).length?c=!1:(p=this.layer.createQuery(),p.outFields=e,p.returnGeometry=!1),m.suspended&&(c=!1)}catch{c=!1}if(!c&&(h=await this._fetchFeaturesForStats({field:i,valueExpression:n,normalizationField:s,returnGeometry:o,view:a,signal:u},"json"),d=(await Q({valueExpression:n})).map((e=>this.getField(e)?.toJSON())).filter(Boolean),!h?.length))throw new r("feature-layer-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:m,query:p,featuresJSON:h,fieldInfos:d}}_uvFromGenRenderer(e,t){const r=e.field,a=new w;a.attributeField=r;const i=new F;return i.classificationDefinition=a,this.generateRenderer(i,e.signal).then((e=>{const t={},a=this.getField(r);return e.uniqueValues.forEach((e=>{let r=e.value;null!=r&&""!==r&&("string"!=typeof r||""!==r.trim()&&"<null>"!==r.toLowerCase())||(r=null),null==t[r]?t[r]={count:e.count,data:y(a)&&r?Number(r):r}:t[r].count=t[r].count+e.count})),{count:t}})).then((r=>W(r,t,e.returnAllCodedValues)))}_getUVQuery(e){const t=e.field,r=e.sqlExpression,a="countOF"+(t||"Expr"),i=new S;i.statisticType="count",i.onStatisticField=r?"1":t,i.outStatisticFieldName=a;const s=this.layer.createQuery();return s.where=j(s.where,e.sqlWhere),s.sqlFormat=r?"standard":null,s.outStatistics=[i],s.groupByFieldsForStatistics=[t||r],s}_uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(this._getUVQuery(e),{signal:e.signal}))).then((t=>P(t,this,e.field,e.view,null,e.signal))).then((r=>W(r,t,e.returnAllCodedValues)))}async _uvFromClientQuery(e,t){const{signal:r}=e,a=this._getUVQuery(e),i=await this.layer.queryFeatures(a,{signal:r}),s=await P(i,this,e.field,e.view,null,r);return W(s,t,e.returnAllCodedValues)}async _uvFromMemory(e,t){const{view:r,field:a,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:m,fieldInfos:c}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),p={field:a,valueExpression:i,domain:t,returnAllCodedValues:s};return i&&r&&o&&(p.viewInfoParams=k(r),p.fieldInfos=c),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(m,p,{signal:n}):o?this.workerClient.uniqueValues(p,o):z({attribute:p,features:l})}_calcBinsSQL(e,t,r){const a=[],i=t.length;return t.forEach(((t,s)=>{const[n,o]=t;let l=null;l=0!==s||r?s!==i-1||r?j(`${e} >= ${n}`,`${e} ${s===i-1?" <= ":" < "} ${o}`):`${e} >= ${n}`:`${e} < ${o}`,a.push("WHEN ("+l+") THEN "+(s+1))})),["CASE",a.join(" "),"ELSE 0","END"].join(" ")}_getNormalizationTotal(e,t,r){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,signal:r}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const r=e.valueExpression||e.sqlExpression,a=e.signal;if(!r){const{field:r,normalizationType:i,normalizationField:s}=e,n=r?this.getField(r):null,o=f(n),l={field:r,normalizationType:i,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?N(this,r):b(l),sqlWhere:o?null:e.sqlWhere||L({field:r,normalizationType:i,normalizationField:s}),signal:a}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,signal:a}}_getDataRange(e,t,r){return null!=t&&null!=r?Promise.resolve({min:t,max:r}):this.summaryStatistics(e).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.signal).then((t=>{const r=this._getQueryParamsForExpr(e,t);return this._getDataRange(r,e.minValue,e.maxValue).then((a=>{const{min:i,max:s}=a,n=e.numBins||ee,o=$(i,s,n),l=this._calcBinsSQL(r.sqlExpression,o,null!=e.minValue&&null!=e.maxValue),u=new S({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),m=this.layer.createQuery();return m.where=j(m.where,r.sqlWhere),m.sqlFormat="standard",m.outStatistics=[u],m.groupByFieldsForStatistics=[l],m.orderByFields=[l],this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(m,{signal:r.signal}))).then((e=>R(e,i,s,n,t)))}))}))}_histogramForField(e){let t=null;return t=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new r("feature-layer-adapter:insufficient-data","Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),t.then((t=>this._getBins({min:t.min,max:t.max},e.field,e.numBins,e.view,e.signal)))}_getBins(e,t,r=ee,a,i){const{min:s,max:n,normTotal:o,excludeZerosExpr:l}=e,u=e.intervals||$(s,n,r),m=e.sqlExpr||t;return this._queryBins(u,m,l,a,i).then((e=>({bins:e.map(((e,t)=>({minValue:u[t][0],maxValue:u[t][1],count:e.value}))),minValue:s,maxValue:n,normalizationTotal:o})))}_queryBins(e,t,r,a,i){const s=[],o=e.length;for(let n=0;n<o;n++){const a=j(r,j(t+" >= "+e[n][0],null!==e[n][1]?t+(n===o-1?" <= ":" < ")+e[n][1]:""));s.push(a)}return n(s.map((e=>this.queryFeatureCount({whereClause:e,view:a,signal:i}))))}_binParamsFromGenRend(e,t){const{field:r,normalizationType:a,normalizationField:i,signal:s}=e,n=L({field:r,normalizationType:a,normalizationField:i}),o=new F({classificationDefinition:H({field:r,normalizationType:a,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numBins||ee}),where:j(n,t)});return this.generateRenderer(o,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return D({field:r,normalizationType:a,normalizationField:i,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}async _histogramFromMemory(e){const{view:t,field:r,signal:a}=e,{featuresJSON:i,graphics:s,layerView:n,query:o,fieldInfos:l}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),u={field:r,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&i&&(u.viewInfoParams=k(t),u.fieldInfos=l),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(u.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:i,graphics:s,layerView:n,query:o},a)),!i&&!s&&n&&"queryHistogram"in n?n.queryHistogram(o,u,{signal:a}):i?this.workerClient.histogram(u,i):q({attribute:u,features:s})}_classBreaksFromGenRend(e){const{field:t,normalizationType:r,normalizationField:a,normalizationTotal:i,signal:s}=e,n=L({field:t,normalizationType:r,normalizationField:a}),o=b({field:t,normalizationType:r,normalizationField:a,normalizationTotal:i,layer:this}),l=E(o,e.minValue,e.maxValue),u=H({field:t,normalizationType:r,normalizationField:a,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||Y}),m=new F;return m.classificationDefinition=u,m.where=j(n,l),this.generateRenderer(m,s).then((t=>Z(t,e.classificationMethod)))}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:r}=e,a=e.numClasses||Y,i=[],s=(r-t)/a;for(let l=0;l<a;l++){const e=t+l*s;i.push({minValue:e,maxValue:e+s})}i[a-1].maxValue=r;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=Z(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:r,signal:a}=e,{featuresJSON:i,graphics:s,layerView:n,query:o,fieldInfos:l}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),u={field:r,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&i&&(u.viewInfoParams=k(t),u.fieldInfos=l),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(u.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:i,graphics:s,layerView:n,query:o},a)),!i&&!s&&n&&"queryClassBreaks"in n?n.queryClassBreaks(o,u,{signal:a}):i?this.workerClient.classBreaks(u,i):V({attribute:u,features:s})}async _heatmapStatsFromMemory(e,t){const{view:r,field:a,radius:i}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0}),o=new g({extent:r.extent,tolerance:"2d"===r.type?r.state.resolution:r.pixelSizeAt(r.center)}),l={field:a,fieldOffset:t,radius:i,transform:c(o),spatialReference:r.spatialReference?.toJSON(),size:r.size};return s?.length||n?.length?s?this.workerClient.heatmapStatistics(l,s):T({attribute:l,features:n}):{count:0,min:null,max:null,avg:null,stddev:null}}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}summaryStatistics(e){const{field:t,normalizationType:a,sqlExpression:i,view:s,features:n,useFeaturesInView:l}=e,u=t?this.getField(t):null,m=f(u),c=e.valueExpression||i,p=c&&!i,h=this._hasLocalSource||n||l,d=s&&"3d"===s.type;if(h||p)return p||n||l||d?this._summaryStatsFromMemory(e,u):this._summaryStatsFromClientQuery(e,m);if(!this.supportsSQLExpression&&(m||c||"natural-log"===a||"square-root"===a))return Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries"));return(a&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,m)).catch((()=>(o(e.signal),this._summaryStatsFromMemory(e,u))))}uniqueValues(e){const{field:t,valueExpression:r,sqlExpression:a,features:i,useFeaturesInView:s,signal:n}=e,l=(t?this.getField(t):null)&&this.getFieldDomain(t),u=r&&(!a||!this.supportsSQLExpression),m=this._hasLocalSource||i||s||u,c=e.view,p=c&&"3d"===c.type;return m?u||i||s||p?this._uvFromMemory(e,l):this._uvFromClientQuery(e,l):this._uvFromServiceQuery(e,l).catch((t=>(o(n),e.field?this._uvFromGenRenderer(e,l):t))).catch((()=>(o(n),p?this._uvFromMemory(e,l):this._uvFromClientQuery(e,l))))}histogram(e){const{field:t,normalizationType:a,normalizationField:i,classificationMethod:s,view:n,signal:o}=e,l=t?this.getField(t):null,u=f(l),m=e.valueExpression||e.sqlExpression,c=m&&!e.sqlExpression,p=this._hasLocalSource||e.features||e.useFeaturesInView||c,h=this.supportsSQLExpression,d=!s||"equal-interval"===s,y=e.minValue,F=e.maxValue,g=null!=y&&null!=F,S=e.numBins||ee;return p?this._histogramFromMemory(e):(m||h)&&d?h||!m&&"natural-log"!==a&&"square-root"!==a?this._histogramForExpr(e):Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries")):u&&d?Promise.reject(new r("feature-layer-adapter:not-supported","Normalization and date field are not allowed when layer does not support standardized SQL expression for queries")):a||!d?this._binParamsFromGenRend(e).then((s=>{if(!g)return this._getBins(s,t,S,n,o);if(y>s.max||F<s.min)throw new r("histogram:insufficient-data","Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(d)return this._getBins({min:y,max:F,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},t,S,n,o);{const r={field:t,normalizationType:a,normalizationField:i,normalizationTotal:s.normTotal,layer:this},l=b(r),u=E(l,y,F);return this._binParamsFromGenRend(e,u).then((e=>this._getBins(e,t,S,n,o)))}})):this._histogramForField(e)}classBreaks(e){const t=!1!==e.analyzeData,r=this._hasLocalSource||e.features||e.useFeaturesInView||e.valueExpression;if(t&&r)return this._classBreaksFromMemory(e);return(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(o(e.signal),this._classBreaksFromMemory(e))))}queryFeatureCount(e){if(this._hasLocalSource)return Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support count query"));const t=this.layer,a=t.createQuery();return a.where=j(a.where,e.whereClause),t.queryFeatureCount(a,{signal:e.signal})}generateRenderer(e,t){const a=this.layer;if(this._hasLocalSource||a.version<10.1)return Promise.reject(new r("feature-layer-adapter:not-supported","Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)"));const i=new K({url:a.parsedUrl.path,source:a.dynamicDataSource,gdbVersion:a.gdbVersion}),s=a.createQuery();return e.where=j(e.where,s.where),i.execute(e,{signal:t})}heatmapStatistics(e){const{field:t,fieldOffset:r,view:a,signal:i}=e;return(t&&null==r?this.summaryStatistics({field:t,view:a,signal:i}):Promise.resolve(null)).then((t=>{let a=r||0;if(t){const{count:e,min:r,max:i}=t;e?r===i&&0===r?a=1:i<=0?a="abs":r<0&&(a=-1.01*r):a=1}return this._heatmapStatsFromMemory(e,a).then((e=>({...e,summaryStatistics:t,fieldOffset:a})))}))}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new r("feature-layer-adapter:not-supported","Layer does not support advanced SQL expressions and standardized queries");const{fields:t,view:a,signal:i}=e,s=v(t),n=x(t),o=a&&this._hasLocalSource?await this._uvFromMemory({valueExpression:s,view:a,signal:i}):await this._uvFromServiceQuery({sqlExpression:n.expression,valueExpression:s,signal:i});return J(o.uniqueValueInfos,t)}async getSampleFeatures(e,r){const{view:a,sampleSize:i,requiredFields:s,returnGeometry:n,signal:l}=e,u=this.layer.createQuery(),m=1,c="json"===r;u.outSpatialReference=e.spatialReference||a&&a.spatialReference,u.returnGeometry=!!n,u.outFields=s;let p=[],h=!1;if(a)try{const e=await a.whenLayerView(this.layer);if(h=!(await O(this,s,e)).length,h&&(p=await this._fetchFeaturesFromMemory(e,u,l,r),p.length&&i>0&&i<=p.length))return t(p,i,m)}catch(d){o(l)}try{if(this._hasLocalSource)return h?p:c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);const r=await this.queryFeatureCount({view:a,signal:l}),s=this.layer.capabilities.query.maxRecordCount;let n=-1===i?r:i;if(n=s&&n>s?s:n,r<=p.length||p.length>=s)return p;const o=a.extent.width/a.width/a.scale*re;if(u.maxAllowableOffset=e.resolution||o,r<=n)return c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);if(r<=te){const e=await this.layer.queryObjectIds();return u.objectIds=t(e,n,m),c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}return this.layer.get("capabilities.query.supportsPagination")&&(u.num=Math.min(n,te)),c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}catch(d){return o(l),p}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=C.getInstance(),await this.workerClient.open(i(i(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([u({constructOnly:!0})],ae.prototype,"layer",void 0),ae=e([m("esri.smartMapping.support.adapters.FeatureLayerAdapter")],ae);const ie=ae;export{ie as default};
