/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import t from"../../../Graphic.js";import{pickRandom as a}from"../../../core/arrayUtils.js";import r from"../../../core/Error.js";import{unwrap as s,isSome as i}from"../../../core/maybe.js";import{timeout as o,throwIfAborted as n}from"../../../core/promiseUtils.js";import{whenOnce as l}from"../../../core/reactiveUtils.js";import{property as u}from"../../../core/accessorSupport/decorators/property.js";import"../../../core/has.js";import"../../../core/accessorSupport/ensureType.js";import{subclass as m}from"../../../core/accessorSupport/decorators/subclass.js";import{kebabDict as p}from"../../../layers/support/fieldType.js";import{isNumericField as c,isDateField as d}from"../../../layers/support/fieldUtils.js";import h from"../../../rest/support/FeatureSet.js";import{summaryStatistics as y,uniqueValues as f,classBreaks as g,histogram as F}from"../../statistics/support/statsWorker.js";import{WorkerClient as w}from"../../statistics/support/WorkerClient.js";import{getFieldsList as _}from"../utils.js";import S from"./FeatureLayerAdapter.js";import v from"./LayerAdapter.js";import{getMissingFields as x,ensureFeaturesJSON as L,getViewInfoParams as C,getUniqueValuesFromFeatureSet as E,getHistogramFromFeatureSet as z}from"./support/utils.js";import{createUVResult as T}from"../../../statistics/utils.js";let A=class extends v{constructor(e){super(e)}destroy(){this._featureLayerAdapter=null,this.workerClient?.destroy()}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!a.length)return e;const r=this.layer.objectIdField,s=e.clone(),i=t.filter((e=>{const t=this.layer.getField(e);return!a.includes(t.name)})),o=i.some((e=>this.layer.getField(e).name===r));return s.outFields=o?i:[...i,r],s}async _fetchFeaturesFromMemory(e,t,a){if(!e)throw new r("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const s=await e.whenLayerView(this.layer),i=new AbortController,u=i.signal,m=l((()=>!s.updating),u);await o(m,5e3,i);const p=await x(this,a,s);n(u);const c=this._updateQuery(t,a,p),d=await s.queryFeatures(c,{signal:u});n(u);const h=d.features;return p.length?s.whenGraphicAttributes(h,p):h}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(L)}_fetchFeaturesForStats(e,t){return _({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}async _processStatsFromMemoryParams(e){const t=e.features;if(t?.length){return t.length&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass?{graphics:t}:{featuresJSON:t}}const{view:a,field:s,normalizationField:i,valueExpression:o,signal:n}=e,l=await this._fetchFeaturesForStats({field:s,valueExpression:o,normalizationField:i,view:a,signal:n});if(!l?.length)throw new r("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");return{graphics:l}}_generateFeatureSetForCachedHistogram(e,a=e.minimum,r=e.maximum,s){const i=[];for(let t=0;t<s;t++)i[t]=0;const o=e.counts.length,n=e.minimum,l=e.maximum;for(let t=0;t<o;t++){const u=(t+.5)/o,m=((1-u)*n+u*l-a)/(r-a)*s;m>=0&&m<=s&&(i[m===s?s-1:Math.floor(m)]+=e.counts[t])}const u=[];i.forEach(((e,a)=>{const r=new t({attributes:{}});r.attributes.EXPR_1=a+1,r.attributes.countOFExpr=e,u.push(r)}));const m=new h;return m.features=u,m}_getCachedStatistics(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r,totalValuesCount:s}=t;let{avg:i,stddev:o,sum:n,variance:l,count:u}=t;return 0===a&&0===r||(i=0===i?null:i,n=0===n?null:n,o=0===o?null:o,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=n&&null!=i?u=Math.round(n/i):null!=s&&(u=s)),{avg:i,count:u,max:r,min:a,stddev:o,sum:n,variance:l}}))}async _getNormalizationTotal(e,t,a){const s=(t?await this.workerClient.summaryStatistics({field:e},t):await y({attribute:{field:e},features:a})).sum;if(null==s)throw new r("scene-layer-adapter:invalid","invalid normalizationTotal");return s}async _getSummaryStatisticsFromMemory(e,t){const{view:a,field:r,normalizationField:s,valueExpression:i}=e,{featuresJSON:o,graphics:n}=await this._processStatsFromMemoryParams(e),l={field:r,valueExpression:i,normalizationType:e.normalizationType,normalizationField:s,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue};return e.valueExpression&&a&&o&&(l.fieldType=t?.type?p.toJSON(t.type):null,l.viewInfoParams=C(a)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotal(r,o,n)),o?this.workerClient.summaryStatistics(l,o):y({attribute:l,features:n})}_getCachedStatisticsForUniqueValues(e,a){const s=this.layer,i=a&&a.name,o=a&&this.getFieldDomain(e.field);return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):s.queryCachedStatistics(i,{signal:e.signal}).then((r=>{const o=r.stats;if(!o.mostFrequentValues)throw new Error;const n=r.labels&&r.labels.labels,l={},u=[],m="countOF"+i;o.mostFrequentValues.forEach((e=>{const r=new t({attributes:{}});r.attributes[i]=a&&a.name!==s.objectIdField&&(c(a)||d(a))?Number(e.value):e.value,r.attributes[m]=e.count,u.push(r)})),n&&n.forEach((e=>{l[e.value]=e.label}));const p=new h;return p.features=u,E(p,this,e.field,e.view,l,e.signal)})).then((t=>T(t,o,e.returnAllCodedValues)))}async _getUniqueValuesFromMemory(e,t){const a=t&&this.getFieldDomain(e.field),{view:r,field:s,valueExpression:i,returnAllCodedValues:o}=e,n={field:s,valueExpression:i,domain:a,returnAllCodedValues:o},{featuresJSON:l,graphics:u}=await this._processStatsFromMemoryParams(e);return e.valueExpression&&r&&l&&(n.viewInfoParams=C(r)),l?this.workerClient.uniqueValues(n,l):f({attribute:n,features:u})}_getCachedStatisticsForHistogram(e,t){const a=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new r("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):a.queryCachedStatistics(t&&t.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:s}=e,i=null!=r?r:a.min,o=null!=s?s:a.max,n=e.numBins||10,l=this._generateFeatureSetForCachedHistogram(a.histogram,i,o,n);return z(l,i,o,n)}))}async _getClassBreaksFromMemory(e){const{view:t,field:a,normalizationField:r,valueExpression:s}=e,{featuresJSON:i,graphics:o}=await this._processStatsFromMemoryParams(e),n={field:a,valueExpression:s,normalizationType:e.normalizationType,normalizationField:r,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&i&&(n.viewInfoParams=C(t)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(n.normalizationTotal=await this._getNormalizationTotal(a,i,o)),i?this.workerClient.classBreaks(n,i):g({attribute:n,features:o})}async _getHistogramFromMemory(e){const{view:t,field:a}=e,{featuresJSON:r,graphics:s}=await this._processStatsFromMemoryParams(e),i={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&r&&(i.viewInfoParams=C(t)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(i.normalizationTotal=await this._getNormalizationTotal(a,r,s)),r?this.workerClient.histogram(i,r):F({attribute:i,features:s})}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}summaryStatistics(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.summaryStatistics(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatistics(e,t).catch((()=>(n(e.signal),this._getSummaryStatisticsFromMemory(e,t)))):this._getSummaryStatisticsFromMemory(e,t)}uniqueValues(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.uniqueValues(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatisticsForUniqueValues(e,t).catch((()=>(n(e.signal),this._getUniqueValuesFromMemory(e,t)))):this._getUniqueValuesFromMemory(e,t)}histogram(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.histogram(e):this._hasCachedStatistics(t&&t.name)?this._getCachedStatisticsForHistogram(e,t).catch((()=>(n(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const t=this.getField(e.field);return this._featureLayerAdapter?this._featureLayerAdapter.classBreaks(e):this._hasCachedStatistics(t&&t.name)?Promise.reject(new r("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,t):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new r("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,t){const{view:r,sampleSize:s,requiredFields:i,returnGeometry:o,signal:l}=e,u=1,m="json"===t,p=this.layer.createQuery();p.outFields=i,p.returnGeometry=!!o,p.where=null,p.num=s;let c=[];try{if(c=m?await this._fetchFeaturesJSONFromMemory(r,p,i):await this._fetchFeaturesFromMemory(r,p,i),c.length&&s>0&&s<=c.length)return a(c,s,u)}catch(h){n(l)}let d=null;if(this._featureLayerAdapter){const a={...e};delete a.view,d=await this._featureLayerAdapter.getSampleFeatures(a,t)}return d&&d.length?d:a(c,c.length,u)}load(e){const t=this.layer.load(e).then((async t=>{this.workerClient=w.getInstance(),await this.workerClient.open(s(s(e).signal));const a=t.associatedLayer;if(this.geometryType=t.geometryType,i(a)){this._featureLayerAdapter=new S({layer:a});return this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}))}this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([u({constructOnly:!0})],A.prototype,"layer",void 0),A=e([m("esri.smartMapping.support.adapters.SceneLayerAdapter")],A);const j=A;export{j as default};
