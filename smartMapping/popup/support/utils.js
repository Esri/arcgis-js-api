/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{unique as e}from"../../../core/arrayUtils.js";import{fetchMessageBundle as t}from"../../../intl/messages.js";import{substitute as n}from"../../../intl/substitute.js";import{numericTypes as i}from"../../../layers/support/fieldUtils.js";import"../../../popup/content/AttachmentsContent.js";import"../../../popup/content/Content.js";import"../../../popup/content/CustomContent.js";import"../../../popup/content/ExpressionContent.js";import s from"../../../popup/content/FieldsContent.js";import"../../../popup/content/MediaContent.js";import o from"../../../popup/content/TextContent.js";import r from"../../../popup/ExpressionInfo.js";import a from"../../../popup/FieldInfo.js";import{getAttributes as l}from"../../../renderers/support/utils.js";import{viewScaleRE as p}from"../../../renderers/visualVariables/support/visualVariableUtils.js";let m=0;const u="expression/";function f(e){return"hasVisualVariables"in e&&e.hasVisualVariables()?e.visualVariables.filter((e=>!p.test(e.valueExpression)&&(!("target"in e)||"outline"!==e.target))):[]}function d(e,t){let n=null;"popupTemplate"in e&&e.popupTemplate&&(n=e.popupTemplate.fieldInfos);const s=e.getField(t);let o=null;if(n&&n.some((e=>!(!e||e.fieldName.toLowerCase()!==s.name.toLowerCase())&&(o=e.clone(),!0))),!o){const e=i.includes(s.type),t="integer"===s.type||"small-integer"===s.type;o=new a({fieldName:s.name,isEditable:s.editable,visible:!0,format:e?{places:t?0:2,digitSeparator:!0}:null})}return o.label||(o.label=s.alias),o}function c(e){const{expression:t,title:n,returnType:i}=e;return new r({name:"expr"+m++,expression:t,title:n,returnType:i})}function b(e){const t="number"===e.returnType?{places:2,digitSeparator:!0}:null;return new a({fieldName:`${u}${e.name}`,visible:!0,format:t})}async function x(i){const s=await t("esri/smartMapping/t9n/smartMapping"),{renderer:o,layer:r,normFieldExpressionTemplate:a}=i,p=[],m=[],u=l(o,f);for(const e of u)if("field"===e.type)p.push(d(r,e.field));else if("normalized-field"===e.type){const t=r.getField(e.field),i=r.getField(e.normalizationField),o=c({type:"expression",expression:`\n      $feature["${t.name}"];\n      $feature["${i.name}"];\n      ${"percentage"===a?`($feature["${t.name}"] / $feature["${i.name}"]) * 100;`:`$feature["${t.name}"] / $feature["${i.name}"];`}\n      `,title:n("percentage"===a?s.normFieldLabelAsPercent:s.normFieldLabel,{expression1:t.alias,expression2:i.alias}),returnType:"number"});p.push(b(o),d(r,e.field),d(r,e.normalizationField)),m.push(o)}else if("expression"===e.type){const t=c(e);p.push(b(t)),m.push(t)}return{fieldInfos:e(p,((e,t)=>e.fieldName===t.fieldName)),expressionInfos:e(m,((e,t)=>e.expression===t.expression))}}async function g(e,i){const{fieldInfos:r,expressionInfos:a}=i,l=await t("esri/smartMapping/t9n/smartMapping");if(r.length>2)return[new s({fieldInfos:r})];const p=[];for(const t of r){const i=t.fieldName;let s=t.label;if(!s){const t=e.getField(i);if(t)s=t.alias||i;else if(a){const e=i.split(u)[1],t=a[a.findIndex((t=>t.name===e))];t&&(s=t.title||t.name)}}p.push(new o({text:n(l.fieldInfo,{fieldLabel:s,fieldValue:`{${i}}`})}))}return p}function y(e){return!(!("normalizationField"in e)||!e.normalizationField)||"hasVisualVariables"in e&&e.hasVisualVariables()&&e.visualVariables.some((e=>!(!("normalizationField"in e)||!e.normalizationField)))}export{u as expressionFieldPrefix,g as getContentFromFieldInfos,c as getExpressionInfo,x as getFieldAndExpressionInfos,d as getFieldInfo,b as getFieldInfoFromExpressionInfo,f as getPrimaryVisualVariables,y as hasNormalizedField};
