/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import{_ as e}from"../../../../chunks/tslib.es6.js";import"../../../../geometry.js";import{unwrap as t}from"../../../../core/maybe.js";import{property as s}from"../../../../core/accessorSupport/decorators/property.js";import"../../../../core/arrayUtils.js";import"../../../../core/has.js";import"../../../../core/accessorSupport/ensureType.js";import{subclass as r}from"../../../../core/accessorSupport/decorators/subclass.js";import{estimateStatisticsFromHistograms as a}from"../../../../layers/support/rasterFunctions/stretchUtils.js";import i from"../../../../rest/support/ImageHistogramParameters.js";import o from"./RasterLayerAdapter.js";import n from"../../../../geometry/Point.js";let c=class extends o{constructor(){super(...arguments),this._cacheSize=20,this._statsCache=new Map}generateRasterInfo(e){const s=t(e?.renderingRule);return this.layer.generateRasterInfo(s,{signal:e?.signal})}async estimateStatisticsHistograms(e){const s=t(e?.renderingRule)?.functionName??"default";if(this._statsCache.has(s))return this._statsCache.get(s);let{width:r,height:o,pixelSize:c}=this.layer.rasterInfo,l=1;for(;r>2e3||o>2e3;)r/=2,o/=2,l*=2;const p=e?.renderingRule??this.layer.renderingRule,{fullExtent:h,mosaicRule:m}=this.layer;c=new n(c.x*l,c.y*l,h.spatialReference);const u=new i({geometry:h,pixelSize:c,renderingRule:p,mosaicRule:m});let g;if(this.layer.capabilities.operations.supportsComputeStatisticsHistograms)g=await this.layer.computeStatisticsHistograms(u,e);else{const{histograms:t}=await this.layer.computeHistograms(u,e);g={statistics:a(t),histograms:t}}if(this._statsCache.set(s,g),this._statsCache.size>this._cacheSize){const e=this._statsCache.keys().next().value;this._statsCache.delete(e)}return g}supportsMultidirectionalHillshade(){return this.layer.version>=10.81}load(e){return this.addResolvingPromise(this.layer.load(e).then((()=>{this.generateRasterInfo({renderingRule:this.renderingRule,signal:t(e)?.signal}).then((e=>this.rasterInfo=e))}))),Promise.resolve(this)}};e([s()],c.prototype,"layer",void 0),c=e([r("esri.smartMapping.support.adapters.ImageryLayerAdapter")],c);const l=c;export{l as default};
