/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["../../../../chunks/_rollupPluginBabelHelpers","../../../../chunks/tslib.es6","../../../../geometry","../../../../core/maybe","../../../../core/accessorSupport/decorators/property","../../../../core/accessorSupport/ensureType","../../../../core/arrayUtils","../../../../core/accessorSupport/decorators/subclass","../../../../layers/support/rasterFunctions/stretchUtils","../../../../rest/support/ImageHistogramParameters","./RasterLayerAdapter","../../../../geometry/Point"],(function(e,t,s,r,a,i,n,o,c,l,u,p){"use strict";let h=function(t){function s(){var e;return(e=t.apply(this,arguments)||this)._cacheSize=20,e._statsCache=new Map,e}e._inheritsLoose(s,t);var a=s.prototype;return a.generateRasterInfo=function(e){const t=r.unwrap(e?.renderingRule);return this.layer.generateRasterInfo(t,{signal:e?.signal})},a.estimateStatisticsHistograms=function(){var t=e._asyncToGenerator((function*(e){const t=r.unwrap(e?.renderingRule)?.functionName??"default";if(this._statsCache.has(t))return this._statsCache.get(t);let{width:s,height:a,pixelSize:i}=this.layer.rasterInfo,n=1;for(;s>2e3||a>2e3;)s/=2,a/=2,n*=2;const o=e?.renderingRule??this.layer.renderingRule,{fullExtent:u,mosaicRule:h}=this.layer;i=new p(i.x*n,i.y*n,u.spatialReference);const g=new l({geometry:u,pixelSize:i,renderingRule:o,mosaicRule:h});let y;if(this.layer.capabilities.operations.supportsComputeStatisticsHistograms)y=yield this.layer.computeStatisticsHistograms(g,e);else{const{histograms:t}=yield this.layer.computeHistograms(g,e);y={statistics:c.estimateStatisticsFromHistograms(t),histograms:t}}if(this._statsCache.set(t,y),this._statsCache.size>this._cacheSize){const e=this._statsCache.keys().next().value;this._statsCache.delete(e)}return y}));function s(e){return t.apply(this,arguments)}return s}(),a.supportsMultidirectionalHillshade=function(){return this.layer.version>=10.81},a.load=function(e){return this.addResolvingPromise(this.layer.load(e).then((()=>{this.generateRasterInfo({renderingRule:this.renderingRule,signal:r.unwrap(e)?.signal}).then((e=>this.rasterInfo=e))}))),Promise.resolve(this)},s}(u);t.__decorate([a.property()],h.prototype,"layer",void 0),h=t.__decorate([o.subclass("esri.smartMapping.support.adapters.ImageryLayerAdapter")],h);return h}));
