/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../../core/maybe","../../core/Error","../../renderers/support/AuthoringInfo","../../renderers/Renderer","../../renderers/ClassBreaksRenderer","../../renderers/UniqueValueRenderer","../../renderers/DictionaryRenderer","../../renderers/DotDensityRenderer","../../renderers/HeatmapRenderer","../../renderers/SimpleRenderer","../../renderers/support/jsonUtils","../../geometry/support/scaleUtils","../support/utils","../support/adapters/support/layerUtils","../statistics/spatialStatistics","../heuristics/outline","./support/utils","./support/dotDensityUtils","../statistics/summaryStatisticsForAttributes","../statistics/support/attributeDensity","../../chunks/dotDensity"],(function(e,t,a,i,r,n,s,l,o,d,u,m,p,c,y,b,g,f,w,v,h,S){"use strict";const V=500;async function D(e){if(!(e&&e.layer&&e.view&&e.attributes&&e.attributes.length))throw new a("dot-density-renderer:missing-parameters","'layer', 'view' and 'attributes' parameters are required");if(e.attributes.length>8)throw new a("dot-density-renderer:invalid-parameters","Dot density renderer does not support more than 8 attributes");const i={...e},r=[2,1],n=y.createLayerAdapter(i.layer,r);if(i.layer=n,i.dotBlendingEnabled=null==i.dotBlendingEnabled||i.dotBlendingEnabled,i.dotValueOptimizationEnabled=null==i.dotValueOptimizationEnabled||i.dotValueOptimizationEnabled,!n)throw new a("dot-density-renderer:invalid-parameters","'layer' must be one of these types: "+y.getLayerTypeLabels(r).join(", "));const s=t.isSome(i.signal)?{signal:i.signal}:null;await Promise.all([i.view.when(),n.load(s)]);if("polygon"!==n.geometryType)throw new a("dot-density-renderer:not-supported","Dot density renderer is supported for polygon layers only");return i}async function E(e){let a=e.dotDensityScheme,i=null,r=null;const n=await f.getBasemapInfo(e.basemap,e.view);if(i=t.isSome(n.basemapId)?n.basemapId:null,r=t.isSome(n.basemapTheme)?n.basemapTheme:null,a)return{scheme:S.cloneScheme(a),basemapId:i,basemapTheme:r};const s=S.getSchemes({basemap:i,numColors:e.attributes.length,basemapTheme:r});return s&&(a=s.primaryScheme,i=s.basemapId,r=s.basemapTheme),{scheme:a,basemapId:i,basemapTheme:r}}async function T(e){const{view:t,layer:i,attributes:r,signal:n}=e,s=await i.getSampleFeatures({view:t,sampleSize:V,returnGeometry:!0,signal:n}),[l,o]=await Promise.all([b({features:s,geometryType:i.geometryType}),v({layer:i,attributes:r,includeZeros:!1,includeNegatives:!1,view:t,signal:n})]),d="avgSize"in l&&l.avgSize,u=o.avg;if(!d)throw new a("dot-density-renderer:insufficient-info","Average polygon size is invalid");if(!u)throw new a("dot-density-renderer:insufficient-info","Average attribute value is invalid");const m=p.getResolutionForScale(t.scale,t.spatialReference),c=d*d/(m*m)*.1;return{dotValue:w.roundValue(u/c)||1,referenceScale:t.scale,minSliderValue:1,maxSliderValue:w.roundValue(u)}}async function x(e){const{view:t,layer:i,attributes:r,signal:n}=e,s=[];for(const a of r){const e=await c.getFieldsList({field:a.field,valueExpression:a.valueExpression});s.push(...e)}const l=await i.getSampleFeatures({view:t,sampleSize:V,requiredFields:s,returnGeometry:!0,signal:n}),o=await h({features:l,attributes:r,includeZeros:!1,includeNegatives:!1,view:t});if(!o.avgDensity||!o.minDensity||!o.maxDensity)throw new a("dot-density-renderer:insufficient-info","Invalid density values");const d=p.getResolutionForScale(t.scale,t.spatialReference),u=d*d,m=w.roundValue(o.minDensity*u),y=w.roundValue(o.maxDensity*u),b=10;let g=w.roundValue(o.avgDensity*u*b)||1;return g>y&&(g=y),{dotValue:g,referenceScale:t.scale,minSliderValue:m,maxSliderValue:y}}async function R(e){const t=await D(e),r=t.layer,n=r.geometryType,s=await E(t),l=s&&s.scheme;if(!l)throw new a("dot-density-renderer:insufficient-info","Unable to find dot-density scheme");const d={layer:r,view:t.view,attributes:t.attributes,signal:t.signal},u={layer:t.layer,view:t.view,signal:t.signal},[m,p]=await Promise.all([t.trueDensity?x(d):T(d),t.outlineOptimizationEnabled?g(u):null]),{dotValue:c,referenceScale:y,minSliderValue:b,maxSliderValue:w}=m,v=f.createColors(l.colors,t.attributes.length),h=t.attributes.map(((e,t)=>({field:e.field,valueExpression:e.valueExpression,label:e.label,valueExpressionTitle:e.valueExpressionTitle,color:v[t]}))),S=new o({attributes:h,dotBlendingEnabled:t.dotBlendingEnabled,outline:p?f.getSymbolOutlineFromScheme(l,n,p.opacity):null,dotValue:c,referenceScale:t.dotValueOptimizationEnabled?y:null,legendOptions:t.legendOptions});return p&&p.visualVariables&&p.visualVariables.length&&(S.visualVariables=p.visualVariables.map((e=>e.clone()))),S.authoringInfo=new i({type:"dot-density",minSliderValue:b,maxSliderValue:w}),{renderer:S,dotDensityScheme:l,basemapId:s.basemapId,basemapTheme:s.basemapTheme}}e.createRenderer=R,Object.defineProperty(e,"__esModule",{value:!0})}));
