/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.24/esri/copyright.txt for details.
*/
import"../../../geometry.js";import e from"../../../core/Error.js";import{unwrap as t,isSome as n}from"../../../core/maybe.js";import{pt2px as r}from"../../../core/screenUtils.js";import o from"../../../geometry/SpatialReference.js";import{quantizePoint as i}from"../../../geometry/support/quantizationUtils.js";import{isWrappable as s,getInfo as l}from"../../../geometry/support/spatialReferenceUtils.js";import{isNumericField as u,numericTypes as a}from"../../../layers/support/fieldUtils.js";import{evaluateDensityKernel as f,createValueFunction as c}from"../../../renderers/support/heatmapUtils.js";import{getNormalizedValue as m}from"../../../statistics/utils.js";import{loadArcade as d}from"../../../support/arcadeOnDemand.js";import p from"../../../geometry/Point.js";let h=null;function y(e,t,n){return e.x<0?e.x+=t:e.x>n&&(e.x-=t),e}function I(e,n,r,o){const u=s(r)?l(r):null,a=u?Math.round((u.valid[1]-u.valid[0])/n.scale[0]):null;return e.map((e=>{const r=new p(t(e.geometry));return i(n,r,r,r.hasZ,r.hasM),e.geometry=u?y(r,a,o[0]):r,e}))}function $(e,t=18,n,o,i,s){const l=new Float64Array(i*s);t=Math.round(r(t));let u=Number.POSITIVE_INFINITY,a=Number.NEGATIVE_INFINITY,m=0,d=0,p=0,h=0;const y=c(o,n);for(const{geometry:r,attributes:c}of e){const{x:e,y:n}=r,o=Math.max(0,e-t),I=Math.max(0,n-t),$=Math.min(s,n+t),g=Math.min(i,e+t),j=+y(c);for(let r=I;r<$;r++)for(let s=o;s<g;s++){const o=r*i+s,c=f(s-e,r-n,t),y=l[o];m=l[o]+=c*j;const I=m-y;d+=I,p+=I*I,m<u&&(u=m),m>a&&(a=m),h++}}if(!h)return{mean:0,stddev:0,min:0,max:0,mid:0,count:0};const I=(a-u)/2;return{mean:d/h,stdDev:Math.sqrt((p-d*d/h)/h),min:u,max:a,mid:I,count:h}}async function g(e,t){if(!t)return[];const n=e.field,r=e.valueExpression,i=e.normalizationType,s=e.normalizationField,l=e.normalizationTotal,u=[],a=e.viewInfoParams;let f=null,c=null;if(r){if(!h){const{arcadeUtils:e}=await d();h=e}f=h.createFunction(r),c=a&&h.getViewInfo({viewingMode:a.viewingMode,scale:a.scale,spatialReference:new o(a.spatialReference)})}const p=e.fieldInfos,y=!(t[0]&&"declaredClass"in t[0]&&"esri.Graphic"===t[0].declaredClass)&&p?{fields:p}:null;return t.forEach((e=>{const t=e.attributes;let o;if(r){const t=y?{...e,layer:y}:e,n=h.createExecContext(t,c);o=h.executeFunction(f,n)}else t&&(o=t[n]);if(i&&isFinite(o)){const e=t&&parseFloat(t[s]);o=m(o,i,e,l)}u.push(o)})),u}function j(e){const t=e.field,n=e.normalizationType,r=e.normalizationField;let o;return"field"===n?o="(NOT "+r+" = 0)":"log"!==n&&"natural-log"!==n&&"square-root"!==n||(o=`(${t} > 0)`),o}function x(t,n){return new e(t,n)}function F(e,t,n){const r=null!=t?e+" >= "+t:"",o=null!=n?e+" <= "+n:"";let i="";return i=r&&o?E(r,o):r||o,i?"("+i+")":""}function v(e,t,n,r){let o=null;return t?t.name!==e.objectIdField&&r.includes(t.type)||(o=x(n,"'field' should be one of these types: "+r.join(","))):o=x(n,"'field' is not defined in the layer schema"),o}function b(e,t,n){let r;return t?t.name!==e.objectIdField&&u(t)||(r=x(n,"'field' should be one of these numeric types: "+a.join(","))):r=x(n,"'field' is not defined in the layer schema"),r}function E(e,t){let r=n(e)?e:"";return n(t)&&t&&(r=r?"("+r+") AND ("+t+")":t),r}function N(e,t,n){const r=w({layer:e,fields:t});if(r.length)return x(n,"Unknown fields: "+r.join(", ")+". You can only use fields defined in the layer schema");const o=M({layer:e,fields:t});return o.length?x(n,"Unsupported fields: "+o.join(", ")+". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true"):void 0}function w(e){const t=e.layer;return e.fields.filter((e=>!t.getField(e)))}function M(e){const t=e.layer;return e.fields.filter((e=>{const n=t.getFieldUsageInfo(e);return!n||!n.supportsStatistics}))}function U(e,t,n){const r=[],o=[],i=[],s=[],l=[];e.forEach(((e,t)=>{const u=e.field?"field":"expression",a=e.field||e.valueExpression;e.field?(l.push(a),o.push(`var ${u}${t} = Number($feature["${a}"]);`)):(r.push(`function getValueForExpr${t}() {\n  ${a} \n}`),o.push(`var ${u}${t} = Number(getValueForExpr${t}());`)),n||i.push(`${u}${t} = IIf(${u}${t} < 0, 0, ${u}${t});`),s.push(`${u}${t}`)}));let u="return sum;";const a=r.length?null:l.reduce(((e,t)=>`${e} + ${t}`));let f=null;t||n?t?n||(u="return IIf(sum >= 0, sum, null);",a&&(f=`(( ${a} ) >= 0)`)):(u="return IIf(sum != 0, sum, null);",a&&(f=`(( ${a} ) <> 0)`)):(u="return IIf(sum > 0, sum, null);",a&&(f=`(( ${a} ) > 0)`));return{valueExpression:[r.length?r.join("\n"):"",o.join("\n"),i.join("\n"),`var sum = ${s.join(" + ")};`,u].filter(Boolean).join("\n\n"),sqlExpression:a,sqlWhere:f}}export{$ as calculateHeatmapStats,x as createError,g as getDataValues,F as getRangeExpr,j as getSQLFilterForNormalization,U as getSumOfAttributesExpr,E as mergeWhereClauses,I as quantizeFeatures,N as verifyBasicFieldValidity,v as verifyFieldType,b as verifyNumericField};
