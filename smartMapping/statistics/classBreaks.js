/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["../../core/maybe","../../core/Error","../support/utils","./support/utils","../support/adapters/support/layerUtils"],(function(e,a,i,s,r){"use strict";const l=5;async function n(n){if(!n||!n.layer||!n.field&&!n.valueExpression)throw new a("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(n.valueExpression&&!n.view)throw new a("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");const t=[0,2,1,3],{layer:o,...u}=n,m=r.createLayerAdapter(o,t),p={layerAdapter:m,...u};if(p.normalizationType=i.getNormalizationType(p),p.numClasses=p.numClasses||l,!m)throw new a("class-breaks:invalid-parameters","'layer' must be one of these types: "+r.getLayerTypeLabels(t).join(", "));const d=e.isSome(p.signal)?{signal:p.signal}:null;await m.load(d);const c=p.field,f=p.minValue,w=p.maxValue,h=null!=f||null!=w,y=p.classificationMethod,v="percent-of-total"===p.normalizationType,z=!1!==p.analyzeData,b=c?m.getField(c):null,g=await i.getFieldsList({field:p.field,normalizationField:p.normalizationField,valueExpression:p.valueExpression}),k=s.verifyBasicFieldValidity(m,g,"class-breaks:invalid-parameters");if(k)throw k;if(b){const e=s.verifyNumericField(m,b,"class-breaks:invalid-parameters");if(e)throw e}if(p.valueExpression&&p.normalizationType)throw new a("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(h)if(z){if(v&&null==p.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified")}else{if(null==f||null==w)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(f>=w)throw new a("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(y&&"equal-interval"!==y)throw new a("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(v&&null==p.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false")}else if(!z)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");return p}async function t(e){const{layerAdapter:a,...i}=await n(e);return a.classBreaks(i)}return t}));
