/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../../core/Error","../../core/maybe","./support/utils","../support/binningUtils","../support/utils","../support/adapters/support/layerUtils"],(function(e,a,i,s,r,n,l){"use strict";const t=5;function o(e){return u.apply(this,arguments)}function u(){return(u=e._asyncToGenerator((function*(e){if(!e||!e.layer||!e.field&&!e.valueExpression)throw new a("class-breaks:missing-parameters","'layer' and 'field' or 'valueExpression' parameters are required");if(e.valueExpression&&!e.view)throw new a("class-breaks:missing-parameters","View is required when 'valueExpression' is specified");e.forBinning&&r.verifyBinningParams(e,"class-breaks");const{layer:o,...u}=e,p=e.forBinning?l.binningCapableLayerTypes:l.featureCapableLayerTypes,f=l.createLayerAdapter(o,p,e.forBinning),m={layerAdapter:f,...u};if(m.normalizationType=n.getNormalizationType(m),m.numClasses=m.numClasses||t,!f)throw new a("class-breaks:invalid-parameters","'layer' must be one of these types: "+l.getLayerTypeLabels(p).join(", "));const c=i.isSome(m.signal)?{signal:m.signal}:null;yield f.load(c);const d=m.field,y=m.minValue,h=m.maxValue,w=null!=y||null!=h,b=m.classificationMethod,v="percent-of-total"===m.normalizationType,g=!1!==m.analyzeData,z=d?f.getField(d):null,k=yield n.getFieldsList({field:m.field,normalizationField:m.normalizationField,valueExpression:m.valueExpression}),T=s.verifyBasicFieldValidity(f,k,"class-breaks:invalid-parameters");if(T)throw T;if(z){const e=s.verifyNumericField(f,z,"class-breaks:invalid-parameters");if(e)throw e}if(m.valueExpression&&m.normalizationType)throw new a("class-breaks:invalid-parameters","Normalization is not allowed when 'valueExpression' is specified");if(w)if(g){if(v&&null==m.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'minValue', 'maxValue' are specified")}else{if(null==y||null==h)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");if(y>=h)throw new a("class-breaks:invalid-parameters","'minValue' should be less than 'maxValue'");if(b&&"equal-interval"!==b)throw new a("class-breaks:invalid-parameters","'classificationMethod' other than 'equal-interval' is not allowed when 'analyzeData' is false");if(v&&null==m.normalizationTotal)throw new a("class-breaks:missing-parameters","'normalizationTotal' is required when 'normalizationType' is 'precent-of-total' and 'analyzeData' is false")}else if(!g)throw new a("class-breaks:missing-parameters","Both 'minValue' and 'maxValue' are required when 'analyzeData' is false");const x=s.verifyFilterValidty(m.filter,"class-breaks:invalid-parameters");if(x)throw x;return m}))).apply(this,arguments)}function p(e){return f.apply(this,arguments)}function f(){return(f=e._asyncToGenerator((function*(e){const{layerAdapter:a,...i}=yield o(e);return a.classBreaks(i)}))).apply(this,arguments)}return p}));
