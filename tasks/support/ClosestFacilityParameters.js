/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../../chunks/tslib.es6","../../core/has","../../core/Logger","../../core/accessorSupport/ensureType","../../core/accessorSupport/decorators/property","../../core/jsonMap","../../core/accessorSupport/decorators/reader","../../core/accessorSupport/decorators/subclass","../../core/accessorSupport/decorators/writer","../../core/urlUtils","../../core/uuid","../../portal/support/resourceExtension","../../core/JSONSupport","../../geometry/SpatialReference","../../geometry"],(function(e,r,t,o,i,s,a,p,n,l,c,u,d,y,m,_){"use strict";const w=new a.JSONMap({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"}),N=new a.JSONMap({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),v=new a.JSONMap({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"}),O=new a.JSONMap({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),f=new a.JSONMap({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),S=new a.JSONMap({esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"}),A=new a.JSONMap({esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriYards:"yards"});let D=function(r){function t(e){var t;return(t=r.call(this,e)||this).accumulateAttributes=null,t.attributeParameterValues=null,t.defaultCutoff=null,t.defaultTargetFacilityCount=null,t.directionsLanguage=null,t.directionsLengthUnits=null,t.directionsOutputType=null,t.directionsStyleName=null,t.directionsTimeAttribute=null,t.doNotLocateOnRestrictedElements=!0,t.facilities=null,t.impedanceAttribute=null,t.incidents=null,t.outputGeometryPrecision=null,t.outputGeometryPrecisionUnits=null,t.outputLines=null,t.outSpatialReference=null,t.pointBarriers=null,t.polygonBarriers=null,t.polylineBarriers=null,t.restrictionAttributes=null,t.restrictUTurns=null,t.returnDirections=!1,t.returnFacilities=!1,t.returnIncidents=!1,t.returnPointBarriers=!1,t.returnPolygonBarriers=!1,t.returnPolylineBarriers=!1,t.returnRoutes=!0,t.timeOfDay=null,t.timeOfDayUsage=null,t.travelDirection=null,t.travelMode=null,t.useHierarchy=!1,t}e._inheritsLoose(t,r);var o=t.prototype;return o.readTimeOfDay=function(e,r){return null!=r.timeOfDay?new Date(r.timeOfDay):null},o.writeTimeOfDay=function(e,r){r.timeOfDay=e?e.getTime():null},t}(y.JSONSupport);return r.__decorate([s.property({type:[String],json:{write:!0}})],D.prototype,"accumulateAttributes",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"attributeParameterValues",void 0),r.__decorate([s.property({type:Number,json:{write:!0}})],D.prototype,"defaultCutoff",void 0),r.__decorate([s.property({type:Number,json:{write:!0}})],D.prototype,"defaultTargetFacilityCount",void 0),r.__decorate([s.property({type:String,json:{write:!0}})],D.prototype,"directionsLanguage",void 0),r.__decorate([s.property({type:N.apiValues,json:{read:{reader:N.read},write:{writer:N.write}}})],D.prototype,"directionsLengthUnits",void 0),r.__decorate([s.property({type:O.apiValues,json:{read:{reader:O.read},write:{writer:O.write}}})],D.prototype,"directionsOutputType",void 0),r.__decorate([s.property({type:String,json:{write:!0}})],D.prototype,"directionsStyleName",void 0),r.__decorate([s.property({type:String,json:{write:!0}})],D.prototype,"directionsTimeAttribute",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"doNotLocateOnRestrictedElements",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"facilities",void 0),r.__decorate([s.property({type:String,json:{read:{source:"impedanceAttributeName"},write:{target:"impedanceAttributeName"}}})],D.prototype,"impedanceAttribute",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"incidents",void 0),r.__decorate([s.property({type:Number,json:{write:!0}})],D.prototype,"outputGeometryPrecision",void 0),r.__decorate([s.property({type:A.apiValues,json:{read:{reader:A.read},write:{writer:A.write}}})],D.prototype,"outputGeometryPrecisionUnits",void 0),r.__decorate([s.property({type:w.apiValues,json:{read:{reader:w.read},write:{writer:w.write}}})],D.prototype,"outputLines",void 0),r.__decorate([s.property({type:m,json:{write:!0}})],D.prototype,"outSpatialReference",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"pointBarriers",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"polygonBarriers",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"polylineBarriers",void 0),r.__decorate([s.property({type:[String],json:{write:!0}})],D.prototype,"restrictionAttributes",void 0),r.__decorate([s.property({type:v.apiValues,json:{read:{reader:v.read},write:{writer:v.write}}})],D.prototype,"restrictUTurns",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnDirections",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnFacilities",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnIncidents",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnPointBarriers",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnPolygonBarriers",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnPolylineBarriers",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"returnRoutes",void 0),r.__decorate([s.property({type:Date,json:{type:Number,write:!0}})],D.prototype,"timeOfDay",void 0),r.__decorate([p.reader("timeOfDay")],D.prototype,"readTimeOfDay",null),r.__decorate([l.writer("timeOfDay")],D.prototype,"writeTimeOfDay",null),r.__decorate([s.property({type:S.apiValues,json:{read:{reader:S.read},write:{writer:S.write}}})],D.prototype,"timeOfDayUsage",void 0),r.__decorate([s.property({type:f.apiValues,json:{read:{reader:f.read},write:{writer:f.write}}})],D.prototype,"travelDirection",void 0),r.__decorate([s.property({json:{write:!0}})],D.prototype,"travelMode",void 0),r.__decorate([s.property({type:Boolean,json:{write:!0}})],D.prototype,"useHierarchy",void 0),D=r.__decorate([n.subclass("esri.tasks.support.ClosestFacilityParameters")],D),D}));
