/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.22/esri/copyright.txt for details.
*/
define(["exports","../views/3d/webgl-engine/core/shaderModules/interfaces","../views/3d/webgl-engine/core/shaderModules/ShaderBuilder"],(function(n,e,o){"use strict";function t(){const n=new o.ShaderBuilder;return n.attributes.add("position","vec3"),n.vertex.code.add(e.glsl`void main(void) {
gl_Position = vec4(position, 1.0);
}`),n.fragment.uniforms.add("tileRows","float").add("tileSize","float"),n.fragment.code.add("\n    #define NUM_CELLS 2.0\n    #define PERLIN_WORLEY 0\n    #define WORLEY 1\n\n    float remap(float x, float low1, float high1, float low2, float high2) {\n      return low2 + (x - low1) * (high2 - low2) / (high1 - low1);\n    }\n\n    float saturate(float x) {\n      return clamp(x, 0.0, 1.0);\n    }\n\n    vec4 taylorInvSqrt(vec4 r) {\n      return 1.79284291400159 - 0.85373472095314 * r;\n    }\n\n    vec4 mod289(vec4 x) {\n      return x - floor( x * (1.0 / 289.0)) * 289.0;\n    }\n\n    vec4 permute(vec4 x) {\n      return mod289(((x * 34.0) + 1.0) * x);\n    }\n\n    vec4 fade(vec4 t) {\n      return (t * t * t) * (t * (t * vec4(6) - vec4(15)) + vec4(10));\n    }\n\n    float glmPerlin(vec4 Position, vec4 rep) {\n      vec4 Pi0 = mod(floor(Position), rep);\n      vec4 Pi1 = mod(Pi0 + float(1), rep);\n      vec4 Pf0 = fract(Position);\n      vec4 Pf1 = Pf0 - float(1);\n      vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n      vec4 iy = vec4(Pi0.y, Pi0.y, Pi1.y, Pi1.y);\n      vec4 iz0 = vec4(Pi0.z);\n      vec4 iz1 = vec4(Pi1.z);\n      vec4 iw0 = vec4(Pi0.w);\n      vec4 iw1 = vec4(Pi1.w);\n\n      vec4 ixy = permute(permute(ix) + iy);\n      vec4 ixy0 = permute(ixy + iz0);\n      vec4 ixy1 = permute(ixy + iz1);\n      vec4 ixy00 = permute(ixy0 + iw0);\n      vec4 ixy01 = permute(ixy0 + iw1);\n      vec4 ixy10 = permute(ixy1 + iw0);\n      vec4 ixy11 = permute(ixy1 + iw1);\n\n      vec4 gx00 = ixy00 / float(7);\n      vec4 gy00 = floor(gx00) / float(7);\n      vec4 gz00 = floor(gy00) / float(6);\n      gx00 = fract(gx00) - float(0.5);\n      gy00 = fract(gy00) - float(0.5);\n      gz00 = fract(gz00) - float(0.5);\n      vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n      vec4 sw00 = step(gw00, vec4(0));\n      gx00 -= sw00 * (step(float(0), gx00) - float(0.5));\n      gy00 -= sw00 * (step(float(0), gy00) - float(0.5));\n\n      vec4 gx01 = ixy01 / float(7);\n      vec4 gy01 = floor(gx01) / float(7);\n      vec4 gz01 = floor(gy01) / float(6);\n      gx01 = fract(gx01) - float(0.5);\n      gy01 = fract(gy01) - float(0.5);\n      gz01 = fract(gz01) - float(0.5);\n      vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n      vec4 sw01 = step(gw01, vec4(0.0));\n      gx01 -= sw01 * (step(float(0), gx01) - float(0.5));\n      gy01 -= sw01 * (step(float(0), gy01) - float(0.5));\n\n      vec4 gx10 = ixy10 / float(7);\n      vec4 gy10 = floor(gx10) / float(7);\n      vec4 gz10 = floor(gy10) / float(6);\n      gx10 = fract(gx10) - float(0.5);\n      gy10 = fract(gy10) - float(0.5);\n      gz10 = fract(gz10) - float(0.5);\n      vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n      vec4 sw10 = step(gw10, vec4(0.0));\n      gx10 -= sw10 * (step(float(0), gx10) - float(0.5));\n      gy10 -= sw10 * (step(float(0), gy10) - float(0.5));\n\n      vec4 gx11 = ixy11 / float(7);\n      vec4 gy11 = floor(gx11) / float(7);\n      vec4 gz11 = floor(gy11) / float(6);\n      gx11 = fract(gx11) - float(0.5);\n      gy11 = fract(gy11) - float(0.5);\n      gz11 = fract(gz11) - float(0.5);\n      vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n      vec4 sw11 = step(gw11, vec4(float(0)));\n      gx11 -= sw11 * (step(float(0), gx11) - float(0.5));\n      gy11 -= sw11 * (step(float(0), gy11) - float(0.5));\n\n      vec4 g0000 = vec4(gx00.x, gy00.x, gz00.x, gw00.x);\n      vec4 g1000 = vec4(gx00.y, gy00.y, gz00.y, gw00.y);\n      vec4 g0100 = vec4(gx00.z, gy00.z, gz00.z, gw00.z);\n      vec4 g1100 = vec4(gx00.w, gy00.w, gz00.w, gw00.w);\n      vec4 g0010 = vec4(gx10.x, gy10.x, gz10.x, gw10.x);\n      vec4 g1010 = vec4(gx10.y, gy10.y, gz10.y, gw10.y);\n      vec4 g0110 = vec4(gx10.z, gy10.z, gz10.z, gw10.z);\n      vec4 g1110 = vec4(gx10.w, gy10.w, gz10.w, gw10.w);\n      vec4 g0001 = vec4(gx01.x, gy01.x, gz01.x, gw01.x);\n      vec4 g1001 = vec4(gx01.y, gy01.y, gz01.y, gw01.y);\n      vec4 g0101 = vec4(gx01.z, gy01.z, gz01.z, gw01.z);\n      vec4 g1101 = vec4(gx01.w, gy01.w, gz01.w, gw01.w);\n      vec4 g0011 = vec4(gx11.x, gy11.x, gz11.x, gw11.x);\n      vec4 g1011 = vec4(gx11.y, gy11.y, gz11.y, gw11.y);\n      vec4 g0111 = vec4(gx11.z, gy11.z, gz11.z, gw11.z);\n      vec4 g1111 = vec4(gx11.w, gy11.w, gz11.w, gw11.w);\n\n      vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n      g0000 *= norm00.x;\n      g0100 *= norm00.y;\n      g1000 *= norm00.z;\n      g1100 *= norm00.w;\n\n      vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n      g0001 *= norm01.x;\n      g0101 *= norm01.y;\n      g1001 *= norm01.z;\n      g1101 *= norm01.w;\n\n      vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n      g0010 *= norm10.x;\n      g0110 *= norm10.y;\n      g1010 *= norm10.z;\n      g1110 *= norm10.w;\n\n      vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n      g0011 *= norm11.x;\n      g0111 *= norm11.y;\n      g1011 *= norm11.z;\n      g1111 *= norm11.w;\n\n      float n0000 = dot(g0000, Pf0);\n      float n1000 = dot(g1000, vec4(Pf1.x, Pf0.y, Pf0.z, Pf0.w));\n      float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.z, Pf0.w));\n      float n1100 = dot(g1100, vec4(Pf1.x, Pf1.y, Pf0.z, Pf0.w));\n      float n0010 = dot(g0010, vec4(Pf0.x, Pf0.y, Pf1.z, Pf0.w));\n      float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n      float n0110 = dot(g0110, vec4(Pf0.x, Pf1.y, Pf1.z, Pf0.w));\n      float n1110 = dot(g1110, vec4(Pf1.x, Pf1.y, Pf1.z, Pf0.w));\n      float n0001 = dot(g0001, vec4(Pf0.x, Pf0.y, Pf0.z, Pf1.w));\n      float n1001 = dot(g1001, vec4(Pf1.x, Pf0.y, Pf0.z, Pf1.w));\n      float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n      float n1101 = dot(g1101, vec4(Pf1.x, Pf1.y, Pf0.z, Pf1.w));\n      float n0011 = dot(g0011, vec4(Pf0.x, Pf0.y, Pf1.z, Pf1.w));\n      float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.z, Pf1.w));\n      float n0111 = dot(g0111, vec4(Pf0.x, Pf1.y, Pf1.z, Pf1.w));\n      float n1111 = dot(g1111, Pf1);\n\n      vec4 fade_xyzw = fade(Pf0);\n      vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n      vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n      vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n      vec2 n_yzw = mix(vec2(n_zw.x, n_zw.y), vec2(n_zw.z, n_zw.w), fade_xyzw.y);\n      float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n      return float(2.2) * n_xyzw;\n    }\n\n    float getPerlinNoise(vec3 pos, float frequency) {\n      const float octaveFrequencyFactor = 2.0;\n\n      float sum = 0.0;\n      float weightSum = 0.0;\n      float weight = 1.0;\n\n      for (int oct = 0; oct < 3; oct++) {\n        vec3 p = pos * frequency;\n        float val = 0.5 + 0.5 * glmPerlin(vec4(p, 0.0), vec4(frequency));\n        sum += val * weight;\n        weightSum += weight;\n        weight *= 0.5;\n        frequency *= octaveFrequencyFactor;\n      }\n\n      float noise = (sum / weightSum);\n      noise = saturate(noise);\n      return noise;\n    }\n\n    float hash(float p) {\n      p = fract(p * 0.1031);\n      p *= p + 33.33;\n      p *= p + p;\n      return fract(p);;\n    }\n\n    float noise(vec3 x) {\n      vec3 p = floor(x);\n      vec3 f = fract(x);\n\n      f = f * f * (3.0 - 2.0 * f);\n      float n = p.x + p.y * 57.0 + 113.0 * p.z;\n\n      return mix(\n      mix(\n        mix(hash(n + 0.0), hash(n + 1.0), f.x),\n        mix(hash(n + 57.0), hash(n + 58.0), f.x),\n        f.y),\n      mix(\n        mix(hash(n + 113.0), hash(n + 114.0), f.x),\n        mix(hash(n + 170.0), hash(n + 171.0), f.x),\n        f.y),\n      f.z);\n    }\n\n    float worley(vec3 pos, float numCells) {\n      vec3 p = pos * numCells;\n      float d = 1.0e10;\n\n      for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n          for (int z = -1; z <= 1; z++) {\n            vec3 tp = floor(p) + vec3(x, y, z);\n            tp = p - tp - noise(mod(tp, numCells));\n            d = min(d, dot(tp, tp));\n          }\n        }\n      }\n\n      return 1.0 - clamp(d, 0.0, 1.0);\n    }\n\n    vec3 get3Dfrom2D(vec2 uv, float tileRows) {\n      vec2 tile = floor(uv);\n      float z = floor(tileRows * tile.y + tile.x);\n      return vec3(fract(uv), z);\n    }\n\n    float getTextureForPoint(vec3 p, int type) {\n      if (type == PERLIN_WORLEY) {\n\n        const float frequency = 8.0;\n        float perlinNoise = getPerlinNoise(p, frequency);\n\n        float worley0 = worley(p, NUM_CELLS * 2.0);\n        float worley1 = worley(p, NUM_CELLS * 8.0);\n        float worley2 = worley(p, NUM_CELLS * 14.0);\n\n        float worleyFBM = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;\n        return remap(perlinNoise, 0.0, 1.0, worleyFBM, 1.0);\n      }\n\n      float worley0 = worley(p, NUM_CELLS);\n      float worley1 = worley(p, NUM_CELLS * 2.0);\n      float worley2 = worley(p, NUM_CELLS * 4.0);\n      float worley3 = worley(p, NUM_CELLS * 8.0);\n\n      float FBM0 = worley0 * 0.625 + worley1 * 0.25 + worley2 * 0.125;\n      float FBM1 = worley1 * 0.625 + worley2 * 0.25 + worley3 * 0.125;\n      float FBM2 = worley2 * 0.75 + worley3 * 0.25;\n\n      return FBM0 * 0.625 + FBM1 * 0.25 + FBM2 * 0.125;\n    }\n  "),n.fragment.code.add("\n    void main() {\n      const float padWidth = 1.0;\n      float paddedSize = tileSize + 2.0 * padWidth;\n      float tileCount = tileRows * tileRows;\n      vec2 tile = floor((gl_FragCoord.xy - 0.5) / paddedSize);\n\n      bool padCell = false;\n      if (mod(gl_FragCoord.x, paddedSize) == 0.5 || mod(gl_FragCoord.x, paddedSize) == paddedSize - 0.5) {\n        padCell = true;\n      }\n\n      if (mod(gl_FragCoord.y, paddedSize) == 0.5 || mod(gl_FragCoord.y, paddedSize) == paddedSize - 0.5) {\n        padCell = true;\n      }\n\n      bool startPadX = false;\n      bool startPadY = false;\n      bool endPadX = false;\n      bool endPadY = false;\n\n      if (gl_FragCoord.x == tile.x * paddedSize + 0.5) {\n        startPadX = true;\n      }\n\n      if (gl_FragCoord.y == tile.y * paddedSize + 0.5) {\n        startPadY = true;\n      }\n\n      if (gl_FragCoord.x == (tile.x + 1.0) * paddedSize - 0.5) {\n        endPadX = true;\n      }\n\n      if (gl_FragCoord.y == (tile.y + 1.0) * paddedSize - 0.5) {\n        endPadY = true;\n      }\n\n      vec2 padding = vec2(2.0 * padWidth) * tile;\n      vec2 uv;\n\n      if (padCell) {\n        vec2 pixel = gl_FragCoord.xy - padWidth - padding;\n\n        if (startPadX) {\n          pixel.x += tileSize;\t\n        }\n\n        if (startPadY) {\n          pixel.y += tileSize;\t\n        }\n\n        if (endPadX) {\n          pixel.x -= tileSize;\t\n        }\n\n        if (endPadY) {\n          pixel.y -= tileSize;\t\n        }\n\n        uv = vec2(pixel.xy / tileSize);\n      } else {\n        vec2 pixel = gl_FragCoord.xy - padWidth - padding;\n        uv = vec2(pixel.xy / tileSize);\n      }\n\n      vec3 p_ = get3Dfrom2D(uv, tileRows);\n      vec3 p = p_;\n      p.z /= (tileRows * tileRows);\n\n      float worleyPerlinNoise = getTextureForPoint(p, PERLIN_WORLEY);\n      float worleyNoise = getTextureForPoint(p, WORLEY);\n\n      gl_FragColor.r = saturate(remap(worleyPerlinNoise, worleyNoise, 1.0, 0.0, 1.0));\n\n      p_ = mod(p_ + 1.0, tileRows * tileRows);\n      p = p_;\n      p.z /= (tileRows * tileRows);\n\n      worleyPerlinNoise = getTextureForPoint(p, PERLIN_WORLEY);\n      worleyNoise = getTextureForPoint(p, WORLEY);\n\n      gl_FragColor.g = saturate(remap(worleyPerlinNoise, worleyNoise, 1.0, 0.0, 1.0));\n\n    \tgl_FragColor.ba = vec2(0, 1);\n    }\n  "),n}const g=Object.freeze({__proto__:null,build:t});n.NoiseTextureAtlasShader=g,n.build=t}));
