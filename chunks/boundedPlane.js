/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.19/esri/copyright.txt for details.
*/
define(["exports","../core/has","../core/Logger","../core/mathUtils","./vec3f64","./vec3","../views/3d/support/mathUtils","./mat4","../core/ObjectStack","./mat4f64","../views/3d/support/stack","./vector","./lineSegment","./ray","./plane"],(function(t,n,e,i,s,o,r,a,c,u,l,d,g,b,f){"use strict";const p=e.getLogger("esri.views.3d.support.geometryUtils.boundedPlane");let m=function(){this.plane=f.create(),this.origin=s.create(),this.basis1=s.create(),this.basis2=s.create()};function h(t=K){return{plane:f.create(t.plane),origin:s.clone(t.origin),basis1:s.clone(t.basis1),basis2:s.clone(t.basis2)}}function P(t,n,e){const i=$.get();return i.origin=t,i.basis1=n,i.basis2=e,i.plane=f.wrap(0,0,0,0),S(i),i}function v(t,n=h()){return I(t.origin,t.basis1,t.basis2,n)}function y(t,n){o.copy(n.origin,t.origin),o.copy(n.basis1,t.basis1),o.copy(n.basis2,t.basis2),f.copy(t.plane,n.plane)}function I(t,n,e,i=h()){return o.copy(i.origin,t),o.copy(i.basis1,n),o.copy(i.basis2,e),S(i),H(i,"fromValues()"),i}function S(t){f.fromVectorsAndPoint(t.basis2,t.basis1,t.origin,t.plane)}function M(t,n,e){t!==e&&v(t,e);const i=o.scale(l.sv3d.get(),Y(t),n);return o.add(e.origin,e.origin,i),e.plane[3]-=n,e}function j(t,n,e){return A(n,e),M(e,k(t,t.origin),e),e}function A(t,n=h()){const e=(t[2]-t[0])/2,i=(t[3]-t[1])/2;return o.set(n.origin,t[0]+e,t[1]+i,0),o.set(n.basis1,e,0,0),o.set(n.basis2,0,i,0),f.fromValues(0,0,1,0,n.plane),n}function V(t,n,e){return!!f.intersectRay(t.plane,n,e)&&W(t,e)}function w(t,n,e){if(V(t,n,e))return e;const i=N(t,n,l.sv3d.get());return o.add(e,n.origin,o.scale(l.sv3d.get(),n.direction,o.distance(n.origin,i)/o.length(n.direction))),e}function N(t,n,e){const s=Q.get();J(t,n,s,Q.get());let a=Number.POSITIVE_INFINITY;for(const c of tt){const u=D(t,c,X.get()),d=l.sv3d.get();if(f.intersectLineSegment(s,u,d)){const t=r.directionFromTo(l.sv3d.get(),n.origin,d),s=Math.abs(i.acosClamped(o.dot(n.direction,t)));s<a&&(a=s,o.copy(e,d))}}return a===Number.POSITIVE_INFINITY?x(t,n,e):e}function x(t,n,e){if(V(t,n,e))return e;const i=Q.get(),s=Q.get();J(t,n,i,s);let r=Number.POSITIVE_INFINITY;for(const a of tt){const c=D(t,a,X.get()),u=l.sv3d.get();if(f.intersectLineSegmentClamp(i,c,u)){const t=b.distance2(n,u);if(!f.isPointInside(s,u))continue;t<r&&(r=t,o.copy(e,u))}}return T(t,n.origin)<r&&L(t,n.origin,e),e}function L(t,n,e){const i=f.projectPoint(t.plane,n,l.sv3d.get()),s=g.projectPointClamp(G(t,t.basis1),i,-1,1,l.sv3d.get()),r=g.projectPointClamp(G(t,t.basis2),i,-1,1,l.sv3d.get());return o.subtract(e,o.add(l.sv3d.get(),s,r),t.origin),e}function O(t,n,e){const{origin:i,basis1:s,basis2:r}=t,a=o.subtract(l.sv3d.get(),n,i),c=d.projectPointSignedLength(s,a),u=d.projectPointSignedLength(r,a),g=d.projectPointSignedLength(Y(t),a);return o.set(e,c,u,g)}function T(t,n){const e=O(t,n,l.sv3d.get()),{basis1:i,basis2:s}=t,r=o.length(i),a=o.length(s),c=Math.max(Math.abs(e[0])-r,0),u=Math.max(Math.abs(e[1])-a,0),d=e[2];return c*c+u*u+d*d}function C(t,n){return Math.sqrt(T(t,n))}function E(t,n){let e=Number.NEGATIVE_INFINITY;for(const i of tt){const s=D(t,i,X.get()),o=g.distance2(s,n);o>e&&(e=o)}return Math.sqrt(e)}function q(t,n){return f.isPointInside(t.plane,n)&&W(t,n)}function _(t,n,e,i){return z(t,e,i)}function k(t,n){const e=-t.plane[3];return d.projectPointSignedLength(Y(t),n)-e}function R(t,n,e,i){const s=k(t,n),r=o.scale(Z,Y(t),e-s);return o.add(i,n,r),i}function U(t,n){return o.exactEquals(t.basis1,n.basis1)&&o.exactEquals(t.basis2,n.basis2)&&o.exactEquals(t.origin,n.origin)}function F(t,n,e){return t!==e&&v(t,e),a.invert(nt,n),a.transpose(nt,nt),o.transformMat4(e.basis1,t.basis1,nt),o.transformMat4(e.basis2,t.basis2,nt),o.transformMat4(f.normal(e.plane),f.normal(t.plane),nt),o.transformMat4(e.origin,t.origin,n),f.setOffsetFromPoint(e.plane,e.origin,e.plane),e}function B(t,n,e,i){return t!==i&&v(t,i),a.rotate(et,a.identity(et),n,e),o.transformMat4(i.basis1,t.basis1,et),o.transformMat4(i.basis2,t.basis2,et),S(i),i}function Y(t){return f.normal(t.plane)}function z(t,n,e){switch(n){case 0:o.copy(e,t.basis1),o.normalize(e,e);break;case 1:o.copy(e,t.basis2),o.normalize(e,e);break;case 2:o.copy(e,Y(t))}return e}function W(t,n){const e=o.subtract(l.sv3d.get(),n,t.origin),i=o.squaredLength(t.basis1),s=o.squaredLength(t.basis2),r=o.dot(t.basis1,e),a=o.dot(t.basis2,e);return-r-i<0&&r-i<0&&-a-s<0&&a-s<0}function G(t,n){const e=X.get();return o.copy(e.origin,t.origin),o.copy(e.vector,n),e}function D(t,n,e){const{basis1:i,basis2:s,origin:r}=t,a=o.scale(l.sv3d.get(),i,n.origin[0]),c=o.scale(l.sv3d.get(),s,n.origin[1]);o.add(e.origin,a,c),o.add(e.origin,e.origin,r);const u=o.scale(l.sv3d.get(),i,n.direction[0]),d=o.scale(l.sv3d.get(),s,n.direction[1]);return o.scale(e.vector,o.add(u,u,d),2),e}function H(t,n){Math.abs(o.dot(t.basis1,t.basis2)/(o.length(t.basis1)*o.length(t.basis2)))>1e-6&&p.warn(n,"Provided basis vectors are not perpendicular"),Math.abs(o.dot(t.basis1,Y(t)))>1e-6&&p.warn(n,"Basis vectors and plane normal are not perpendicular"),Math.abs(-o.dot(Y(t),t.origin)-t.plane[3])>1e-6&&p.warn(n,"Plane offset is not consistent with plane origin")}function J(t,n,e,i){const s=Y(t);f.fromVectorsAndPoint(s,n.direction,n.origin,e),f.fromVectorsAndPoint(f.normal(e),s,n.origin,i)}const K={plane:f.create(),origin:s.fromValues(0,0,0),basis1:s.fromValues(1,0,0),basis2:s.fromValues(0,1,0)},Q=new c.ObjectStack(f.create),X=new c.ObjectStack(g.create),Z=s.create(),$=new c.ObjectStack((()=>({origin:null,basis1:null,basis2:null,plane:null}))),tt=[{origin:[-1,-1],direction:[1,0]},{origin:[1,-1],direction:[0,1]},{origin:[1,1],direction:[-1,0]},{origin:[-1,1],direction:[0,-1]}],nt=u.create(),et=u.create();var it=Object.freeze({__proto__:null,BoundedPlaneClass:m,create:h,wrap:P,copy:v,copyWithoutVerify:y,fromValues:I,updateUnboundedPlane:S,elevate:M,setExtent:j,fromAABoundingRect:A,intersectRay:V,intersectRayClosestSilhouette:w,closestPointOnSilhouette:N,closestPoint:x,projectPoint:L,projectPointLocal:O,distance2:T,distance:C,distanceToSilhouette:E,extrusionContainsPoint:q,axisAt:_,altitudeAt:k,setAltitudeAt:R,equals:U,transform:F,rotate:B,normal:Y,UP:K});t.BoundedPlaneClass=m,t.UP=K,t.altitudeAt=k,t.axisAt=_,t.boundedPlaneModule=it,t.closestPoint=x,t.closestPointOnSilhouette=N,t.copy=v,t.copyWithoutVerify=y,t.create=h,t.distance=C,t.distance2=T,t.distanceToSilhouette=E,t.elevate=M,t.equals=U,t.extrusionContainsPoint=q,t.fromAABoundingRect=A,t.fromValues=I,t.intersectRay=V,t.intersectRayClosestSilhouette=w,t.normal=Y,t.projectPoint=L,t.projectPointLocal=O,t.rotate=B,t.setAltitudeAt=R,t.setExtent=j,t.transform=F,t.updateUnboundedPlane=S,t.wrap=P}));
