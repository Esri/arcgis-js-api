/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.20/esri/copyright.txt for details.
*/
define(["exports","../chunks/_rollupPluginBabelHelpers","../request","../core/queryUtils","../geometry/support/normalizeUtils","./networkService","./utils","./support/ClosestFacilitySolveResult"],(function(e,r,t,i,s,a,n,o){"use strict";const u=i.createQueryParamsHelper({accumulateAttributes:{name:"accumulateAttributeNames"},attributeParameterValues:!0,directionsTimeAttribute:{name:"directionsTimeAttributeName"},impedanceAttribute:{name:"impedanceAttributeName"},facilities:!0,incidents:!0,outSpatialReference:{name:"outSR",getter:e=>e.outSpatialReference.wkid},pointBarriers:{name:"barriers"},polylineBarriers:!0,polygonBarriers:!0,restrictionAttributes:{name:"restrictionAttributeNames"},returnPointBarriers:{name:"returnBarriers"},returnRoutes:{name:"returnCFRoutes"},travelMode:!0});function l(e,r,t){return c.apply(this,arguments)}function c(){return(c=r._asyncToGenerator((function*(e,r,i){const l=[],c=[],p={},f={},m=n.parseUrl(e);return r.incidents&&r.incidents.features&&a.collectGeometries(r.incidents.features,c,"incidents.features",p),r.facilities&&r.facilities.features&&a.collectGeometries(r.facilities.features,c,"facilities.features",p),r.pointBarriers&&r.pointBarriers.features&&a.collectGeometries(r.pointBarriers.features,c,"pointBarriers.features",p),r.polylineBarriers&&r.polylineBarriers.features&&a.collectGeometries(r.polylineBarriers.features,c,"polylineBarriers.features",p),r.polygonBarriers&&r.polygonBarriers.features&&a.collectGeometries(r.polygonBarriers.features,c,"polygonBarriers.features",p),s.normalizeCentralMeridian(c).then((e=>{for(const r in p){const t=p[r];l.push(r),f[r]=e.slice(t[0],t[1])}return a.isInputGeometryZAware(f,l)?a.fetchServiceDescription(m.path):Promise.resolve({dontCheck:!0})})).then((e=>{("dontCheck"in e?e.dontCheck:e.hasZ)||a.dropZValuesOffInputGeometry(f,l);for(const t in f)f[t].forEach(((e,i)=>{r.get(t)[i].geometry=e}));let s={query:{...m.query,f:"json",...u.toQueryParams(r)}};return i&&(s={...i,...s}),t(`${m.path}/solveClosestFacility`,s)})).then((e=>o.fromJSON(e.data)))}))).apply(this,arguments)}e.solve=l,Object.defineProperty(e,"__esModule",{value:!0})}));
