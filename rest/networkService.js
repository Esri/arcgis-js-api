/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
define(["exports","../chunks/_rollupPluginBabelHelpers","../request","../core/Error","../core/Logger","../core/maybe","../core/object","../core/urlUtils","./utils","./support/NetworkServiceDescription"],(function(e,r,t,o,s,n,l,a,i,u){"use strict";const d=s.getLogger("esri.rest.networkService");function p(e,r,t,o){o[t]=[r.length,r.length+e.length],e.forEach((e=>{r.push(e.geometry)}))}function c(e,r){for(let t=0;t<r.length;t++){const o=e[r[t]];if(o&&o.length)for(const e of o)e.z=void 0}d.warnOnce("The remote Network Analysis service is powered by a network dataset which is not Z-aware.\nZ-coordinates of the input geometry are ignored.")}function f(e,r){for(let t=0;t<r.length;t++){const o=e[r[t]];if(o&&o.length)for(const e of o)if(n.isSome(e)&&e.hasZ)return!0}return!1}function v(e,r,t){return h.apply(this,arguments)}function h(){return(h=r._asyncToGenerator((function*(e,r,s){if(!e)throw new o("network-service:missing-url","Url to Network service is missing");const n={f:"json",token:r},l=i.asValidOptions(n,s),{data:a}=yield t(e,l);a.supportedTravelModes||(a.supportedTravelModes=[]);for(let t=0;t<a.supportedTravelModes.length;t++)a.supportedTravelModes[t].id||(a.supportedTravelModes[t].id=a.supportedTravelModes[t].itemId);const d=a.currentVersion>=10.4?M(e,r,s):T(e,s),{defaultTravelMode:p,supportedTravelModes:c}=yield d;return a.defaultTravelMode=p,a.supportedTravelModes=c,u.fromJSON(a)}))).apply(this,arguments)}function T(e,r){return g.apply(this,arguments)}function g(){return(g=r._asyncToGenerator((function*(e,r){const o={f:"json"},s=i.asValidOptions(o,r),{data:n}=yield t(e.replace(/\/rest\/.*$/i,"/info"),s);if(!n||!n.owningSystemUrl)return{supportedTravelModes:[],defaultTravelMode:null};const{owningSystemUrl:u}=n,d=a.removeTrailingSlash(u)+"/sharing/rest/portals/self",{data:p}=yield t(d,s),c=l.getDeepValue("helperServices.routingUtilities.url",p);if(!c)return{supportedTravelModes:[],defaultTravelMode:null};const f=i.parseUrl(u),v={f:"json",serviceName:/\/solve$/i.test(f.path)?"Route":/\/solveclosestfacility$/i.test(f.path)?"ClosestFacility":"ServiceAreas"},h=i.asValidOptions(v,r),T=a.removeTrailingSlash(c)+"/GetTravelModes/execute",g=yield t(T,h),M=[];let y=null;if(g?.data?.results?.length){const e=g.data.results;for(const r of e)if("supportedTravelModes"===r.paramName){if(r.value?.features)for(const{attributes:e}of r.value.features)if(e){const r=JSON.parse(e.TravelMode);M.push(r)}}else"defaultTravelMode"===r.paramName&&(y=r.value)}return{supportedTravelModes:M,defaultTravelMode:y}}))).apply(this,arguments)}function M(e,r,t){return y.apply(this,arguments)}function y(){return(y=r._asyncToGenerator((function*(e,r,s){try{const o={f:"json",token:r},n=i.asValidOptions(o,s),l=a.removeTrailingSlash(e)+"/retrieveTravelModes",{data:{supportedTravelModes:u,defaultTravelMode:d}}=yield t(l,n);return{supportedTravelModes:u,defaultTravelMode:d}}catch(n){throw new o("network-service:retrieveTravelModes","Could not get to the NAServer's retrieveTravelModes.",{error:n})}}))).apply(this,arguments)}e.collectGeometries=p,e.dropZValuesOffInputGeometry=c,e.fetchServiceDescription=v,e.isInputGeometryZAware=f,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
