/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.18/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../Logger","../handleUtils","../promiseUtils","./RemoteClient"],(function(e,t,n,s,i){"use strict";const l=t.getLogger("esri.core.workers.Connection");return function(){function t(){this._clients=new Array,this._clientPromises=new Array,this._clientIdx=0}var r=t.prototype;return r.destroy=function(){this.close()},r.open=function(e,t){return s.create(((n,l)=>{let r=!0;const o=e=>{s.throwIfAborted(t.signal),r&&(r=!1,e())};this._clients.length=e.length,this._clientPromises.length=e.length;for(let r=0;r<e.length;++r){const c=e[r];s.isThenable(c)?this._clientPromises[r]=c.then((e=>(this._clients[r]=new i(e,t),o(n),this._clients[r])),(()=>(o(l),null))):(this._clients[r]=new i(c,t),this._clientPromises[r]=s.resolve(this._clients[r]),o(n))}}))},r.broadcast=function(e,t,n){const s=new Array(this._clientPromises.length);for(let i=0;i<this._clientPromises.length;++i){const l=this._clientPromises[i];s[i]=l.then((s=>s.invoke(e,t,n)))}return s},r.close=function(){for(const e of this._clientPromises)e.then((e=>e.close()));this._clients.length=0,this._clientPromises.length=0},r.getAvailableClient=function(){let e;for(let t=0;t<this._clients.length;++t){const n=this._clients[t];if(n){if(!n.isBusy())return s.resolve(n)}else e=e||[],e.push(this._clientPromises[t])}return e?s.first(e):(this._clientIdx=(this._clientIdx+1)%this._clients.length,s.resolve(this._clients[this._clientIdx]))},r.invoke=function(e,t,n){let i=null;if(Array.isArray(n)?(l.warn("invoke()","The transferList parameter is deprecated, use the options object instead"),i={transferList:n}):i=n,this.closed)return s.reject(new Error("Connection closed"));return this.getAvailableClient().then((n=>n.invoke(e,t,i)))},r.on=function(e,t){return s.all(this._clientPromises).then((()=>n.handlesGroup(this._clients.map((n=>n.on(e,t))))))},r.openPorts=function(){return s.create((e=>{const t=new Array(this._clientPromises.length);let n=t.length;for(let s=0;s<this._clientPromises.length;++s){this._clientPromises[s].then((i=>{t[s]=i.openPort(),0==--n&&e(t)}))}}))},e._createClass(t,[{key:"closed",get:function(){return!this._clients||!this._clients.length}},{key:"test",get:function(){return{numClients:this._clients.length}}}]),t}()}));
