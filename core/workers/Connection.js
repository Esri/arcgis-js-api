/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.23/esri/copyright.txt for details.
*/
define(["../../chunks/_rollupPluginBabelHelpers","../handleUtils","../Logger","../promiseUtils","./RemoteClient"],(function(e,t,n,i,s){"use strict";const r=n.getLogger("esri.core.workers.Connection");return function(){function n(){this._clients=new Array,this._clientPromises=new Array,this._clientIdx=0}var l=n.prototype;return l.destroy=function(){this.close()},l.open=function(e,t){return new Promise(((n,r)=>{let l=!0;const o=e=>{i.throwIfAborted(t.signal),l&&(l=!1,e())};this._clients.length=e.length,this._clientPromises.length=e.length;for(let c=0;c<e.length;++c){const l=e[c];i.isPromiseLike(l)?this._clientPromises[c]=l.then((e=>(this._clients[c]=new s(e,t),o(n),this._clients[c])),(()=>(o(r),null))):(this._clients[c]=new s(l,t),this._clientPromises[c]=Promise.resolve(this._clients[c]),o(n))}}))},l.broadcast=function(e,t,n){const i=new Array(this._clientPromises.length);for(let s=0;s<this._clientPromises.length;++s){const r=this._clientPromises[s];i[s]=r.then((i=>i.invoke(e,t,n)))}return i},l.close=function(){for(const e of this._clientPromises)e.then((e=>e.close()));this._clients.length=0,this._clientPromises.length=0},l.getAvailableClient=function(){let e;for(let t=0;t<this._clients.length;++t){const n=this._clients[t];if(n){if(!n.isBusy())return Promise.resolve(n)}else e=e||[],e.push(this._clientPromises[t])}return e?Promise.race(e):(this._clientIdx=(this._clientIdx+1)%this._clients.length,Promise.resolve(this._clients[this._clientIdx]))},l.invoke=function(e,t,n){let i=null;if(Array.isArray(n)?(r.warn("invoke()","The transferList parameter is deprecated, use the options object instead"),i={transferList:n}):i=n,this.closed)return Promise.reject(new Error("Connection closed"));return this.getAvailableClient().then((n=>n.invoke(e,t,i)))},l.on=function(e,n){return Promise.all(this._clientPromises).then((()=>t.handlesGroup(this._clients.map((t=>t.on(e,n))))))},l.openPorts=function(){return new Promise((e=>{const t=new Array(this._clientPromises.length);let n=t.length;for(let i=0;i<this._clientPromises.length;++i){this._clientPromises[i].then((s=>{t[i]=s.openPort(),0==--n&&e(t)}))}}))},e._createClass(n,[{key:"closed",get:function(){return!this._clients||!this._clients.length}},{key:"test",get:function(){return{numClients:this._clients.length}}}]),n}()}));
